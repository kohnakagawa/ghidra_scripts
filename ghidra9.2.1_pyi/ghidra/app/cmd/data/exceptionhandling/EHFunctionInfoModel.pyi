import ghidra.app.cmd.data
import ghidra.app.cmd.data.exceptionhandling
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.listing
import java.lang


class EHFunctionInfoModel(ghidra.app.cmd.data.AbstractCreateDataTypeModel):
    DATA_TYPE_NAME: unicode = u'FuncInfo'
    EH_MAGIC_NUMBER_V1: int = 429065504
    EH_MAGIC_NUMBER_V2: int = 429065505
    EH_MAGIC_NUMBER_V3: int = 429065506



    def __init__(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.Address, __a2: ghidra.app.util.datatype.microsoft.DataValidationOptions): ...



    def checkAgainstMaxCount(self, __a0: unicode, __a1: int, __a2: int) -> None: ...

    def checkEntryCount(self, __a0: unicode, __a1: int, __a2: int) -> None: ...

    def checkNonNegative(self, __a0: unicode, __a1: int) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getBbtFlags(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getComponentAddressOfESTypeListAddress(self) -> ghidra.program.model.address.Address: ...

    def getComponentAddressOfIPToStateMapAddress(self) -> ghidra.program.model.address.Address: ...

    def getComponentAddressOfTryBlockMapAddress(self) -> ghidra.program.model.address.Address: ...

    def getComponentAddressOfUnwindHelpAddress(self) -> ghidra.program.model.address.Address: ...

    def getComponentAddressOfUnwindMapAddress(self) -> ghidra.program.model.address.Address: ...

    def getCount(self) -> int: ...

    def getDataType(self) -> ghidra.program.model.data.DataType: ...

    def getEHESTypeListModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHESTypeListModel: ...

    def getEHFlags(self) -> int: ...

    def getEHIPToStateModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHIPToStateModel: ...

    def getEHTryBlockModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHTryBlockModel: ...

    def getEHUnwindModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHUnwindModel: ...

    def getESTypeListAddress(self) -> ghidra.program.model.address.Address: ...

    def getESTypeListModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHESTypeListModel: ...

    def getIPToStateCount(self) -> int: ...

    def getIPToStateMapAddress(self) -> ghidra.program.model.address.Address: ...

    def getIPToStateModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHIPToStateModel: ...

    def getMagicNumber(self) -> int: ...

    def getName(self) -> unicode: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getTryBlockCount(self) -> int: ...

    def getTryBlockMapAddress(self) -> ghidra.program.model.address.Address: ...

    def getTryBlockModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHTryBlockModel: ...

    def getUnwindCount(self) -> int: ...

    def getUnwindHelpDisplacement(self) -> int: ...

    def getUnwindMapAddress(self) -> ghidra.program.model.address.Address: ...

    def getUnwindModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHUnwindModel: ...

    def getVersionNumber(self) -> int: ...

    def hashCode(self) -> int: ...

    def isBlockedByInstructions(self) -> bool: ...

    def isDataTypeAlreadyBasedOnCount(self) -> bool: ...

    def isLoadedAndInitializedAddress(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    def validate(self) -> None: ...

    def validateCounts(self, __a0: int) -> None: ...

    def validateLocationsInSameBlock(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def EHESTypeListModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHESTypeListModel: ...

    @property
    def EHFlags(self) -> int: ...

    @property
    def EHIPToStateModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHIPToStateModel: ...

    @property
    def EHTryBlockModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHTryBlockModel: ...

    @property
    def EHUnwindModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHUnwindModel: ...

    @property
    def ESTypeListAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def ESTypeListModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHESTypeListModel: ...

    @property
    def IPToStateCount(self) -> int: ...

    @property
    def IPToStateMapAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def IPToStateModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHIPToStateModel: ...

    @property
    def bbtFlags(self) -> int: ...

    @property
    def componentAddressOfESTypeListAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def componentAddressOfIPToStateMapAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def componentAddressOfTryBlockMapAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def componentAddressOfUnwindHelpAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def componentAddressOfUnwindMapAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def dataType(self) -> ghidra.program.model.data.DataType: ...

    @property
    def magicNumber(self) -> int: ...

    @property
    def name(self) -> unicode: ...

    @property
    def tryBlockCount(self) -> int: ...

    @property
    def tryBlockMapAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def tryBlockModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHTryBlockModel: ...

    @property
    def unwindCount(self) -> int: ...

    @property
    def unwindHelpDisplacement(self) -> int: ...

    @property
    def unwindMapAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def unwindModel(self) -> ghidra.app.cmd.data.exceptionhandling.EHUnwindModel: ...

    @property
    def versionNumber(self) -> int: ...
