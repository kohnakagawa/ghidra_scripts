from typing import List
import ghidra.app.util.bin.format.pdb2.pdbreader
import ghidra.app.util.bin.format.pdb2.pdbreader.type
import java.lang


class MsProperty(ghidra.app.util.bin.format.pdb2.pdbreader.AbstractParsableItem):
    NONE: ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty =




    class Hfa(java.lang.Enum):
        DOUBLE: ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Hfa = hfaDouble
        FLOAT: ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Hfa = hfaFloat
        NONE: ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Hfa =
        RESV: ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Hfa = hfa(3)
        label: unicode
        value: int







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def fromValue(__a0: int) -> ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Hfa: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Hfa: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Hfa]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Mocom(java.lang.Enum):
        INTERFACE: ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Mocom = interface
        NONE: ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Mocom =
        REF: ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Mocom = ref
        VALUE: ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Mocom = value
        label: unicode
        value: int







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def fromValue(__a0: int) -> ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Mocom: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Mocom: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Mocom]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader): ...



    def containsNestedTypes(self) -> bool: ...

    def emit(self, __a0: java.lang.StringBuilder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getHfa(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Hfa: ...

    def getMocom(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Mocom: ...

    def hasCastingMethods(self) -> bool: ...

    def hasConstructorOrDestructor(self) -> bool: ...

    def hasOverloadedAssignment(self) -> bool: ...

    def hasOverloadedOperators(self) -> bool: ...

    def hasScopedDefinition(self) -> bool: ...

    def hasUniqueName(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isForwardReference(self) -> bool: ...

    def isIntrinsic(self) -> bool: ...

    def isNestedClass(self) -> bool: ...

    def isPacked(self) -> bool: ...

    def isSealed(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def forwardReference(self) -> bool: ...

    @property
    def hfa(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Hfa: ...

    @property
    def intrinsic(self) -> bool: ...

    @property
    def mocom(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.type.MsProperty.Mocom: ...

    @property
    def nestedClass(self) -> bool: ...

    @property
    def packed(self) -> bool: ...

    @property
    def sealed(self) -> bool: ...
