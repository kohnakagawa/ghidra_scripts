from typing import List
import ghidra.framework.model
import ghidra.framework.plugintool
import java.io
import java.lang
import java.util


class ToolServicesImpl(object, ghidra.framework.model.ToolServices):
    """
    Implementation of service used to manipulate tools.
    """









    def addDefaultToolChangeListener(self, listener: ghidra.framework.model.DefaultToolChangeListener) -> None: ...

    def canAutoSave(self, tool: ghidra.framework.plugintool.PluginTool) -> bool: ...

    def closeTool(self, tool: ghidra.framework.plugintool.PluginTool) -> None: ...

    def displaySimilarTool(self, tool: ghidra.framework.plugintool.PluginTool, domainFile: ghidra.framework.model.DomainFile, event: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def exportTool(self, tool: ghidra.framework.model.ToolTemplate) -> java.io.File: ...

    def getClass(self) -> java.lang.Class: ...

    def getCompatibleTools(self, domainClass: java.lang.Class) -> java.util.Set: ...

    def getContentTypeToolAssociations(self) -> java.util.Set: ...

    def getDefaultToolTemplate(self, domainFile: ghidra.framework.model.DomainFile) -> ghidra.framework.model.ToolTemplate: ...

    def getRunningTools(self) -> List[ghidra.framework.plugintool.PluginTool]: ...

    def getToolChest(self) -> ghidra.framework.model.ToolChest: ...

    def hashCode(self) -> int: ...

    def launchDefaultTool(self, domainFile: ghidra.framework.model.DomainFile) -> ghidra.framework.plugintool.PluginTool: ...

    def launchTool(self, toolName: unicode, domainFile: ghidra.framework.model.DomainFile) -> ghidra.framework.plugintool.PluginTool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeDefaultToolChangeListener(self, listener: ghidra.framework.model.DefaultToolChangeListener) -> None: ...

    def saveTool(self, tool: ghidra.framework.plugintool.PluginTool) -> None: ...

    def setContentTypeToolAssociations(self, infos: java.util.Set) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
