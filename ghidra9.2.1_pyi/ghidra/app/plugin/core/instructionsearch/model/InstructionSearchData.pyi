from typing import List
import ghidra.app.plugin
import ghidra.app.plugin.core.instructionsearch.model
import ghidra.app.plugin.core.instructionsearch.ui
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.util.task
import java.lang
import java.util


class InstructionSearchData(java.util.Observable):





    class UpdateType(java.lang.Enum):
        RELOAD: ghidra.app.plugin.core.instructionsearch.model.InstructionSearchData.UpdateType = RELOAD
        UPDATE: ghidra.app.plugin.core.instructionsearch.model.InstructionSearchData.UpdateType = UPDATE







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.instructionsearch.model.InstructionSearchData.UpdateType: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.instructionsearch.model.InstructionSearchData.UpdateType]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self): ...



    def addObserver(self, __a0: java.util.Observer) -> None: ...

    def applyMasks(self, __a0: ghidra.app.plugin.core.instructionsearch.ui.InstructionTable) -> None: ...

    def clearAndReload(self) -> None: ...

    def countObservers(self) -> int: ...

    def deleteObserver(self, __a0: java.util.Observer) -> None: ...

    def deleteObservers(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCombinedString(self) -> unicode: ...

    def getInstructions(self) -> List[object]: ...

    def getMaskString(self) -> unicode: ...

    def getMaxNumOperands(self) -> int: ...

    def getValueString(self) -> unicode: ...

    def hasChanged(self) -> bool: ...

    def hashCode(self) -> int: ...

    def load(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.AddressRange) -> None: ...

    def maskAllOperands(self) -> None: ...

    def maskOperandsByType(self, __a0: int) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def notifyObservers(self) -> None: ...

    @overload
    def notifyObservers(self, __a0: object) -> None: ...

    def registerForGuiUpdates(self, __a0: ghidra.app.plugin.core.instructionsearch.ui.InstructionTable) -> None: ...

    @overload
    def search(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.AddressRange, __a2: ghidra.util.task.TaskMonitor) -> List[object]: ...

    @overload
    def search(self, __a0: ghidra.app.plugin.ProgramPlugin, __a1: ghidra.program.model.address.AddressRange, __a2: ghidra.util.task.TaskMonitor, __a3: bool) -> ghidra.app.plugin.core.instructionsearch.model.InstructionMetadata: ...

    def setInstructions(self, __a0: List[object]) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def combinedString(self) -> unicode: ...

    @property
    def instructions(self) -> List[object]: ...

    @instructions.setter
    def instructions(self, value: List[object]) -> None: ...

    @property
    def maskString(self) -> unicode: ...

    @property
    def maxNumOperands(self) -> int: ...

    @property
    def valueString(self) -> unicode: ...
