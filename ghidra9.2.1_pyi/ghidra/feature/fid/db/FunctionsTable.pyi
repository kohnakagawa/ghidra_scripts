from typing import List
import db
import ghidra.feature.fid.db
import ghidra.feature.fid.hash
import java.lang


class FunctionsTable(object):




    def __init__(self, __a0: ghidra.feature.fid.db.FidDB, __a1: db.DBHandle): ...



    def createFunctionRecord(self, __a0: long, __a1: ghidra.feature.fid.hash.FidHashQuad, __a2: unicode, __a3: long, __a4: unicode, __a5: bool) -> ghidra.feature.fid.db.FunctionRecord: ...

    @staticmethod
    def createTable(__a0: db.DBHandle) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getFullHashValueAtOrAfter(self, __a0: long) -> long: ...

    def getFunctionByID(self, __a0: long) -> ghidra.feature.fid.db.FunctionRecord: ...

    def getFunctionRecordsByDomainPathSubstring(self, __a0: unicode) -> List[object]: ...

    def getFunctionRecordsByFullHash(self, __a0: long) -> List[object]: ...

    def getFunctionRecordsByLibraryAndName(self, __a0: ghidra.feature.fid.db.LibraryRecord, __a1: unicode) -> List[object]: ...

    def getFunctionRecordsByNameRegex(self, __a0: unicode) -> List[object]: ...

    def getFunctionRecordsByNameSubstring(self, __a0: unicode) -> List[object]: ...

    def getFunctionRecordsBySpecificHash(self, __a0: long) -> List[object]: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
