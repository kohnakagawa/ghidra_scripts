import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.model.pcode
import ghidra.program.model.symbol
import ghidra.program.util
import java.lang


class ConstantPropagationContextEvaluator(ghidra.program.util.ContextEvaluatorAdapter):




    @overload
    def __init__(self): ...

    @overload
    def __init__(self, __a0: bool): ...

    @overload
    def __init__(self, __a0: bool, __a1: long, __a2: long, __a3: long): ...



    def allowAccess(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.address.Address) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def evaluateConstant(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction, __a2: int, __a3: ghidra.program.model.address.Address, __a4: int, __a5: ghidra.program.model.symbol.RefType) -> ghidra.program.model.address.Address: ...

    def evaluateContext(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction) -> bool: ...

    def evaluateContextBefore(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction) -> bool: ...

    def evaluateDestination(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction) -> bool: ...

    def evaluateReference(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction, __a2: int, __a3: ghidra.program.model.address.Address, __a4: int, __a5: ghidra.program.model.symbol.RefType) -> bool: ...

    def evaluateSymbolicReference(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction, __a2: ghidra.program.model.address.Address) -> bool: ...

    def followFalseConditionalBranches(self) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDestinationSet(self) -> ghidra.program.model.address.AddressSet: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    def unknownValue(self, __a0: ghidra.program.util.VarnodeContext, __a1: ghidra.program.model.listing.Instruction, __a2: ghidra.program.model.pcode.Varnode) -> long: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def destinationSet(self) -> ghidra.program.model.address.AddressSet: ...
