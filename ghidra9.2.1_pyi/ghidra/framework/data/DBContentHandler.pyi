import db
import ghidra.framework.data
import ghidra.framework.model
import ghidra.framework.store
import ghidra.util.task
import java.lang
import javax.swing


class DBContentHandler(object, ghidra.framework.data.ContentHandler):
    """
    DBContentHandler provides an abstract ContentHandler for
     domain object content which is stored within a database file.
     This class provides helper methods for working with database files.
    """

    MISSING_CONTENT: unicode = u'Missing-File'
    UNKNOWN_CONTENT: unicode = u'Unknown-File'



    def __init__(self): ...



    def createFile(self, __a0: ghidra.framework.store.FileSystem, __a1: ghidra.framework.store.FileSystem, __a2: unicode, __a3: unicode, __a4: ghidra.framework.model.DomainObject, __a5: ghidra.util.task.TaskMonitor) -> long: ...

    def equals(self, __a0: object) -> bool: ...

    def getChangeSet(self, __a0: ghidra.framework.store.FolderItem, __a1: int, __a2: int) -> ghidra.framework.model.ChangeSet: ...

    def getClass(self) -> java.lang.Class: ...

    def getContentType(self) -> unicode: ...

    def getContentTypeDisplayString(self) -> unicode: ...

    def getDefaultToolName(self) -> unicode: ...

    def getDomainObject(self, __a0: ghidra.framework.store.FolderItem, __a1: ghidra.framework.store.FileSystem, __a2: long, __a3: bool, __a4: bool, __a5: object, __a6: ghidra.util.task.TaskMonitor) -> ghidra.framework.data.DomainObjectAdapter: ...

    def getDomainObjectClass(self) -> java.lang.Class: ...

    def getIcon(self) -> javax.swing.Icon: ...

    def getImmutableObject(self, __a0: ghidra.framework.store.FolderItem, __a1: object, __a2: int, __a3: int, __a4: ghidra.util.task.TaskMonitor) -> ghidra.framework.data.DomainObjectAdapter: ...

    def getMergeManager(self, __a0: ghidra.framework.model.DomainObject, __a1: ghidra.framework.model.DomainObject, __a2: ghidra.framework.model.DomainObject, __a3: ghidra.framework.model.DomainObject) -> ghidra.framework.data.DomainObjectMergeManager: ...

    def getReadOnlyObject(self, __a0: ghidra.framework.store.FolderItem, __a1: int, __a2: bool, __a3: object, __a4: ghidra.util.task.TaskMonitor) -> ghidra.framework.data.DomainObjectAdapter: ...

    def hashCode(self) -> int: ...

    def isPrivateContentType(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeUserDataFile(self, associatedItem: ghidra.framework.store.FolderItem, userfs: ghidra.framework.store.FileSystem) -> None:
        """
        @see ghidra.framework.data.ContentHandler#removeUserDataFile(ghidra.framework.store.FolderItem, ghidra.framework.store.FileSystem)
        """
        ...

    def saveUserDataFile(self, domainObj: ghidra.framework.model.DomainObject, userDbh: db.DBHandle, userfs: ghidra.framework.store.FileSystem, monitor: ghidra.util.task.TaskMonitor) -> None:
        """
        @see ghidra.framework.data.ContentHandler#saveUserDataFile(ghidra.framework.model.DomainObject, db.DBHandle, ghidra.framework.store.FileSystem, ghidra.util.task.TaskMonitor)
        """
        ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def contentType(self) -> unicode: ...

    @property
    def contentTypeDisplayString(self) -> unicode: ...

    @property
    def defaultToolName(self) -> unicode: ...

    @property
    def domainObjectClass(self) -> java.lang.Class: ...

    @property
    def icon(self) -> javax.swing.Icon: ...

    @property
    def privateContentType(self) -> bool: ...
