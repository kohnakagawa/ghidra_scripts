import ghidra.pcodeCPort.context
import ghidra.pcodeCPort.semantics
import ghidra.pcodeCPort.sleighbase
import ghidra.pcodeCPort.slghpatexpress
import ghidra.pcodeCPort.slghsymbol
import ghidra.sleigh.grammar
import java.io
import java.lang
import java.util
import org.jdom


class OperandSymbol(ghidra.pcodeCPort.slghsymbol.SpecificSymbol):
    code_address: int = 1
    location: ghidra.sleigh.grammar.Location
    offset_irrel: int = 2
    offsetbase: int
    reloffset: int
    variable_len: int = 4



    @overload
    def __init__(self, __a0: ghidra.sleigh.grammar.Location): ...

    @overload
    def __init__(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: int, __a3: ghidra.pcodeCPort.slghsymbol.Constructor): ...



    def clearMark(self) -> None: ...

    def collectLocalValues(self, __a0: java.util.ArrayList) -> None: ...

    @overload
    def compareTo(self, __a0: ghidra.pcodeCPort.slghsymbol.SleighSymbol) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    @overload
    def defineOperand(self, __a0: ghidra.pcodeCPort.slghpatexpress.PatternExpression) -> None: ...

    @overload
    def defineOperand(self, __a0: ghidra.pcodeCPort.slghsymbol.TripleSymbol) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDefiningExpression(self) -> ghidra.pcodeCPort.slghpatexpress.PatternExpression: ...

    def getDefiningSymbol(self) -> ghidra.pcodeCPort.slghsymbol.TripleSymbol: ...

    def getFixedHandle(self, __a0: ghidra.pcodeCPort.context.FixedHandle, __a1: ghidra.pcodeCPort.context.ParserWalker) -> None: ...

    def getId(self) -> int: ...

    def getIndex(self) -> int: ...

    def getLocation(self) -> ghidra.sleigh.grammar.Location: ...

    def getMinimumLength(self) -> int: ...

    def getName(self) -> unicode: ...

    def getOffsetBase(self) -> int: ...

    def getPatternExpression(self) -> ghidra.pcodeCPort.slghpatexpress.PatternExpression: ...

    def getRelativeOffset(self) -> int: ...

    def getSize(self) -> int: ...

    def getType(self) -> ghidra.pcodeCPort.slghsymbol.symbol_type: ...

    def getVarnode(self) -> ghidra.pcodeCPort.semantics.VarnodeTpl: ...

    def hashCode(self) -> int: ...

    def isCodeAddress(self) -> bool: ...

    def isMarked(self) -> bool: ...

    def isOffsetIrrelevant(self) -> bool: ...

    def isVariableLength(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def print(self, __a0: java.io.PrintStream, __a1: ghidra.pcodeCPort.context.ParserWalker) -> None: ...

    def resolve(self, __a0: ghidra.pcodeCPort.context.ParserWalker) -> ghidra.pcodeCPort.slghsymbol.Constructor: ...

    def restoreXml(self, __a0: org.jdom.Element, __a1: ghidra.pcodeCPort.sleighbase.SleighBase) -> None: ...

    def saveXml(self, __a0: java.io.PrintStream) -> None: ...

    def saveXmlHeader(self, __a0: java.io.PrintStream) -> None: ...

    def setCodeAddress(self) -> None: ...

    def setLocation(self, __a0: ghidra.sleigh.grammar.Location) -> None: ...

    def setMark(self) -> None: ...

    def setOffsetIrrelevant(self) -> None: ...

    def setVariableLength(self) -> None: ...

    def setWasSought(self, __a0: bool) -> None: ...

    def toDetailedString(self) -> unicode: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def wasSought(self) -> bool: ...

    @property
    def codeAddress(self) -> bool: ...

    @property
    def definingExpression(self) -> ghidra.pcodeCPort.slghpatexpress.PatternExpression: ...

    @property
    def definingSymbol(self) -> ghidra.pcodeCPort.slghsymbol.TripleSymbol: ...

    @property
    def index(self) -> int: ...

    @property
    def marked(self) -> bool: ...

    @property
    def minimumLength(self) -> int: ...

    @property
    def offsetBase(self) -> int: ...

    @property
    def offsetIrrelevant(self) -> bool: ...

    @property
    def patternExpression(self) -> ghidra.pcodeCPort.slghpatexpress.PatternExpression: ...

    @property
    def relativeOffset(self) -> int: ...

    @property
    def size(self) -> int: ...

    @property
    def type(self) -> ghidra.pcodeCPort.slghsymbol.symbol_type: ...

    @property
    def variableLength(self) -> bool: ...

    @property
    def varnode(self) -> ghidra.pcodeCPort.semantics.VarnodeTpl: ...
