import ghidra.sleigh.grammar
import java.lang
import org.antlr.runtime


class SleighLexer(ghidra.sleigh.grammar.LexerMultiplexer, ghidra.sleigh.grammar.SleighRecognizerConstants):




    def __init__(self, input: org.antlr.runtime.CharStream): ...



    def channelOff(self, channel: int) -> None: ...

    def channelOn(self, channel: int) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getSourceName(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def nextToken(self) -> org.antlr.runtime.Token: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def popMode(self) -> int: ...

    def pushMode(self, mode: int) -> None: ...

    def setEnv(self, env: ghidra.sleigh.grammar.ParsingEnvironment) -> None: ...

    def setMode(self, mode: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def env(self) -> None: ...  # No getter available.

    @env.setter
    def env(self, value: ghidra.sleigh.grammar.ParsingEnvironment) -> None: ...
