import ghidra.app.plugin.core.functiongraph.graph
import ghidra.app.plugin.core.functiongraph.graph.vertex
import ghidra.app.plugin.core.functiongraph.mvc
import ghidra.app.util.viewer.listingpanel
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.model.symbol
import ghidra.program.util
import java.awt
import java.awt.event
import java.awt.geom
import java.lang
import java.util
import javax.swing


class GroupedFunctionGraphVertex(ghidra.app.plugin.core.functiongraph.graph.vertex.AbstractFunctionGraphVertex):




    def __init__(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController, __a1: unicode, __a2: java.util.Set, __a3: java.util.Set): ...



    def addGroupListener(self, __a0: ghidra.app.plugin.core.functiongraph.graph.vertex.GroupListener) -> None: ...

    def clearColor(self) -> None: ...

    def cloneVertex(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController) -> ghidra.app.plugin.core.functiongraph.graph.vertex.FGVertex: ...

    def containsAddress(self, __a0: ghidra.program.model.address.Address) -> bool: ...

    def containsProgramLocation(self, __a0: ghidra.program.util.ProgramLocation) -> bool: ...

    def derriveGroupVertex(self, __a0: java.util.Set, __a1: unicode, __a2: java.util.Set) -> ghidra.app.plugin.core.functiongraph.graph.vertex.GroupedFunctionGraphVertex: ...

    def dispose(self) -> None: ...

    def editLabel(self, __a0: javax.swing.JComponent) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def generateGroupVertexDescription(__a0: java.util.Set) -> unicode: ...

    def getAddresses(self) -> ghidra.program.model.address.AddressSetView: ...

    def getAlpha(self) -> float: ...

    def getBackgroundColor(self) -> java.awt.Color: ...

    def getBounds(self) -> java.awt.Rectangle: ...

    def getClass(self) -> java.lang.Class: ...

    def getComponent(self) -> javax.swing.JComponent: ...

    def getController(self) -> ghidra.app.plugin.core.functiongraph.mvc.FGController: ...

    def getCursorBounds(self) -> java.awt.Rectangle: ...

    def getDefaultBackgroundColor(self) -> java.awt.Color: ...

    def getEmphasis(self) -> float: ...

    def getFlowType(self) -> ghidra.program.model.symbol.FlowType: ...

    def getGroupInfo(self) -> ghidra.app.plugin.core.functiongraph.graph.vertex.GroupHistoryInfo: ...

    def getListingModel(self, __a0: ghidra.program.model.address.Address) -> ghidra.app.util.viewer.listingpanel.ListingModel: ...

    def getLocation(self) -> java.awt.geom.Point2D: ...

    def getMaximizedViewComponent(self) -> java.awt.Component: ...

    def getPreGroupLocations(self) -> java.util.Map: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getProgramLocation(self) -> ghidra.program.util.ProgramLocation: ...

    def getProgramSelection(self) -> ghidra.program.util.ProgramSelection: ...

    def getSelectionColor(self) -> java.awt.Color: ...

    def getTitle(self) -> unicode: ...

    def getToolTipComponentForEdge(self, __a0: ghidra.app.plugin.core.functiongraph.graph.FGEdge) -> javax.swing.JComponent: ...

    def getToolTipComponentForVertex(self) -> javax.swing.JComponent: ...

    def getToolTipText(self, __a0: java.awt.event.MouseEvent) -> unicode: ...

    def getUngroupedEdges(self) -> java.util.Set: ...

    def getUserDefinedColor(self) -> java.awt.Color: ...

    def getUserText(self) -> unicode: ...

    def getVertexAddress(self) -> ghidra.program.model.address.Address: ...

    @staticmethod
    def getVertexDescription(__a0: ghidra.app.plugin.core.functiongraph.graph.vertex.FGVertex) -> unicode: ...

    def getVertexType(self) -> ghidra.app.plugin.core.functiongraph.graph.FGVertexType: ...

    def getVertices(self) -> java.util.Set: ...

    def hashCode(self) -> int: ...

    def isDefaultBackgroundColor(self) -> bool: ...

    def isEntry(self) -> bool: ...

    def isFocused(self) -> bool: ...

    def isFullScreenMode(self) -> bool: ...

    def isGrabbable(self, __a0: java.awt.Component) -> bool: ...

    def isHeaderClick(self, __a0: java.awt.Component) -> bool: ...

    def isHovered(self) -> bool: ...

    def isSelected(self) -> bool: ...

    def isUncollapsedGroupMember(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readSettings(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FunctionGraphVertexAttributes) -> None: ...

    def refreshDisplay(self) -> None: ...

    def refreshDisplayForAddress(self, __a0: ghidra.program.model.address.Address) -> None: ...

    def refreshModel(self) -> None: ...

    def removeAll(self, __a0: java.util.Set) -> ghidra.app.plugin.core.functiongraph.graph.vertex.GroupedFunctionGraphVertex: ...

    def removeGroupListener(self, __a0: ghidra.app.plugin.core.functiongraph.graph.vertex.GroupListener) -> None: ...

    def restoreColor(self, __a0: java.awt.Color) -> None: ...

    def setAlpha(self, __a0: float) -> None: ...

    def setBackgroundColor(self, __a0: java.awt.Color) -> None: ...

    def setEmphasis(self, __a0: float) -> None: ...

    def setFocused(self, __a0: bool) -> None: ...

    def setFullScreenMode(self, __a0: bool) -> None: ...

    def setHovered(self, __a0: bool) -> None: ...

    def setLocation(self, __a0: java.awt.geom.Point2D) -> None: ...

    def setProgramHighlight(self, __a0: ghidra.program.util.ProgramSelection) -> None: ...

    def setProgramLocation(self, __a0: ghidra.program.util.ProgramLocation) -> None: ...

    def setProgramSelection(self, __a0: ghidra.program.util.ProgramSelection) -> None: ...

    def setSelected(self, __a0: bool) -> None: ...

    def setShowing(self, __a0: bool) -> None: ...

    def setVertexType(self, __a0: ghidra.app.plugin.core.functiongraph.graph.FGVertexType) -> None: ...

    def toString(self) -> unicode: ...

    def updateGroupAssociationStatus(self, __a0: ghidra.app.plugin.core.functiongraph.graph.vertex.GroupHistoryInfo) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeSettings(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FunctionGraphVertexAttributes) -> None: ...

    @property
    def preGroupLocations(self) -> java.util.Map: ...

    @property
    def ungroupedEdges(self) -> java.util.Set: ...

    @property
    def userText(self) -> unicode: ...

    @property
    def vertices(self) -> java.util.Set: ...
