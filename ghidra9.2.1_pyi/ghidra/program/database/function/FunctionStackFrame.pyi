from typing import List
import ghidra.program.model.data
import ghidra.program.model.listing
import ghidra.program.model.symbol
import java.lang


class FunctionStackFrame(object, ghidra.program.model.listing.StackFrame):








    def clearVariable(self, offset: int) -> None: ...

    def createVariable(self, name: unicode, offset: int, dataType: ghidra.program.model.data.DataType, source: ghidra.program.model.symbol.SourceType) -> ghidra.program.model.listing.Variable: ...

    def equals(self, obj: object) -> bool:
        """
        Returns whether some other stack frame is "equivalent to" this one.
         The stack frame is considered equal to another even if they are each
         part of a different function.
        """
        ...

    def getClass(self) -> java.lang.Class: ...

    def getFrameSize(self) -> int: ...

    def getFunction(self) -> ghidra.program.model.listing.Function: ...

    def getLocalSize(self) -> int: ...

    def getLocals(self) -> List[ghidra.program.model.listing.Variable]: ...

    def getParameterOffset(self) -> int: ...

    def getParameterSize(self) -> int: ...

    def getParameters(self) -> List[ghidra.program.model.listing.Parameter]: ...

    def getReturnAddressOffset(self) -> int: ...

    def getStackVariables(self) -> List[ghidra.program.model.listing.Variable]: ...

    def getVariableContaining(self, offset: int) -> ghidra.program.model.listing.Variable: ...

    def growsNegative(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isParameterOffset(self, offset: int) -> bool:
        """
        Returns true if specified offset could correspond to a parameter
        @param offset
        """
        ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setLocalSize(self, size: int) -> None: ...

    def setReturnAddressOffset(self, offset: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
