from typing import List
import ghidra.sleigh.grammar
import ghidra.sleigh.grammar.SleighParser
import ghidra.sleigh.grammar.SleighParser_DisplayParser
import ghidra.sleigh.grammar.SleighParser_SemanticParser
import java.lang
import org.antlr.runtime
import org.antlr.runtime.tree


class SleighParser(ghidra.sleigh.grammar.AbstractSleighParser):
    ALPHA: int = 4
    ALPHAUP: int = 5
    AMPERSAND: int = 6
    ASSIGN: int = 7
    ASTERISK: int = 8
    BINDIGIT: int = 9
    BIN_INT: int = 10
    BOOL_AND: int = 11
    BOOL_OR: int = 12
    BOOL_XOR: int = 13
    CARET: int = 14
    COLON: int = 15
    COMMA: int = 16
    CPPCOMMENT: int = 17
    DEC_INT: int = 18
    DIGIT: int = 19
    DISPCHAR: int = 20
    ELLIPSIS: int = 21
    EOF: int = -1
    EOL: int = 22
    EQUAL: int = 23
    ESCAPE: int = 24
    EXCLAIM: int = 25
    FDIV: int = 26
    FEQUAL: int = 27
    FGREAT: int = 28
    FGREATEQUAL: int = 29
    FLESS: int = 30
    FLESSEQUAL: int = 31
    FMINUS: int = 32
    FMULT: int = 33
    FNOTEQUAL: int = 34
    FOLLOW_AMPERSAND_in_pequation_and_op1983: org.antlr.runtime.BitSet = {1}
    FOLLOW_AMPERSAND_in_pexpression_and_op2345: org.antlr.runtime.BitSet = {1}
    FOLLOW_ASSIGN_in_aligndef235: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_ASSIGN_in_bitrange1011: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_ASSIGN_in_constraint_op2119: org.antlr.runtime.BitSet = {1}
    FOLLOW_ASSIGN_in_contextfielddef535: org.antlr.runtime.BitSet = {79}
    FOLLOW_ASSIGN_in_ctxassign1821: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_ASSIGN_in_endiandef114: org.antlr.runtime.BitSet = {43,56}
    FOLLOW_ASSIGN_in_fielddef370: org.antlr.runtime.BitSet = {79}
    FOLLOW_ASSIGN_in_sizemod864: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_ASSIGN_in_tokendef312: org.antlr.runtime.BitSet = {43,56}
    FOLLOW_ASSIGN_in_typemod827: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_ASSIGN_in_varnodedef920: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_ASSIGN_in_varnodedef930: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_ASSIGN_in_wordsizemod890: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_ASTERISK_in_pexpression2_mult_op2949: org.antlr.runtime.BitSet = {1}
    FOLLOW_ASTERISK_in_pexpression_mult_op2504: org.antlr.runtime.BitSet = {1}
    FOLLOW_BIN_INT_in_integer3825: org.antlr.runtime.BitSet = {1}
    FOLLOW_CARET_in_pexpression_xor_op2292: org.antlr.runtime.BitSet = {1}
    FOLLOW_COLON_in_withblock1509: org.antlr.runtime.BitSet = {21,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,79}
    FOLLOW_COMMA_in_bitrange1023: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_COMMA_in_contextfielddef543: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_COMMA_in_fielddef378: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_COMMA_in_oplist1487: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_COMMA_in_pexpression2_operands3081: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_COMMA_in_pexpression_operands2636: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_DEC_INT_in_integer3809: org.antlr.runtime.BitSet = {1}
    FOLLOW_ELLIPSIS_in_pequation_ellipsis2003: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79}
    FOLLOW_ELLIPSIS_in_pequation_ellipsis_right2041: org.antlr.runtime.BitSet = {1}
    FOLLOW_ELLIPSIS_in_synpred1_SleighParser2033: org.antlr.runtime.BitSet = {1}
    FOLLOW_EOF_in_spec97: org.antlr.runtime.BitSet = {1}
    FOLLOW_GREATEQUAL_in_constraint_op2189: org.antlr.runtime.BitSet = {1}
    FOLLOW_GREAT_in_constraint_op2175: org.antlr.runtime.BitSet = {1}
    FOLLOW_HEX_INT_in_integer3793: org.antlr.runtime.BitSet = {1}
    FOLLOW_IDENTIFIER_in_strict_id3770: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_ALIGNMENT_in_aligndef233: org.antlr.runtime.BitSet = {7}
    FOLLOW_KEY_ALIGNMENT_in_key_as_id3214: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_ATTACH_in_key_as_id3230: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_ATTACH_in_nameattach1124: org.antlr.runtime.BitSet = {59}
    FOLLOW_KEY_ATTACH_in_valueattach1090: org.antlr.runtime.BitSet = {70}
    FOLLOW_KEY_ATTACH_in_varattach1164: org.antlr.runtime.BitSet = {71}
    FOLLOW_KEY_BIG_in_endian140: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_BIG_in_key_as_id3247: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_BITRANGE_in_bitrangedef971: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_KEY_BITRANGE_in_key_as_id3265: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_BUILD_in_key_as_id3282: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_CALL_in_key_as_id3299: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_CONTEXT_in_contextdef709: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_KEY_CONTEXT_in_key_as_id3318: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_CROSSBUILD_in_key_as_id3335: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_DEC_in_contextfieldmod684: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_DEC_in_fieldmod489: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_DEC_in_key_as_id3351: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_DEFAULT_in_key_as_id3370: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_DEFAULT_in_spacemod807: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_DEFINE_in_aligndef231: org.antlr.runtime.BitSet = {41}
    FOLLOW_KEY_DEFINE_in_bitrangedef969: org.antlr.runtime.BitSet = {44}
    FOLLOW_KEY_DEFINE_in_contextdef705: org.antlr.runtime.BitSet = {47}
    FOLLOW_KEY_DEFINE_in_endiandef110: org.antlr.runtime.BitSet = {52}
    FOLLOW_KEY_DEFINE_in_key_as_id3387: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_DEFINE_in_pcodeopdef1061: org.antlr.runtime.BitSet = {62}
    FOLLOW_KEY_DEFINE_in_spacedef738: org.antlr.runtime.BitSet = {66}
    FOLLOW_KEY_DEFINE_in_tokendef259: org.antlr.runtime.BitSet = {67}
    FOLLOW_KEY_DEFINE_in_tokendef296: org.antlr.runtime.BitSet = {67}
    FOLLOW_KEY_DEFINE_in_varnodedef914: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_KEY_ENDIAN_in_endiandef112: org.antlr.runtime.BitSet = {7}
    FOLLOW_KEY_ENDIAN_in_key_as_id3404: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_ENDIAN_in_tokendef310: org.antlr.runtime.BitSet = {7}
    FOLLOW_KEY_EXPORT_in_key_as_id3421: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_GOTO_in_key_as_id3438: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_HEX_in_contextfieldmod667: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_HEX_in_fieldmod472: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_HEX_in_key_as_id3456: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_LITTLE_in_endian152: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_LITTLE_in_key_as_id3474: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_LOCAL_in_key_as_id3491: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_MACRO_in_key_as_id3508: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_MACRO_in_macrodef1416: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_KEY_NAMES_in_key_as_id3525: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_NAMES_in_nameattach1128: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,235}
    FOLLOW_KEY_NOFLOW_in_contextfieldmod650: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_NOFLOW_in_key_as_id3542: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_OFFSET_in_key_as_id3559: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_OFFSET_in_varnodedef918: org.antlr.runtime.BitSet = {7}
    FOLLOW_KEY_PCODEOP_in_key_as_id3576: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_PCODEOP_in_pcodeopdef1065: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,235}
    FOLLOW_KEY_RETURN_in_key_as_id3593: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_SIGNED_in_contextfieldmod633: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_SIGNED_in_fieldmod455: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_SIGNED_in_key_as_id3610: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_SIZE_in_key_as_id3627: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_SIZE_in_sizemod862: org.antlr.runtime.BitSet = {7}
    FOLLOW_KEY_SIZE_in_varnodedef926: org.antlr.runtime.BitSet = {7}
    FOLLOW_KEY_SPACE_in_key_as_id3645: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_SPACE_in_spacedef740: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_KEY_TOKEN_in_key_as_id3662: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_TOKEN_in_tokendef261: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_KEY_TOKEN_in_tokendef298: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_KEY_TYPE_in_key_as_id3679: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_TYPE_in_typemod825: org.antlr.runtime.BitSet = {7}
    FOLLOW_KEY_UNIMPL_in_ctorsemantic1672: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_UNIMPL_in_key_as_id3697: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_VALUES_in_key_as_id3714: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_VALUES_in_valueattach1094: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,235}
    FOLLOW_KEY_VARIABLES_in_key_as_id3731: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_VARIABLES_in_varattach1168: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,235}
    FOLLOW_KEY_WORDSIZE_in_key_as_id3747: org.antlr.runtime.BitSet = {1}
    FOLLOW_KEY_WORDSIZE_in_wordsizemod888: org.antlr.runtime.BitSet = {7}
    FOLLOW_LBRACE_in_withblock1515: org.antlr.runtime.BitSet = {15,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,214,218}
    FOLLOW_LBRACKET_in_bitrange1017: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_LBRACKET_in_contextblock1750: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,215}
    FOLLOW_LBRACKET_in_identifierlist1203: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,235}
    FOLLOW_LBRACKET_in_intblist1301: org.antlr.runtime.BitSet = {10,18,39,80,235}
    FOLLOW_LBRACKET_in_stringoridentlist1244: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,213,235}
    FOLLOW_LEFT_in_pexpression2_shift_op2843: org.antlr.runtime.BitSet = {1}
    FOLLOW_LEFT_in_pexpression_shift_op2398: org.antlr.runtime.BitSet = {1}
    FOLLOW_LESSEQUAL_in_constraint_op2161: org.antlr.runtime.BitSet = {1}
    FOLLOW_LESS_in_constraint_op2147: org.antlr.runtime.BitSet = {1}
    FOLLOW_LPAREN_in_contextfielddef537: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_LPAREN_in_fielddef372: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_LPAREN_in_macrodef1422: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,220}
    FOLLOW_LPAREN_in_pequation_atomic2074: org.antlr.runtime.BitSet = {21,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79}
    FOLLOW_LPAREN_in_pexpression2_operands3074: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,220,233}
    FOLLOW_LPAREN_in_pexpression2_term3115: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_LPAREN_in_pexpression_operands2629: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,220,233}
    FOLLOW_LPAREN_in_pexpression_term2670: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_LPAREN_in_tokendef265: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_LPAREN_in_tokendef302: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_MINUS_in_neginteger1371: org.antlr.runtime.BitSet = {10,18,39}
    FOLLOW_MINUS_in_pexpression2_add_op2910: org.antlr.runtime.BitSet = {1}
    FOLLOW_MINUS_in_pexpression2_unary_op3002: org.antlr.runtime.BitSet = {1}
    FOLLOW_MINUS_in_pexpression_add_op2465: org.antlr.runtime.BitSet = {1}
    FOLLOW_MINUS_in_pexpression_unary_op2557: org.antlr.runtime.BitSet = {1}
    FOLLOW_NOTEQUAL_in_constraint_op2133: org.antlr.runtime.BitSet = {1}
    FOLLOW_PIPE_in_pequation_or_op1901: org.antlr.runtime.BitSet = {1}
    FOLLOW_PIPE_in_pexpression_or_op2239: org.antlr.runtime.BitSet = {1}
    FOLLOW_PLUS_in_pexpression2_add_op2896: org.antlr.runtime.BitSet = {1}
    FOLLOW_PLUS_in_pexpression_add_op2451: org.antlr.runtime.BitSet = {1}
    FOLLOW_QSTRING_in_qstring3141: org.antlr.runtime.BitSet = {1}
    FOLLOW_RBRACE_in_withblock1519: org.antlr.runtime.BitSet = {1}
    FOLLOW_RBRACKET_in_bitrange1029: org.antlr.runtime.BitSet = {1}
    FOLLOW_RBRACKET_in_contextblock1754: org.antlr.runtime.BitSet = {1}
    FOLLOW_RBRACKET_in_identifierlist1208: org.antlr.runtime.BitSet = {1}
    FOLLOW_RBRACKET_in_intblist1306: org.antlr.runtime.BitSet = {1}
    FOLLOW_RBRACKET_in_stringoridentlist1249: org.antlr.runtime.BitSet = {1}
    FOLLOW_RES_WITH_in_withblock1505: org.antlr.runtime.BitSet = {15,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_RIGHT_in_pexpression2_shift_op2857: org.antlr.runtime.BitSet = {1}
    FOLLOW_RIGHT_in_pexpression_shift_op2412: org.antlr.runtime.BitSet = {1}
    FOLLOW_RPAREN_in_contextfielddef551: org.antlr.runtime.BitSet = {49,55,60,64}
    FOLLOW_RPAREN_in_fielddef386: org.antlr.runtime.BitSet = {49,55,64}
    FOLLOW_RPAREN_in_macrodef1427: org.antlr.runtime.BitSet = {73}
    FOLLOW_RPAREN_in_pequation_atomic2078: org.antlr.runtime.BitSet = {1}
    FOLLOW_RPAREN_in_pexpression2_operands3091: org.antlr.runtime.BitSet = {1}
    FOLLOW_RPAREN_in_pexpression2_term3119: org.antlr.runtime.BitSet = {1}
    FOLLOW_RPAREN_in_pexpression_operands2646: org.antlr.runtime.BitSet = {1}
    FOLLOW_RPAREN_in_pexpression_term2674: org.antlr.runtime.BitSet = {1}
    FOLLOW_RPAREN_in_tokendef271: org.antlr.runtime.BitSet = {40}
    FOLLOW_RPAREN_in_tokendef306: org.antlr.runtime.BitSet = {52}
    FOLLOW_SEMI_in_ctxstmt1797: org.antlr.runtime.BitSet = {1}
    FOLLOW_SEMI_in_ctxstmt1805: org.antlr.runtime.BitSet = {1}
    FOLLOW_SEMI_in_definition217: org.antlr.runtime.BitSet = {1}
    FOLLOW_SEMI_in_endiandef118: org.antlr.runtime.BitSet = {1}
    FOLLOW_SEMI_in_pequation_seq_op1942: org.antlr.runtime.BitSet = {1}
    FOLLOW_SLASH_in_pexpression2_mult_op2963: org.antlr.runtime.BitSet = {1}
    FOLLOW_SLASH_in_pexpression_mult_op2518: org.antlr.runtime.BitSet = {1}
    FOLLOW_SPEC_AND_in_pexpression2_and_op2804: org.antlr.runtime.BitSet = {1}
    FOLLOW_SPEC_AND_in_pexpression_and_op2359: org.antlr.runtime.BitSet = {1}
    FOLLOW_SPEC_OR_in_pexpression2_or_op2726: org.antlr.runtime.BitSet = {1}
    FOLLOW_SPEC_OR_in_pexpression_or_op2253: org.antlr.runtime.BitSet = {1}
    FOLLOW_SPEC_XOR_in_pexpression2_xor_op2765: org.antlr.runtime.BitSet = {1}
    FOLLOW_SPEC_XOR_in_pexpression_xor_op2306: org.antlr.runtime.BitSet = {1}
    FOLLOW_TILDE_in_pexpression2_unary_op3016: org.antlr.runtime.BitSet = {1}
    FOLLOW_TILDE_in_pexpression_unary_op2571: org.antlr.runtime.BitSet = {1}
    FOLLOW_UNDERSCORE_in_intbpart1348: org.antlr.runtime.BitSet = {1}
    FOLLOW_UNDERSCORE_in_wildcard3179: org.antlr.runtime.BitSet = {1}
    FOLLOW_aligndef_in_definition169: org.antlr.runtime.BitSet = {222}
    FOLLOW_arguments_in_macrodef1424: org.antlr.runtime.BitSet = {220}
    FOLLOW_bitpat_or_nil_in_withblock1511: org.antlr.runtime.BitSet = {73,74}
    FOLLOW_bitpattern_in_bitpat_or_nil1568: org.antlr.runtime.BitSet = {1}
    FOLLOW_bitpattern_in_constructor1628: org.antlr.runtime.BitSet = {69,73,74}
    FOLLOW_bitrange_in_bitranges993: org.antlr.runtime.BitSet = {1,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_bitrangedef_in_definition194: org.antlr.runtime.BitSet = {222}
    FOLLOW_bitranges_in_bitrangedef973: org.antlr.runtime.BitSet = {1}
    FOLLOW_constraint_in_pequation_atomic2067: org.antlr.runtime.BitSet = {1}
    FOLLOW_constraint_op_in_constraint2101: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_constructor_in_constructorlike1403: org.antlr.runtime.BitSet = {1}
    FOLLOW_constructorlike_in_def_or_conslike1593: org.antlr.runtime.BitSet = {1}
    FOLLOW_constructorlike_in_spec90: org.antlr.runtime.BitSet = {15,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,218}
    FOLLOW_constructorlikelist_in_withblock1517: org.antlr.runtime.BitSet = {214}
    FOLLOW_contextblock_in_constructor1630: org.antlr.runtime.BitSet = {69,73}
    FOLLOW_contextblock_in_withblock1513: org.antlr.runtime.BitSet = {73}
    FOLLOW_contextdef_in_definition179: org.antlr.runtime.BitSet = {222}
    FOLLOW_contextfielddef_in_contextfielddefs509: org.antlr.runtime.BitSet = {1,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_contextfielddefs_in_contextdef713: org.antlr.runtime.BitSet = {1}
    FOLLOW_contextfieldmod_in_contextfieldmods588: org.antlr.runtime.BitSet = {1,49,55,60,64}
    FOLLOW_contextfieldmods_in_contextfielddef553: org.antlr.runtime.BitSet = {1}
    FOLLOW_ctorsemantic_in_constructor1632: org.antlr.runtime.BitSet = {1}
    FOLLOW_ctorstart_in_constructor1626: org.antlr.runtime.BitSet = {21,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79}
    FOLLOW_ctxassign_in_ctxstmt1795: org.antlr.runtime.BitSet = {222}
    FOLLOW_ctxlval_in_ctxassign1817: org.antlr.runtime.BitSet = {7}
    FOLLOW_ctxstmt_in_ctxstmts1783: org.antlr.runtime.BitSet = {1,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_ctxstmts_in_contextblock1752: org.antlr.runtime.BitSet = {215}
    FOLLOW_def_or_conslike_in_constructorlikelist1604: org.antlr.runtime.BitSet = {1,15,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,218}
    FOLLOW_definition_in_def_or_conslike1588: org.antlr.runtime.BitSet = {1}
    FOLLOW_definition_in_spec84: org.antlr.runtime.BitSet = {15,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,218}
    FOLLOW_display_in_ctorstart1714: org.antlr.runtime.BitSet = {1}
    FOLLOW_display_in_ctorstart1729: org.antlr.runtime.BitSet = {1}
    FOLLOW_endian_in_endiandef116: org.antlr.runtime.BitSet = {222}
    FOLLOW_endian_in_tokendef314: org.antlr.runtime.BitSet = {40}
    FOLLOW_endiandef_in_spec78: org.antlr.runtime.BitSet = {15,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,218}
    FOLLOW_fielddef_in_fielddefs344: org.antlr.runtime.BitSet = {1,40}
    FOLLOW_fielddefs_in_tokendef273: org.antlr.runtime.BitSet = {1}
    FOLLOW_fielddefs_in_tokendef316: org.antlr.runtime.BitSet = {1}
    FOLLOW_fieldmod_in_fieldmods418: org.antlr.runtime.BitSet = {1,49,55,64}
    FOLLOW_fieldmods_in_fielddef388: org.antlr.runtime.BitSet = {1}
    FOLLOW_id_or_nil_in_withblock1507: org.antlr.runtime.BitSet = {15}
    FOLLOW_id_or_wild_in_identifierlist1205: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,215,235}
    FOLLOW_id_or_wild_in_identifierlist1223: org.antlr.runtime.BitSet = {1}
    FOLLOW_id_or_wild_in_stringorident1284: org.antlr.runtime.BitSet = {1}
    FOLLOW_identifier_in_bitrange1007: org.antlr.runtime.BitSet = {7}
    FOLLOW_identifier_in_bitrange1015: org.antlr.runtime.BitSet = {74}
    FOLLOW_identifier_in_constraint2098: org.antlr.runtime.BitSet = {1,7,36,37,76,77,81}
    FOLLOW_identifier_in_contextdef711: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72}
    FOLLOW_identifier_in_contextfielddef531: org.antlr.runtime.BitSet = {7}
    FOLLOW_identifier_in_ctorstart1712: org.antlr.runtime.BitSet = {15}
    FOLLOW_identifier_in_ctxlval1845: org.antlr.runtime.BitSet = {1}
    FOLLOW_identifier_in_id_or_nil1548: org.antlr.runtime.BitSet = {1}
    FOLLOW_identifier_in_id_or_wild3161: org.antlr.runtime.BitSet = {1}
    FOLLOW_identifier_in_macrodef1418: org.antlr.runtime.BitSet = {79}
    FOLLOW_identifier_in_oplist1484: org.antlr.runtime.BitSet = {1,16}
    FOLLOW_identifier_in_oplist1490: org.antlr.runtime.BitSet = {1,16}
    FOLLOW_identifier_in_pexpression2_apply3050: org.antlr.runtime.BitSet = {79}
    FOLLOW_identifier_in_pexpression2_term3103: org.antlr.runtime.BitSet = {1}
    FOLLOW_identifier_in_pexpression_apply2605: org.antlr.runtime.BitSet = {79}
    FOLLOW_identifier_in_pexpression_term2658: org.antlr.runtime.BitSet = {1}
    FOLLOW_identifier_in_spacedef742: org.antlr.runtime.BitSet = {50,65,68,72}
    FOLLOW_identifier_in_tokendef263: org.antlr.runtime.BitSet = {79}
    FOLLOW_identifier_in_tokendef300: org.antlr.runtime.BitSet = {79}
    FOLLOW_identifier_in_type849: org.antlr.runtime.BitSet = {1}
    FOLLOW_identifier_in_varnodedef916: org.antlr.runtime.BitSet = {61}
    FOLLOW_identifierlist_in_nameattach1132: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,213,235}
    FOLLOW_identifierlist_in_pcodeopdef1067: org.antlr.runtime.BitSet = {1}
    FOLLOW_identifierlist_in_valueattach1096: org.antlr.runtime.BitSet = {10,18,39,74,80}
    FOLLOW_identifierlist_in_varattach1172: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,235}
    FOLLOW_identifierlist_in_varattach1177: org.antlr.runtime.BitSet = {1}
    FOLLOW_identifierlist_in_varnodedef936: org.antlr.runtime.BitSet = {1}
    FOLLOW_intblist_in_valueattach1099: org.antlr.runtime.BitSet = {1}
    FOLLOW_intbpart_in_intblist1303: org.antlr.runtime.BitSet = {10,18,39,80,215,235}
    FOLLOW_integer_in_aligndef237: org.antlr.runtime.BitSet = {1}
    FOLLOW_integer_in_bitrange1021: org.antlr.runtime.BitSet = {16}
    FOLLOW_integer_in_bitrange1027: org.antlr.runtime.BitSet = {215}
    FOLLOW_integer_in_contextfielddef541: org.antlr.runtime.BitSet = {16}
    FOLLOW_integer_in_contextfielddef547: org.antlr.runtime.BitSet = {220}
    FOLLOW_integer_in_fielddef376: org.antlr.runtime.BitSet = {16}
    FOLLOW_integer_in_fielddef382: org.antlr.runtime.BitSet = {220}
    FOLLOW_integer_in_neginteger1364: org.antlr.runtime.BitSet = {1}
    FOLLOW_integer_in_neginteger1373: org.antlr.runtime.BitSet = {1}
    FOLLOW_integer_in_pexpression2_term3108: org.antlr.runtime.BitSet = {1}
    FOLLOW_integer_in_pexpression_term2663: org.antlr.runtime.BitSet = {1}
    FOLLOW_integer_in_sizemod866: org.antlr.runtime.BitSet = {1}
    FOLLOW_integer_in_tokendef267: org.antlr.runtime.BitSet = {220}
    FOLLOW_integer_in_tokendef304: org.antlr.runtime.BitSet = {220}
    FOLLOW_integer_in_varnodedef924: org.antlr.runtime.BitSet = {65}
    FOLLOW_integer_in_varnodedef934: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,235}
    FOLLOW_integer_in_wordsizemod892: org.antlr.runtime.BitSet = {1}
    FOLLOW_key_as_id_in_identifier3201: org.antlr.runtime.BitSet = {1}
    FOLLOW_macrodef_in_constructorlike1393: org.antlr.runtime.BitSet = {1}
    FOLLOW_nameattach_in_definition209: org.antlr.runtime.BitSet = {222}
    FOLLOW_neginteger_in_intblist1321: org.antlr.runtime.BitSet = {1}
    FOLLOW_neginteger_in_intbpart1341: org.antlr.runtime.BitSet = {1}
    FOLLOW_oplist_in_arguments1454: org.antlr.runtime.BitSet = {1}
    FOLLOW_pcodeopdef_in_definition199: org.antlr.runtime.BitSet = {222}
    FOLLOW_pequation_and_in_pequation_seq1919: org.antlr.runtime.BitSet = {1,222}
    FOLLOW_pequation_and_in_pequation_seq1926: org.antlr.runtime.BitSet = {1,222}
    FOLLOW_pequation_and_op_in_pequation_and1964: org.antlr.runtime.BitSet = {21,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79}
    FOLLOW_pequation_atomic_in_pequation_ellipsis_right2037: org.antlr.runtime.BitSet = {21}
    FOLLOW_pequation_atomic_in_pequation_ellipsis_right2055: org.antlr.runtime.BitSet = {1}
    FOLLOW_pequation_atomic_in_synpred1_SleighParser2031: org.antlr.runtime.BitSet = {21}
    FOLLOW_pequation_ellipsis_in_pequation_and1960: org.antlr.runtime.BitSet = {1,6}
    FOLLOW_pequation_ellipsis_in_pequation_and1967: org.antlr.runtime.BitSet = {1,6}
    FOLLOW_pequation_ellipsis_right_in_pequation_ellipsis2005: org.antlr.runtime.BitSet = {1}
    FOLLOW_pequation_ellipsis_right_in_pequation_ellipsis2019: org.antlr.runtime.BitSet = {1}
    FOLLOW_pequation_in_bitpattern1693: org.antlr.runtime.BitSet = {1}
    FOLLOW_pequation_in_pequation_atomic2076: org.antlr.runtime.BitSet = {220}
    FOLLOW_pequation_or_in_pequation1867: org.antlr.runtime.BitSet = {1}
    FOLLOW_pequation_or_op_in_pequation_or1882: org.antlr.runtime.BitSet = {21,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79}
    FOLLOW_pequation_seq_in_pequation_or1878: org.antlr.runtime.BitSet = {1,209}
    FOLLOW_pequation_seq_in_pequation_or1885: org.antlr.runtime.BitSet = {1,209}
    FOLLOW_pequation_seq_op_in_pequation_seq1923: org.antlr.runtime.BitSet = {21,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79}
    FOLLOW_pexpression2_add_in_pexpression2_shift2822: org.antlr.runtime.BitSet = {1,75,219}
    FOLLOW_pexpression2_add_in_pexpression2_shift2828: org.antlr.runtime.BitSet = {1,75,219}
    FOLLOW_pexpression2_add_op_in_pexpression2_add2878: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_pexpression2_and_in_pexpression2_xor2744: org.antlr.runtime.BitSet = {1,230}
    FOLLOW_pexpression2_and_in_pexpression2_xor2750: org.antlr.runtime.BitSet = {1,230}
    FOLLOW_pexpression2_and_op_in_pexpression2_and2786: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_pexpression2_apply_in_pexpression2_func3034: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression2_func_in_pexpression2_unary2989: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression2_in_constraint2104: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression2_in_pexpression2_operands3078: org.antlr.runtime.BitSet = {16,220}
    FOLLOW_pexpression2_in_pexpression2_operands3084: org.antlr.runtime.BitSet = {16,220}
    FOLLOW_pexpression2_in_pexpression2_term3117: org.antlr.runtime.BitSet = {220}
    FOLLOW_pexpression2_mult_in_pexpression2_add2875: org.antlr.runtime.BitSet = {1,80,210}
    FOLLOW_pexpression2_mult_in_pexpression2_add2881: org.antlr.runtime.BitSet = {1,80,210}
    FOLLOW_pexpression2_mult_op_in_pexpression2_mult2931: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_pexpression2_operands_in_pexpression2_apply3052: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression2_or_in_pexpression22694: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression2_or_op_in_pexpression2_or2708: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_pexpression2_shift_in_pexpression2_and2783: org.antlr.runtime.BitSet = {1,228}
    FOLLOW_pexpression2_shift_in_pexpression2_and2789: org.antlr.runtime.BitSet = {1,228}
    FOLLOW_pexpression2_shift_op_in_pexpression2_shift2825: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_pexpression2_term_in_pexpression2_func3039: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression2_term_in_pexpression2_unary2984: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression2_unary_in_pexpression2_mult2928: org.antlr.runtime.BitSet = {1,8,225}
    FOLLOW_pexpression2_unary_in_pexpression2_mult2934: org.antlr.runtime.BitSet = {1,8,225}
    FOLLOW_pexpression2_unary_op_in_pexpression2_unary2981: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79}
    FOLLOW_pexpression2_xor_in_pexpression2_or2705: org.antlr.runtime.BitSet = {1,229}
    FOLLOW_pexpression2_xor_in_pexpression2_or2711: org.antlr.runtime.BitSet = {1,229}
    FOLLOW_pexpression2_xor_op_in_pexpression2_xor2747: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_pexpression_add_in_pexpression_shift2377: org.antlr.runtime.BitSet = {1,75,219}
    FOLLOW_pexpression_add_in_pexpression_shift2383: org.antlr.runtime.BitSet = {1,75,219}
    FOLLOW_pexpression_add_op_in_pexpression_add2433: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_pexpression_and_in_pexpression_xor2271: org.antlr.runtime.BitSet = {1,14,230}
    FOLLOW_pexpression_and_in_pexpression_xor2277: org.antlr.runtime.BitSet = {1,14,230}
    FOLLOW_pexpression_and_op_in_pexpression_and2327: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_pexpression_apply_in_pexpression_func2589: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression_apply_in_pfuncall1856: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression_func_in_pexpression_unary2544: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression_in_ctxassign1823: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression_in_pexpression_operands2633: org.antlr.runtime.BitSet = {16,220}
    FOLLOW_pexpression_in_pexpression_operands2639: org.antlr.runtime.BitSet = {16,220}
    FOLLOW_pexpression_in_pexpression_term2672: org.antlr.runtime.BitSet = {220}
    FOLLOW_pexpression_mult_in_pexpression_add2430: org.antlr.runtime.BitSet = {1,80,210}
    FOLLOW_pexpression_mult_in_pexpression_add2436: org.antlr.runtime.BitSet = {1,80,210}
    FOLLOW_pexpression_mult_op_in_pexpression_mult2486: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_pexpression_operands_in_pexpression_apply2607: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression_or_in_pexpression2207: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression_or_op_in_pexpression_or2221: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_pexpression_shift_in_pexpression_and2324: org.antlr.runtime.BitSet = {1,6,228}
    FOLLOW_pexpression_shift_in_pexpression_and2330: org.antlr.runtime.BitSet = {1,6,228}
    FOLLOW_pexpression_shift_op_in_pexpression_shift2380: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_pexpression_term_in_pexpression_func2594: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression_term_in_pexpression_unary2539: org.antlr.runtime.BitSet = {1}
    FOLLOW_pexpression_unary_in_pexpression_mult2483: org.antlr.runtime.BitSet = {1,8,225}
    FOLLOW_pexpression_unary_in_pexpression_mult2489: org.antlr.runtime.BitSet = {1,8,225}
    FOLLOW_pexpression_unary_op_in_pexpression_unary2536: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79}
    FOLLOW_pexpression_xor_in_pexpression_or2218: org.antlr.runtime.BitSet = {1,209,229}
    FOLLOW_pexpression_xor_in_pexpression_or2224: org.antlr.runtime.BitSet = {1,209,229}
    FOLLOW_pexpression_xor_op_in_pexpression_xor2274: org.antlr.runtime.BitSet = {10,18,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,233}
    FOLLOW_pfuncall_in_ctxstmt1803: org.antlr.runtime.BitSet = {222}
    FOLLOW_qstring_in_stringorident1289: org.antlr.runtime.BitSet = {1}
    FOLLOW_semanticbody_in_ctorsemantic1657: org.antlr.runtime.BitSet = {1}
    FOLLOW_semanticbody_in_macrodef1429: org.antlr.runtime.BitSet = {1}
    FOLLOW_sizemod_in_spacemod795: org.antlr.runtime.BitSet = {1}
    FOLLOW_spacedef_in_definition184: org.antlr.runtime.BitSet = {222}
    FOLLOW_spacemod_in_spacemods768: org.antlr.runtime.BitSet = {1,50,65,68,72}
    FOLLOW_spacemods_in_spacedef744: org.antlr.runtime.BitSet = {1}
    FOLLOW_strict_id_in_fielddef366: org.antlr.runtime.BitSet = {7}
    FOLLOW_strict_id_in_identifier3196: org.antlr.runtime.BitSet = {1}
    FOLLOW_stringorident_in_stringoridentlist1246: org.antlr.runtime.BitSet = {40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,213,215,235}
    FOLLOW_stringorident_in_stringoridentlist1264: org.antlr.runtime.BitSet = {1}
    FOLLOW_stringoridentlist_in_nameattach1137: org.antlr.runtime.BitSet = {1}
    FOLLOW_tokendef_in_definition174: org.antlr.runtime.BitSet = {222}
    FOLLOW_type_in_typemod829: org.antlr.runtime.BitSet = {1}
    FOLLOW_typemod_in_spacemod790: org.antlr.runtime.BitSet = {1}
    FOLLOW_valueattach_in_definition204: org.antlr.runtime.BitSet = {222}
    FOLLOW_varattach_in_definition214: org.antlr.runtime.BitSet = {222}
    FOLLOW_varnodedef_in_definition189: org.antlr.runtime.BitSet = {222}
    FOLLOW_wildcard_in_id_or_wild3166: org.antlr.runtime.BitSet = {1}
    FOLLOW_withblock_in_constructorlike1398: org.antlr.runtime.BitSet = {1}
    FOLLOW_wordsizemod_in_spacemod800: org.antlr.runtime.BitSet = {1}
    FPLUS: int = 35
    GREAT: int = 36
    GREATEQUAL: int = 37
    HEXDIGIT: int = 38
    HEX_INT: int = 39
    IDENTIFIER: int = 40
    KEY_ALIGNMENT: int = 41
    KEY_ATTACH: int = 42
    KEY_BIG: int = 43
    KEY_BITRANGE: int = 44
    KEY_BUILD: int = 45
    KEY_CALL: int = 46
    KEY_CONTEXT: int = 47
    KEY_CROSSBUILD: int = 48
    KEY_DEC: int = 49
    KEY_DEFAULT: int = 50
    KEY_DEFINE: int = 51
    KEY_ENDIAN: int = 52
    KEY_EXPORT: int = 53
    KEY_GOTO: int = 54
    KEY_HEX: int = 55
    KEY_LITTLE: int = 56
    KEY_LOCAL: int = 57
    KEY_MACRO: int = 58
    KEY_NAMES: int = 59
    KEY_NOFLOW: int = 60
    KEY_OFFSET: int = 61
    KEY_PCODEOP: int = 62
    KEY_RETURN: int = 63
    KEY_SIGNED: int = 64
    KEY_SIZE: int = 65
    KEY_SPACE: int = 66
    KEY_TOKEN: int = 67
    KEY_TYPE: int = 68
    KEY_UNIMPL: int = 69
    KEY_VALUES: int = 70
    KEY_VARIABLES: int = 71
    KEY_WORDSIZE: int = 72
    LBRACE: int = 73
    LBRACKET: int = 74
    LEFT: int = 75
    LESS: int = 76
    LESSEQUAL: int = 77
    LINECOMMENT: int = 78
    LPAREN: int = 79
    MINUS: int = 80
    NOTEQUAL: int = 81
    OCTAL_ESCAPE: int = 82
    OP_ADD: int = 83
    OP_ADDRESS_OF: int = 84
    OP_ALIGNMENT: int = 85
    OP_AND: int = 86
    OP_APPLY: int = 87
    OP_ARGUMENTS: int = 88
    OP_ASSIGN: int = 89
    OP_BIG: int = 90
    OP_BIN_CONSTANT: int = 91
    OP_BITRANGE: int = 92
    OP_BITRANGE2: int = 93
    OP_BITRANGES: int = 94
    OP_BIT_PATTERN: int = 95
    OP_BOOL_AND: int = 96
    OP_BOOL_OR: int = 97
    OP_BOOL_XOR: int = 98
    OP_BUILD: int = 99
    OP_CALL: int = 100
    OP_CONCATENATE: int = 101
    OP_CONSTRUCTOR: int = 102
    OP_CONTEXT: int = 103
    OP_CONTEXT_BLOCK: int = 104
    OP_CROSSBUILD: int = 105
    OP_CTLIST: int = 106
    OP_DEC: int = 107
    OP_DECLARATIVE_SIZE: int = 108
    OP_DEC_CONSTANT: int = 109
    OP_DEFAULT: int = 110
    OP_DEREFERENCE: int = 111
    OP_DISPLAY: int = 112
    OP_DIV: int = 113
    OP_ELLIPSIS: int = 114
    OP_ELLIPSIS_RIGHT: int = 115
    OP_EMPTY_LIST: int = 116
    OP_ENDIAN: int = 117
    OP_EQUAL: int = 118
    OP_EXPORT: int = 119
    OP_FADD: int = 120
    OP_FDIV: int = 121
    OP_FEQUAL: int = 122
    OP_FGREAT: int = 123
    OP_FGREATEQUAL: int = 124
    OP_FIELDDEF: int = 125
    OP_FIELDDEFS: int = 126
    OP_FIELD_MODS: int = 127
    OP_FLESS: int = 128
    OP_FLESSEQUAL: int = 129
    OP_FMULT: int = 130
    OP_FNEGATE: int = 131
    OP_FNOTEQUAL: int = 132
    OP_FSUB: int = 133
    OP_GOTO: int = 134
    OP_GREAT: int = 135
    OP_GREATEQUAL: int = 136
    OP_HEX: int = 137
    OP_HEX_CONSTANT: int = 138
    OP_IDENTIFIER: int = 139
    OP_IDENTIFIER_LIST: int = 140
    OP_IF: int = 141
    OP_INTBLIST: int = 142
    OP_INVERT: int = 143
    OP_JUMPDEST_ABSOLUTE: int = 144
    OP_JUMPDEST_DYNAMIC: int = 145
    OP_JUMPDEST_LABEL: int = 146
    OP_JUMPDEST_RELATIVE: int = 147
    OP_JUMPDEST_SYMBOL: int = 148
    OP_LABEL: int = 149
    OP_LEFT: int = 150
    OP_LESS: int = 151
    OP_LESSEQUAL: int = 152
    OP_LITTLE: int = 153
    OP_LOCAL: int = 154
    OP_MACRO: int = 155
    OP_MULT: int = 156
    OP_NAMES: int = 157
    OP_NEGATE: int = 158
    OP_NIL: int = 159
    OP_NOFLOW: int = 160
    OP_NOP: int = 161
    OP_NOT: int = 162
    OP_NOTEQUAL: int = 163
    OP_NOT_DEFAULT: int = 164
    OP_NO_CONTEXT_BLOCK: int = 165
    OP_NO_FIELD_MOD: int = 166
    OP_OR: int = 167
    OP_PARENTHESIZED: int = 168
    OP_PCODE: int = 169
    OP_PCODEOP: int = 170
    OP_QSTRING: int = 171
    OP_REM: int = 172
    OP_RETURN: int = 173
    OP_RIGHT: int = 174
    OP_SDIV: int = 175
    OP_SECTION_LABEL: int = 176
    OP_SEMANTIC: int = 177
    OP_SEQUENCE: int = 178
    OP_SGREAT: int = 179
    OP_SGREATEQUAL: int = 180
    OP_SIGNED: int = 181
    OP_SIZE: int = 182
    OP_SIZING_SIZE: int = 183
    OP_SLESS: int = 184
    OP_SLESSEQUAL: int = 185
    OP_SPACE: int = 186
    OP_SPACEMODS: int = 187
    OP_SREM: int = 188
    OP_SRIGHT: int = 189
    OP_STRING: int = 190
    OP_STRING_OR_IDENT_LIST: int = 191
    OP_SUB: int = 192
    OP_SUBTABLE: int = 193
    OP_TABLE: int = 194
    OP_TOKEN: int = 195
    OP_TOKEN_ENDIAN: int = 196
    OP_TRUNCATION_SIZE: int = 197
    OP_TYPE: int = 198
    OP_UNIMPL: int = 199
    OP_VALUES: int = 200
    OP_VARIABLES: int = 201
    OP_VARNODE: int = 202
    OP_WHITESPACE: int = 203
    OP_WILDCARD: int = 204
    OP_WITH: int = 205
    OP_WORDSIZE: int = 206
    OP_XOR: int = 207
    PERCENT: int = 208
    PIPE: int = 209
    PLUS: int = 210
    PP_ESCAPE: int = 211
    PP_POSITION: int = 212
    QSTRING: int = 213
    RBRACE: int = 214
    RBRACKET: int = 215
    RES_IF: int = 216
    RES_IS: int = 217
    RES_WITH: int = 218
    RIGHT: int = 219
    RPAREN: int = 220
    SDIV: int = 221
    SEMI: int = 222
    SGREAT: int = 223
    SGREATEQUAL: int = 224
    SLASH: int = 225
    SLESS: int = 226
    SLESSEQUAL: int = 227
    SPEC_AND: int = 228
    SPEC_OR: int = 229
    SPEC_XOR: int = 230
    SREM: int = 231
    SRIGHT: int = 232
    TILDE: int = 233
    Tokens: int = 234
    UNDERSCORE: int = 235
    UNICODE_ESCAPE: int = 236
    UNKNOWN: int = 237
    WS: int = 238
    gDisplayParser: ghidra.sleigh.grammar.SleighParser_DisplayParser
    gSemanticParser: ghidra.sleigh.grammar.SleighParser_SemanticParser
    input: org.antlr.runtime.TokenStream




    class pequation_seq_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class strict_id_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class stringorident_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class identifierlist_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_mult_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_shift_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class ctxlval_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class constraint_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class valueattach_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class typemod_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_unary_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class integer_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class contextfielddef_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_shift_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class bitpattern_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class ctorstart_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class wildcard_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_apply_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_or_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pcodeopdef_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class wordsizemod_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class arguments_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class ctxstmt_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class fielddefs_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class spacemods_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_xor_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_unary_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class ctxstmts_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_add_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class withblock_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class stringoridentlist_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_and_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_or_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class sizemod_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class bitrange_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class varnodedef_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_or_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_xor_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_and_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class endiandef_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_unary_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class bitranges_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class neginteger_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class identifier_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_add_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_unary_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class qstring_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class macrodef_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pequation_and_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class fieldmod_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_apply_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class ctxassign_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class fielddef_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class constructor_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_and_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class type_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class id_or_wild_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pequation_atomic_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class contextfieldmods_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_add_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class constraint_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pequation_ellipsis_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_add_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_mult_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class contextfielddefs_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_operands_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class nameattach_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_func_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_mult_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_operands_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_func_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class key_as_id_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class intbpart_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_shift_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_and_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class def_or_conslike_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pequation_and_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_or_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_xor_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class intblist_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pequation_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class constructorlikelist_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class spec_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression2_term_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class varattach_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pequation_ellipsis_right_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pequation_or_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_term_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class contextfieldmod_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class ctorsemantic_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pequation_or_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class id_or_nil_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class aligndef_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class spacemod_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_mult_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class fieldmods_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class bitrangedef_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class tokendef_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class oplist_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_shift_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_xor_op_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class constructorlike_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pexpression_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class spacedef_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class bitpat_or_nil_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class contextblock_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pequation_seq_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class pfuncall_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class endian_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class contextdef_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...




    class definition_return(org.antlr.runtime.ParserRuleReturnScope):
        start: org.antlr.runtime.Token
        stop: org.antlr.runtime.Token



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStart(self) -> object: ...

        def getStop(self) -> object: ...

        def getTemplate(self) -> object: ...

        def getTree(self) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def tree(self) -> org.antlr.runtime.tree.CommonTree: ...

    @overload
    def __init__(self, input: org.antlr.runtime.TokenStream): ...

    @overload
    def __init__(self, input: org.antlr.runtime.TokenStream, state: org.antlr.runtime.RecognizerSharedState): ...



    def add_op(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.add_op_return: ...

    def aligndef(self) -> ghidra.sleigh.grammar.SleighParser.aligndef_return: ...

    def alreadyParsedRule(self, __a0: org.antlr.runtime.IntStream, __a1: int) -> bool: ...

    def arguments(self, lc: org.antlr.runtime.Token) -> ghidra.sleigh.grammar.SleighParser.arguments_return: ...

    def assignment(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.assignment_return: ...

    def beginResync(self) -> None: ...

    def bitpat_or_nil(self) -> ghidra.sleigh.grammar.SleighParser.bitpat_or_nil_return: ...

    def bitpattern(self) -> ghidra.sleigh.grammar.SleighParser.bitpattern_return: ...

    def bitrange(self) -> ghidra.sleigh.grammar.SleighParser.bitrange_return: ...

    def bitrangedef(self) -> ghidra.sleigh.grammar.SleighParser.bitrangedef_return: ...

    def bitranges(self) -> ghidra.sleigh.grammar.SleighParser.bitranges_return: ...

    def booland_op(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.booland_op_return: ...

    def build_stmt(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.build_stmt_return: ...

    def call_stmt(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.call_stmt_return: ...

    def code_block(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.code_block_return: ...

    def compare_op(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.compare_op_return: ...

    def concatenate(self) -> ghidra.sleigh.grammar.SleighParser_DisplayParser.concatenate_return: ...

    def cond_stmt(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.cond_stmt_return: ...

    def constant(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.constant_return: ...

    def constraint(self) -> ghidra.sleigh.grammar.SleighParser.constraint_return: ...

    def constraint_op(self) -> ghidra.sleigh.grammar.SleighParser.constraint_op_return: ...

    def constructor(self) -> ghidra.sleigh.grammar.SleighParser.constructor_return: ...

    def constructorlike(self) -> ghidra.sleigh.grammar.SleighParser.constructorlike_return: ...

    def constructorlikelist(self) -> ghidra.sleigh.grammar.SleighParser.constructorlikelist_return: ...

    @overload
    def consumeUntil(self, __a0: org.antlr.runtime.IntStream, __a1: int) -> None: ...

    @overload
    def consumeUntil(self, __a0: org.antlr.runtime.IntStream, __a1: org.antlr.runtime.BitSet) -> None: ...

    def contextblock(self) -> ghidra.sleigh.grammar.SleighParser.contextblock_return: ...

    def contextdef(self) -> ghidra.sleigh.grammar.SleighParser.contextdef_return: ...

    def contextfielddef(self) -> ghidra.sleigh.grammar.SleighParser.contextfielddef_return: ...

    def contextfielddefs(self, lc: org.antlr.runtime.Token) -> ghidra.sleigh.grammar.SleighParser.contextfielddefs_return: ...

    def contextfieldmod(self) -> ghidra.sleigh.grammar.SleighParser.contextfieldmod_return: ...

    def contextfieldmods(self, it: org.antlr.runtime.Token) -> ghidra.sleigh.grammar.SleighParser.contextfieldmods_return: ...

    def crossbuild_stmt(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.crossbuild_stmt_return: ...

    def ctorsemantic(self) -> ghidra.sleigh.grammar.SleighParser.ctorsemantic_return: ...

    def ctorstart(self) -> ghidra.sleigh.grammar.SleighParser.ctorstart_return: ...

    def ctxassign(self) -> ghidra.sleigh.grammar.SleighParser.ctxassign_return: ...

    def ctxlval(self) -> ghidra.sleigh.grammar.SleighParser.ctxlval_return: ...

    def ctxstmt(self) -> ghidra.sleigh.grammar.SleighParser.ctxstmt_return: ...

    def ctxstmts(self) -> ghidra.sleigh.grammar.SleighParser.ctxstmts_return: ...

    def declaration(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.declaration_return: ...

    def def_or_conslike(self) -> ghidra.sleigh.grammar.SleighParser.def_or_conslike_return: ...

    def definition(self) -> ghidra.sleigh.grammar.SleighParser.definition_return: ...

    def display(self) -> ghidra.sleigh.grammar.SleighParser_DisplayParser.display_return: ...

    def displayRecognitionError(self, __a0: List[unicode], __a1: org.antlr.runtime.RecognitionException) -> None: ...

    def emitErrorMessage(self, msg: unicode) -> None: ...

    def endResync(self) -> None: ...

    def endian(self) -> ghidra.sleigh.grammar.SleighParser.endian_return: ...

    def endiandef(self) -> ghidra.sleigh.grammar.SleighParser.endiandef_return: ...

    def eq_op(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.eq_op_return: ...

    def equals(self, __a0: object) -> bool: ...

    def export(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.export_return: ...

    def expr(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_return: ...

    def expr_add(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_add_return: ...

    def expr_and(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_and_return: ...

    def expr_and_op(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_and_op_return: ...

    def expr_apply(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_apply_return: ...

    def expr_booland(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_booland_return: ...

    def expr_boolor(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_boolor_return: ...

    def expr_boolor_op(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_boolor_op_return: ...

    def expr_comp(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_comp_return: ...

    def expr_eq(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_eq_return: ...

    def expr_func(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_func_return: ...

    def expr_mult(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_mult_return: ...

    def expr_operands(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_operands_return: ...

    def expr_or(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_or_return: ...

    def expr_or_op(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_or_op_return: ...

    def expr_shift(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_shift_return: ...

    def expr_term(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_term_return: ...

    def expr_unary(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_unary_return: ...

    def expr_xor(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_xor_return: ...

    def expr_xor_op(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_xor_op_return: ...

    def failed(self) -> bool: ...

    def fielddef(self) -> ghidra.sleigh.grammar.SleighParser.fielddef_return: ...

    def fielddefs(self, lc: org.antlr.runtime.Token) -> ghidra.sleigh.grammar.SleighParser.fielddefs_return: ...

    def fieldmod(self) -> ghidra.sleigh.grammar.SleighParser.fieldmod_return: ...

    def fieldmods(self, it: org.antlr.runtime.Token) -> ghidra.sleigh.grammar.SleighParser.fieldmods_return: ...

    def funcall(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.funcall_return: ...

    def getBacktrackingLevel(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getDelegates(self) -> List[ghidra.sleigh.grammar.AbstractSleighParser]: ...

    def getErrorHeader(self, e: org.antlr.runtime.RecognitionException) -> unicode: ...

    def getErrorMessage(self, e: org.antlr.runtime.RecognitionException, tokenNames: List[unicode]) -> unicode: ...

    def getGrammarFileName(self) -> unicode: ...

    def getNumberOfSyntaxErrors(self) -> int: ...

    @overload
    def getRuleInvocationStack(self) -> List[object]: ...

    @overload
    @staticmethod
    def getRuleInvocationStack(__a0: java.lang.Throwable, __a1: unicode) -> List[object]: ...

    def getRuleMemoization(self, __a0: int, __a1: int) -> int: ...

    def getRuleMemoizationCacheSize(self) -> int: ...

    def getSourceName(self) -> unicode: ...

    def getTokenErrorDisplay(self, t: org.antlr.runtime.Token) -> unicode: ...

    def getTokenNames(self) -> List[unicode]: ...

    def getTokenStream(self) -> org.antlr.runtime.TokenStream: ...

    def getTreeAdaptor(self) -> org.antlr.runtime.tree.TreeAdaptor: ...

    def goto_stmt(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.goto_stmt_return: ...

    def hashCode(self) -> int: ...

    def id_or_nil(self) -> ghidra.sleigh.grammar.SleighParser.id_or_nil_return: ...

    def id_or_wild(self) -> ghidra.sleigh.grammar.SleighParser.id_or_wild_return: ...

    def identifier(self) -> ghidra.sleigh.grammar.SleighParser.identifier_return: ...

    def identifierlist(self, lc: org.antlr.runtime.Token) -> ghidra.sleigh.grammar.SleighParser.identifierlist_return: ...

    def intblist(self, lc: org.antlr.runtime.Token) -> ghidra.sleigh.grammar.SleighParser.intblist_return: ...

    def intbpart(self) -> ghidra.sleigh.grammar.SleighParser.intbpart_return: ...

    def integer(self) -> ghidra.sleigh.grammar.SleighParser.integer_return: ...

    def jumpdest(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.jumpdest_return: ...

    def key_as_id(self) -> ghidra.sleigh.grammar.SleighParser.key_as_id_return: ...

    def label(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.label_return: ...

    def lvalue(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.lvalue_return: ...

    def macrodef(self) -> ghidra.sleigh.grammar.SleighParser.macrodef_return: ...

    def match(self, __a0: org.antlr.runtime.IntStream, __a1: int, __a2: org.antlr.runtime.BitSet) -> object: ...

    def matchAny(self, __a0: org.antlr.runtime.IntStream) -> None: ...

    def memoize(self, __a0: org.antlr.runtime.IntStream, __a1: int, __a2: int) -> None: ...

    def mismatchIsMissingToken(self, __a0: org.antlr.runtime.IntStream, __a1: org.antlr.runtime.BitSet) -> bool: ...

    def mismatchIsUnwantedToken(self, __a0: org.antlr.runtime.IntStream, __a1: int) -> bool: ...

    def mult_op(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.mult_op_return: ...

    def nameattach(self) -> ghidra.sleigh.grammar.SleighParser.nameattach_return: ...

    def neginteger(self) -> ghidra.sleigh.grammar.SleighParser.neginteger_return: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def oplist(self) -> ghidra.sleigh.grammar.SleighParser.oplist_return: ...

    def outererror(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.outererror_return: ...

    def pcodeopdef(self) -> ghidra.sleigh.grammar.SleighParser.pcodeopdef_return: ...

    def pequation(self) -> ghidra.sleigh.grammar.SleighParser.pequation_return: ...

    def pequation_and(self) -> ghidra.sleigh.grammar.SleighParser.pequation_and_return: ...

    def pequation_and_op(self) -> ghidra.sleigh.grammar.SleighParser.pequation_and_op_return: ...

    def pequation_atomic(self) -> ghidra.sleigh.grammar.SleighParser.pequation_atomic_return: ...

    def pequation_ellipsis(self) -> ghidra.sleigh.grammar.SleighParser.pequation_ellipsis_return: ...

    def pequation_ellipsis_right(self) -> ghidra.sleigh.grammar.SleighParser.pequation_ellipsis_right_return: ...

    def pequation_or(self) -> ghidra.sleigh.grammar.SleighParser.pequation_or_return: ...

    def pequation_or_op(self) -> ghidra.sleigh.grammar.SleighParser.pequation_or_op_return: ...

    def pequation_seq(self) -> ghidra.sleigh.grammar.SleighParser.pequation_seq_return: ...

    def pequation_seq_op(self) -> ghidra.sleigh.grammar.SleighParser.pequation_seq_op_return: ...

    def pexpression(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_return: ...

    def pexpression2(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_return: ...

    def pexpression2_add(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_add_return: ...

    def pexpression2_add_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_add_op_return: ...

    def pexpression2_and(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_and_return: ...

    def pexpression2_and_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_and_op_return: ...

    def pexpression2_apply(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_apply_return: ...

    def pexpression2_func(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_func_return: ...

    def pexpression2_mult(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_mult_return: ...

    def pexpression2_mult_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_mult_op_return: ...

    def pexpression2_operands(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_operands_return: ...

    def pexpression2_or(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_or_return: ...

    def pexpression2_or_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_or_op_return: ...

    def pexpression2_shift(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_shift_return: ...

    def pexpression2_shift_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_shift_op_return: ...

    def pexpression2_term(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_term_return: ...

    def pexpression2_unary(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_unary_return: ...

    def pexpression2_unary_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_unary_op_return: ...

    def pexpression2_xor(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_xor_return: ...

    def pexpression2_xor_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression2_xor_op_return: ...

    def pexpression_add(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_add_return: ...

    def pexpression_add_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_add_op_return: ...

    def pexpression_and(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_and_return: ...

    def pexpression_and_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_and_op_return: ...

    def pexpression_apply(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_apply_return: ...

    def pexpression_func(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_func_return: ...

    def pexpression_mult(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_mult_return: ...

    def pexpression_mult_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_mult_op_return: ...

    def pexpression_operands(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_operands_return: ...

    def pexpression_or(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_or_return: ...

    def pexpression_or_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_or_op_return: ...

    def pexpression_shift(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_shift_return: ...

    def pexpression_shift_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_shift_op_return: ...

    def pexpression_term(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_term_return: ...

    def pexpression_unary(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_unary_return: ...

    def pexpression_unary_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_unary_op_return: ...

    def pexpression_xor(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_xor_return: ...

    def pexpression_xor_op(self) -> ghidra.sleigh.grammar.SleighParser.pexpression_xor_op_return: ...

    def pfuncall(self) -> ghidra.sleigh.grammar.SleighParser.pfuncall_return: ...

    def pieces(self) -> ghidra.sleigh.grammar.SleighParser_DisplayParser.pieces_return: ...

    def printpiece(self) -> ghidra.sleigh.grammar.SleighParser_DisplayParser.printpiece_return: ...

    def qstring(self) -> ghidra.sleigh.grammar.SleighParser.qstring_return: ...

    def recover(self, __a0: org.antlr.runtime.IntStream, __a1: org.antlr.runtime.RecognitionException) -> None: ...

    def recoverFromMismatchedSet(self, __a0: org.antlr.runtime.IntStream, __a1: org.antlr.runtime.RecognitionException, __a2: org.antlr.runtime.BitSet) -> object: ...

    def reportError(self, __a0: org.antlr.runtime.RecognitionException) -> None: ...

    def reset(self) -> None: ...

    def return_stmt(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.return_stmt_return: ...

    def section_def(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.section_def_return: ...

    def semantic(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.semantic_return: ...

    def semanticbody(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.semanticbody_return: ...

    def sembitrange(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.sembitrange_return: ...

    def setBacktrackingLevel(self, __a0: int) -> None: ...

    def setEnv(self, env: ghidra.sleigh.grammar.ParsingEnvironment) -> None: ...

    def setLexer(self, lexer: ghidra.sleigh.grammar.SleighLexer) -> None: ...

    def setTokenStream(self, __a0: org.antlr.runtime.TokenStream) -> None: ...

    def setTreeAdaptor(self, adaptor: org.antlr.runtime.tree.TreeAdaptor) -> None: ...

    def shift_op(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.shift_op_return: ...

    def sizedexport(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.sizedexport_return: ...

    def sizedstar(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.sizedstar_return: ...

    def sizemod(self) -> ghidra.sleigh.grammar.SleighParser.sizemod_return: ...

    def spacedef(self) -> ghidra.sleigh.grammar.SleighParser.spacedef_return: ...

    def spacemod(self) -> ghidra.sleigh.grammar.SleighParser.spacemod_return: ...

    def spacemods(self, lc: org.antlr.runtime.Token) -> ghidra.sleigh.grammar.SleighParser.spacemods_return: ...

    def spec(self) -> ghidra.sleigh.grammar.SleighParser.spec_return: ...

    def special(self) -> ghidra.sleigh.grammar.SleighParser_DisplayParser.special_return: ...

    def statement(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.statement_return: ...

    def statements(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.statements_return: ...

    def strict_id(self) -> ghidra.sleigh.grammar.SleighParser.strict_id_return: ...

    def stringorident(self) -> ghidra.sleigh.grammar.SleighParser.stringorident_return: ...

    def stringoridentlist(self, lc: org.antlr.runtime.Token) -> ghidra.sleigh.grammar.SleighParser.stringoridentlist_return: ...

    def synpred1_SleighParser(self) -> bool: ...

    def synpred1_SleighParser_fragment(self) -> None: ...

    def toString(self) -> unicode: ...

    def toStrings(self, __a0: List[object]) -> List[object]: ...

    def tokendef(self) -> ghidra.sleigh.grammar.SleighParser.tokendef_return: ...

    @overload
    def traceIn(self, __a0: unicode, __a1: int) -> None: ...

    @overload
    def traceIn(self, __a0: unicode, __a1: int, __a2: object) -> None: ...

    @overload
    def traceOut(self, __a0: unicode, __a1: int) -> None: ...

    @overload
    def traceOut(self, __a0: unicode, __a1: int, __a2: object) -> None: ...

    def type(self) -> ghidra.sleigh.grammar.SleighParser.type_return: ...

    def typemod(self) -> ghidra.sleigh.grammar.SleighParser.typemod_return: ...

    def unary_op(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.unary_op_return: ...

    def valueattach(self) -> ghidra.sleigh.grammar.SleighParser.valueattach_return: ...

    def varattach(self) -> ghidra.sleigh.grammar.SleighParser.varattach_return: ...

    def varnode(self) -> ghidra.sleigh.grammar.SleighParser_SemanticParser.varnode_return: ...

    def varnodedef(self) -> ghidra.sleigh.grammar.SleighParser.varnodedef_return: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def whitespace(self) -> ghidra.sleigh.grammar.SleighParser_DisplayParser.whitespace_return: ...

    def wildcard(self) -> ghidra.sleigh.grammar.SleighParser.wildcard_return: ...

    def withblock(self) -> ghidra.sleigh.grammar.SleighParser.withblock_return: ...

    def wordsizemod(self) -> ghidra.sleigh.grammar.SleighParser.wordsizemod_return: ...

    @property
    def delegates(self) -> List[ghidra.sleigh.grammar.AbstractSleighParser]: ...

    @property
    def env(self) -> None: ...  # No getter available.

    @env.setter
    def env(self, value: ghidra.sleigh.grammar.ParsingEnvironment) -> None: ...

    @property
    def grammarFileName(self) -> unicode: ...

    @property
    def lexer(self) -> None: ...  # No getter available.

    @lexer.setter
    def lexer(self, value: ghidra.sleigh.grammar.SleighLexer) -> None: ...

    @property
    def tokenNames(self) -> List[unicode]: ...

    @property
    def treeAdaptor(self) -> org.antlr.runtime.tree.TreeAdaptor: ...

    @treeAdaptor.setter
    def treeAdaptor(self, value: org.antlr.runtime.tree.TreeAdaptor) -> None: ...
