from typing import List
import java.lang


class StringAndScores(object):




    def __init__(self, __a0: unicode, __a1: bool): ...



    def equals(self, __a0: object) -> bool: ...

    def getAsciiCodes(self) -> List[int]: ...

    def getClass(self) -> java.lang.Class: ...

    def getNgramScore(self) -> float: ...

    def getOriginalString(self) -> unicode: ...

    def getScoreThreshold(self) -> float: ...

    def getScoredString(self) -> unicode: ...

    def getScoredStringLength(self) -> int: ...

    def hashCode(self) -> int: ...

    def isScoreAboveThreshold(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setNgramScore(self, __a0: float) -> None: ...

    def setScoreThreshold(self, __a0: float) -> None: ...

    def summaryToString(self) -> unicode: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def asciiCodes(self) -> List[int]: ...

    @property
    def ngramScore(self) -> float: ...

    @ngramScore.setter
    def ngramScore(self, value: float) -> None: ...

    @property
    def originalString(self) -> unicode: ...

    @property
    def scoreAboveThreshold(self) -> bool: ...

    @property
    def scoreThreshold(self) -> float: ...

    @scoreThreshold.setter
    def scoreThreshold(self, value: float) -> None: ...

    @property
    def scoredString(self) -> unicode: ...

    @property
    def scoredStringLength(self) -> int: ...
