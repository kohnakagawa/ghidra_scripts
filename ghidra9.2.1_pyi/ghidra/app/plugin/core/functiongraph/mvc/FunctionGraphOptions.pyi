import ghidra.app.plugin.core.functiongraph.graph.layout
import ghidra.app.plugin.core.functiongraph.mvc
import ghidra.framework.options
import ghidra.graph.viewer.options
import ghidra.program.model.symbol
import java.awt
import java.lang


class FunctionGraphOptions(ghidra.graph.viewer.options.VisualGraphOptions):
    DEFAULT_GROUP_BACKGROUND_COLOR: java.awt.Color = java.awt.Color[r=226,g=255,b=155]
    RELAYOUT_OPTIONS_DESCRIPTION: unicode = u'Signals to the Function Graph when an automatic relayout of the graph should take place.  The  basic options are:<ul><li><b>Always</b> - always relayout the graph when the block model changes</li><li><b>Block Model Changes Only</b> - relayout the graph when the block model changes (like when a label has been added to the program in the currently graphed function)</li><li><b>Vertex Grouping Changes Only</b> - when vertices are grouped or ungrouped</li><li><b>Never</b> - do not automatically relayout the graph</li></ul><br><br><b><i>See help for more</i></b>'
    RELAYOUT_OPTIONS_KEY: unicode = u'Automatic Graph Relayout'



    def __init__(self): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getColor(self, __a0: ghidra.program.model.symbol.FlowType) -> java.awt.Color: ...

    def getConditionalJumpEdgeColor(self) -> java.awt.Color: ...

    def getConditionalJumpEdgeHighlightColor(self) -> java.awt.Color: ...

    def getDefaultGroupBackgroundColor(self) -> java.awt.Color: ...

    def getFallthroughEdgeColor(self) -> java.awt.Color: ...

    def getFallthroughEdgeHighlightColor(self) -> java.awt.Color: ...

    def getHighlightColor(self, __a0: ghidra.program.model.symbol.FlowType) -> java.awt.Color: ...

    def getLayoutOptions(self, __a0: unicode) -> ghidra.app.plugin.core.functiongraph.graph.layout.FGLayoutOptions: ...

    def getNavigationHistoryChoice(self) -> ghidra.app.plugin.core.functiongraph.mvc.NavigationHistoryChoices: ...

    def getRelayoutOption(self) -> ghidra.graph.viewer.options.RelayoutOption: ...

    def getScrollWheelPans(self) -> bool: ...

    def getUnconditionalJumpEdgeColor(self) -> java.awt.Color: ...

    def getUnconditionalJumpEdgeHighlightColor(self) -> java.awt.Color: ...

    def getUpdateGroupColorsAutomatically(self) -> bool: ...

    def getViewRestoreOption(self) -> ghidra.graph.viewer.options.ViewRestoreOption: ...

    def hashCode(self) -> int: ...

    def loadOptions(self, __a0: ghidra.framework.options.Options) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def optionChangeRequiresRelayout(self, __a0: unicode) -> bool: ...

    def registerOptions(self, __a0: ghidra.framework.options.Options) -> None: ...

    def setLayoutOptions(self, __a0: unicode, __a1: ghidra.app.plugin.core.functiongraph.graph.layout.FGLayoutOptions) -> None: ...

    def setUseAnimation(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    def useAnimation(self) -> bool: ...

    def useCondensedLayout(self) -> bool: ...

    def useFullSizeTooltip(self) -> bool: ...

    def useMouseRelativeZoom(self) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def conditionalJumpEdgeColor(self) -> java.awt.Color: ...

    @property
    def conditionalJumpEdgeHighlightColor(self) -> java.awt.Color: ...

    @property
    def defaultGroupBackgroundColor(self) -> java.awt.Color: ...

    @property
    def fallthroughEdgeColor(self) -> java.awt.Color: ...

    @property
    def fallthroughEdgeHighlightColor(self) -> java.awt.Color: ...

    @property
    def navigationHistoryChoice(self) -> ghidra.app.plugin.core.functiongraph.mvc.NavigationHistoryChoices: ...

    @property
    def relayoutOption(self) -> ghidra.graph.viewer.options.RelayoutOption: ...

    @property
    def unconditionalJumpEdgeColor(self) -> java.awt.Color: ...

    @property
    def unconditionalJumpEdgeHighlightColor(self) -> java.awt.Color: ...

    @property
    def updateGroupColorsAutomatically(self) -> bool: ...
