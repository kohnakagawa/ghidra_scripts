from typing import List
import ghidra.framework.remote
import java.io
import java.lang
import java.rmi
import java.rmi.server


class RepositoryServerHandleImpl(java.rmi.server.UnicastRemoteObject, ghidra.framework.remote.RemoteRepositoryServerHandle):




    def __init__(self, __a0: unicode, __a1: bool, __a2: ghidra.server.RepositoryManager, __a3: bool): ...



    def anonymousAccessAllowed(self) -> bool: ...

    def canSetPassword(self) -> bool: ...

    def clone(self) -> object: ...

    def connected(self) -> None: ...

    def createRepository(self, __a0: unicode) -> ghidra.framework.remote.RepositoryHandle: ...

    def deleteRepository(self, __a0: unicode) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    @staticmethod
    def exportObject(__a0: java.rmi.Remote) -> java.rmi.server.RemoteStub: ...

    @overload
    @staticmethod
    def exportObject(__a0: java.rmi.Remote, __a1: int) -> java.rmi.Remote: ...

    @overload
    @staticmethod
    def exportObject(__a0: java.rmi.Remote, __a1: int, __a2: java.io.ObjectInputFilter) -> java.rmi.Remote: ...

    @overload
    @staticmethod
    def exportObject(__a0: java.rmi.Remote, __a1: int, __a2: java.rmi.server.RMIClientSocketFactory, __a3: java.rmi.server.RMIServerSocketFactory) -> java.rmi.Remote: ...

    @overload
    @staticmethod
    def exportObject(__a0: java.rmi.Remote, __a1: int, __a2: java.rmi.server.RMIClientSocketFactory, __a3: java.rmi.server.RMIServerSocketFactory, __a4: java.io.ObjectInputFilter) -> java.rmi.Remote: ...

    def getAllUsers(self) -> List[unicode]: ...

    def getClass(self) -> java.lang.Class: ...

    @staticmethod
    def getClientHost() -> unicode: ...

    @staticmethod
    def getLog() -> java.io.PrintStream: ...

    def getPasswordExpiration(self) -> long: ...

    def getRef(self) -> java.rmi.server.RemoteRef: ...

    def getRepository(self, __a0: unicode) -> ghidra.framework.remote.RemoteRepositoryHandle: ...

    def getRepositoryNames(self) -> List[unicode]: ...

    def getUser(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def isReadOnly(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def setLog(__a0: java.io.OutputStream) -> None: ...

    def setPassword(self, __a0: List[int]) -> bool: ...

    def toString(self) -> unicode: ...

    @staticmethod
    def toStub(__a0: java.rmi.Remote) -> java.rmi.Remote: ...

    @staticmethod
    def unexportObject(__a0: java.rmi.Remote, __a1: bool) -> bool: ...

    def unreferenced(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def allUsers(self) -> List[unicode]: ...

    @property
    def password(self) -> None: ...  # No getter available.

    @password.setter
    def password(self, value: List[int]) -> None: ...

    @property
    def passwordExpiration(self) -> long: ...

    @property
    def readOnly(self) -> bool: ...

    @property
    def repositoryNames(self) -> List[unicode]: ...

    @property
    def user(self) -> unicode: ...
