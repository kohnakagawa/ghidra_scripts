import generic.stl
import ghidra.pcodeCPort.slghpatexpress
import ghidra.pcodeCPort.slghsymbol
import java.lang


class EquationOr(ghidra.pcodeCPort.slghpatexpress.PatternEquation):
    location: ghidra.sleigh.grammar.Location



    def __init__(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghpatexpress.PatternEquation, __a2: ghidra.pcodeCPort.slghpatexpress.PatternEquation): ...



    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def genPattern(self, __a0: generic.stl.VectorSTL) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getTokenPattern(self) -> ghidra.pcodeCPort.slghpatexpress.TokenPattern: ...

    def hashCode(self) -> int: ...

    def layClaim(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def operandOrder(self, __a0: ghidra.pcodeCPort.slghsymbol.Constructor, __a1: generic.stl.VectorSTL) -> None: ...

    @staticmethod
    def release(__a0: ghidra.pcodeCPort.slghpatexpress.PatternEquation) -> None: ...

    def resolveOperandLeft(self, __a0: ghidra.pcodeCPort.slghpatexpress.OperandResolve) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
