import generic.stl
import ghidra.pcodeCPort.opcodes
import ghidra.pcodeCPort.semantics
import ghidra.pcodeCPort.sleighbase
import ghidra.pcodeCPort.slgh_compile
import ghidra.pcodeCPort.slghsymbol
import ghidra.pcodeCPort.space
import ghidra.pcodeCPort.translate
import ghidra.sleigh.grammar
import java.lang


class SemanticEnvironment(ghidra.pcodeCPort.sleighbase.NamedSymbolProvider, ghidra.pcodeCPort.translate.BasicSpaceProvider, object):








    def addressOf(self, __a0: ghidra.pcodeCPort.semantics.VarnodeTpl, __a1: int) -> ghidra.pcodeCPort.semantics.VarnodeTpl: ...

    def assignBitRange(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: int, __a3: int, __a4: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

    def createBitRange(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.SpecificSymbol, __a2: int, __a3: int) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

    def createLoad(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slgh_compile.StarQuality, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

    def createMacroUse(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.MacroSymbol, __a2: generic.stl.VectorSTL) -> generic.stl.VectorSTL: ...

    @overload
    def createOp(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

    @overload
    def createOp(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

    def createOpConst(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: long) -> generic.stl.VectorSTL: ...

    @overload
    def createOpNoOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

    @overload
    def createOpNoOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

    def createStore(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slgh_compile.StarQuality, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

    def createUserOp(self, __a0: ghidra.pcodeCPort.slghsymbol.UserOpSymbol, __a1: generic.stl.VectorSTL) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

    def createUserOpNoOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.UserOpSymbol, __a2: generic.stl.VectorSTL) -> generic.stl.VectorSTL: ...

    def defineLabel(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> ghidra.pcodeCPort.slghsymbol.LabelSymbol: ...

    def equals(self, __a0: object) -> bool: ...

    def findInternalFunction(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: generic.stl.VectorSTL) -> object: ...

    def findSymbol(self, __a0: unicode) -> ghidra.pcodeCPort.slghsymbol.SleighSymbol: ...

    def getClass(self) -> java.lang.Class: ...

    def getConstantSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getDefaultSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def hashCode(self) -> int: ...

    @overload
    def newOutput(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slgh_compile.ExprTree, __a2: unicode) -> generic.stl.VectorSTL: ...

    @overload
    def newOutput(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slgh_compile.ExprTree, __a2: unicode, __a3: int) -> generic.stl.VectorSTL: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def placeLabel(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.LabelSymbol) -> generic.stl.VectorSTL: ...

    def recordNop(self, __a0: ghidra.sleigh.grammar.Location) -> None: ...

    def setResultStarVarnode(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl, __a1: ghidra.pcodeCPort.slgh_compile.StarQuality, __a2: ghidra.pcodeCPort.semantics.VarnodeTpl) -> ghidra.pcodeCPort.semantics.ConstructTpl: ...

    def setResultVarnode(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl) -> ghidra.pcodeCPort.semantics.ConstructTpl: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def constantSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    @property
    def defaultSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...
