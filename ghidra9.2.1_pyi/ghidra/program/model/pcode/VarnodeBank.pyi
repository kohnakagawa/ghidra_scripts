from typing import Iterator
import ghidra.program.model.address
import ghidra.program.model.pcode
import java.lang
import java.util
import java.util.function


class VarnodeBank(object):
    """
    Container class for VarnodeAST's
    """






    class LocComparator(object, java.util.Comparator):




        def __init__(self, __a0: ghidra.program.model.pcode.VarnodeBank): ...



        @overload
        def compare(self, __a0: ghidra.program.model.pcode.VarnodeAST, __a1: ghidra.program.model.pcode.VarnodeAST) -> int: ...

        @overload
        def compare(self, __a0: object, __a1: object) -> int: ...

        @overload
        @staticmethod
        def comparing(__a0: java.util.function.Function) -> java.util.Comparator: ...

        @overload
        @staticmethod
        def comparing(__a0: java.util.function.Function, __a1: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def comparingDouble(__a0: java.util.function.ToDoubleFunction) -> java.util.Comparator: ...

        @staticmethod
        def comparingInt(__a0: java.util.function.ToIntFunction) -> java.util.Comparator: ...

        @staticmethod
        def comparingLong(__a0: java.util.function.ToLongFunction) -> java.util.Comparator: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def naturalOrder() -> java.util.Comparator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def nullsFirst(__a0: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def nullsLast(__a0: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def reverseOrder() -> java.util.Comparator: ...

        def reversed(self) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.Comparator) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.function.Function) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.function.Function, __a1: java.util.Comparator) -> java.util.Comparator: ...

        def thenComparingDouble(self, __a0: java.util.function.ToDoubleFunction) -> java.util.Comparator: ...

        def thenComparingInt(self, __a0: java.util.function.ToIntFunction) -> java.util.Comparator: ...

        def thenComparingLong(self, __a0: java.util.function.ToLongFunction) -> java.util.Comparator: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class DefComparator(object, java.util.Comparator):




        def __init__(self, __a0: ghidra.program.model.pcode.VarnodeBank): ...



        @overload
        def compare(self, __a0: ghidra.program.model.pcode.VarnodeAST, __a1: ghidra.program.model.pcode.VarnodeAST) -> int: ...

        @overload
        def compare(self, __a0: object, __a1: object) -> int: ...

        @overload
        @staticmethod
        def comparing(__a0: java.util.function.Function) -> java.util.Comparator: ...

        @overload
        @staticmethod
        def comparing(__a0: java.util.function.Function, __a1: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def comparingDouble(__a0: java.util.function.ToDoubleFunction) -> java.util.Comparator: ...

        @staticmethod
        def comparingInt(__a0: java.util.function.ToIntFunction) -> java.util.Comparator: ...

        @staticmethod
        def comparingLong(__a0: java.util.function.ToLongFunction) -> java.util.Comparator: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def naturalOrder() -> java.util.Comparator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def nullsFirst(__a0: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def nullsLast(__a0: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def reverseOrder() -> java.util.Comparator: ...

        def reversed(self) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.Comparator) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.function.Function) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.function.Function, __a1: java.util.Comparator) -> java.util.Comparator: ...

        def thenComparingDouble(self, __a0: java.util.function.ToDoubleFunction) -> java.util.Comparator: ...

        def thenComparingInt(self, __a0: java.util.function.ToIntFunction) -> java.util.Comparator: ...

        def thenComparingLong(self, __a0: java.util.function.ToLongFunction) -> java.util.Comparator: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self): ...



    def clear(self) -> None: ...

    def create(self, s: int, addr: ghidra.program.model.address.Address, id: int) -> ghidra.program.model.pcode.Varnode: ...

    def destroy(self, vn: ghidra.program.model.pcode.Varnode) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def find(self, sz: int, addr: ghidra.program.model.address.Address, pc: ghidra.program.model.address.Address, uniq: int) -> ghidra.program.model.pcode.Varnode: ...

    def findInput(self, sz: int, addr: ghidra.program.model.address.Address) -> ghidra.program.model.pcode.Varnode: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    @overload
    def locRange(self) -> Iterator[ghidra.program.model.pcode.VarnodeAST]: ...

    @overload
    def locRange(self, addr: ghidra.program.model.address.Address) -> Iterator[ghidra.program.model.pcode.VarnodeAST]: ...

    @overload
    def locRange(self, spaceid: ghidra.program.model.address.AddressSpace) -> Iterator[ghidra.program.model.pcode.VarnodeAST]: ...

    @overload
    def locRange(self, sz: int, addr: ghidra.program.model.address.Address) -> Iterator[ghidra.program.model.pcode.VarnodeAST]: ...

    def makeFree(self, vn: ghidra.program.model.pcode.Varnode) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setDef(self, vn: ghidra.program.model.pcode.Varnode, op: ghidra.program.model.pcode.PcodeOp) -> ghidra.program.model.pcode.Varnode: ...

    def setInput(self, vn: ghidra.program.model.pcode.Varnode) -> ghidra.program.model.pcode.Varnode: ...

    def size(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def empty(self) -> bool: ...

    @property
    def input(self) -> None: ...  # No getter available.

    @input.setter
    def input(self, value: ghidra.program.model.pcode.Varnode) -> None: ...
