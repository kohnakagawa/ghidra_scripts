import ghidra.pcodeCPort.address
import ghidra.pcodeCPort.context
import ghidra.pcodeCPort.slghsymbol
import ghidra.pcodeCPort.space
import java.lang


class ParserWalkerChange(ghidra.pcodeCPort.context.ParserWalker):




    def __init__(self, __a0: ghidra.pcodeCPort.context.ParserContext): ...



    def baseState(self) -> None: ...

    def calcCurrentLength(self, __a0: int, __a1: int) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddr(self) -> ghidra.pcodeCPort.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getConstSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getConstructor(self) -> ghidra.pcodeCPort.slghsymbol.Constructor: ...

    def getContextBits(self, __a0: int, __a1: int) -> int: ...

    def getContextBytes(self, __a0: int, __a1: int) -> int: ...

    def getCurSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getFixedHandle(self, __a0: int) -> ghidra.pcodeCPort.context.FixedHandle: ...

    def getFlowDestAddr(self) -> ghidra.pcodeCPort.address.Address: ...

    def getFlowRefAddr(self) -> ghidra.pcodeCPort.address.Address: ...

    def getInstructionBits(self, __a0: int, __a1: int) -> int: ...

    def getInstructionBytes(self, __a0: int, __a1: int) -> int: ...

    def getLength(self) -> int: ...

    def getNaddr(self) -> ghidra.pcodeCPort.address.Address: ...

    def getOffset(self, __a0: int) -> int: ...

    def getOperand(self) -> int: ...

    def getParentHandle(self) -> ghidra.pcodeCPort.context.FixedHandle: ...

    def getParserContext(self) -> ghidra.pcodeCPort.context.ParserContext: ...

    def getPoint(self) -> ghidra.pcodeCPort.context.ConstructState: ...

    def hashCode(self) -> int: ...

    def isState(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def popOperand(self) -> None: ...

    def pushOperand(self, __a0: int) -> None: ...

    def setConstructor(self, __a0: ghidra.pcodeCPort.slghsymbol.Constructor) -> None: ...

    def setCurrentLength(self, __a0: int) -> None: ...

    def setOffset(self, __a0: int) -> None: ...

    def setOutOfBandState(self, __a0: ghidra.pcodeCPort.slghsymbol.Constructor, __a1: int, __a2: ghidra.pcodeCPort.context.ConstructState, __a3: ghidra.pcodeCPort.context.ParserWalker) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def constructor(self) -> ghidra.pcodeCPort.slghsymbol.Constructor: ...

    @constructor.setter
    def constructor(self, value: ghidra.pcodeCPort.slghsymbol.Constructor) -> None: ...

    @property
    def currentLength(self) -> None: ...  # No getter available.

    @currentLength.setter
    def currentLength(self, value: int) -> None: ...

    @property
    def offset(self) -> None: ...  # No getter available.

    @offset.setter
    def offset(self, value: int) -> None: ...

    @property
    def parserContext(self) -> ghidra.pcodeCPort.context.ParserContext: ...

    @property
    def point(self) -> ghidra.pcodeCPort.context.ConstructState: ...
