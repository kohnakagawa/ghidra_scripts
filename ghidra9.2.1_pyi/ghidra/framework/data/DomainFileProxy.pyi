from typing import List
import ghidra.framework.data
import ghidra.framework.model
import ghidra.framework.store
import ghidra.util.task
import java.io
import java.lang
import java.util
import javax.swing


class DomainFileProxy(object, ghidra.framework.model.DomainFile):
    """
    Implements the DomainFile interface for DomainObjects that are not currently
     associated with any real DomainFile. This class enforces the sharing of
     objects between tools.  After the first tool gets the implementation, all
     other gets() just get the same instance.  This class also keeps track of
     which tools are using a its domain object.
    """

    DEFAULT_VERSION: int = -1
    READ_ONLY_PROPERTY: unicode = u'READ_ONLY'



    def __init__(self, name: unicode, doa: ghidra.framework.data.DomainObjectAdapter): ...



    def addToVersionControl(self, comment: unicode, keepCheckedOut: bool, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    def canAddToRepository(self) -> bool: ...

    def canCheckin(self) -> bool: ...

    def canCheckout(self) -> bool: ...

    def canMerge(self) -> bool: ...

    def canRecover(self) -> bool: ...

    def canSave(self) -> bool: ...

    def checkin(self, checkinHandler: ghidra.framework.data.CheckinHandler, okToUpgrade: bool, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    def checkout(self, exclusive: bool, monitor: ghidra.util.task.TaskMonitor) -> bool: ...

    @overload
    def compareTo(self, df: ghidra.framework.model.DomainFile) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def copyTo(self, newParent: ghidra.framework.model.DomainFolder, monitor: ghidra.util.task.TaskMonitor) -> ghidra.framework.model.DomainFile: ...

    def copyVersionTo(self, version: int, destFolder: ghidra.framework.model.DomainFolder, monitor: ghidra.util.task.TaskMonitor) -> ghidra.framework.model.DomainFile:
        """
        @see ghidra.framework.model.DomainFile#copyVersionTo(int, ghidra.framework.model.DomainFolder, ghidra.util.task.TaskMonitor)
        """
        ...

    @overload
    def delete(self) -> None: ...

    @overload
    def delete(self, fileVersion: int) -> None: ...

    def equals(self, obj: object) -> bool: ...

    def exists(self) -> bool: ...

    def getChangesByOthersSinceCheckout(self) -> ghidra.framework.model.ChangeSet: ...

    def getCheckoutStatus(self) -> ghidra.framework.store.ItemCheckoutStatus: ...

    def getCheckouts(self) -> List[ghidra.framework.store.ItemCheckoutStatus]: ...

    def getClass(self) -> java.lang.Class: ...

    def getConsumers(self) -> java.util.ArrayList: ...

    def getContentType(self) -> unicode: ...

    def getDomainObject(self, consumer: object, okToUpgrade: bool, okToRecover: bool, monitor: ghidra.util.task.TaskMonitor) -> ghidra.framework.model.DomainObject: ...

    def getDomainObjectClass(self) -> java.lang.Class: ...

    def getFileID(self) -> unicode: ...

    def getIcon(self, disabled: bool) -> javax.swing.Icon: ...

    def getImmutableDomainObject(self, consumer: object, fileVersion: int, monitor: ghidra.util.task.TaskMonitor) -> ghidra.framework.model.DomainObject: ...

    def getLastModifiedTime(self) -> long: ...

    def getLatestVersion(self) -> int: ...

    def getMetadata(self) -> java.util.Map: ...

    def getName(self) -> unicode: ...

    def getOpenedDomainObject(self, consumer: object) -> ghidra.framework.model.DomainObject: ...

    def getParent(self) -> ghidra.framework.model.DomainFolder: ...

    def getPathname(self) -> unicode: ...

    def getProjectLocator(self) -> ghidra.framework.model.ProjectLocator: ...

    def getReadOnlyDomainObject(self, consumer: object, fileVersion: int, monitor: ghidra.util.task.TaskMonitor) -> ghidra.framework.model.DomainObject: ...

    def getVersion(self) -> int: ...

    def getVersionHistory(self) -> List[ghidra.framework.store.Version]: ...

    def hashCode(self) -> int: ...

    def isBusy(self) -> bool: ...

    def isChanged(self) -> bool: ...

    def isCheckedOut(self) -> bool: ...

    def isCheckedOutExclusive(self) -> bool: ...

    def isHijacked(self) -> bool: ...

    def isInUse(self) -> bool: ...

    def isInWritableProject(self) -> bool: ...

    def isLatestVersion(self) -> bool: ...

    def isOpen(self) -> bool: ...

    def isReadOnly(self) -> bool: ...

    def isUsedBy(self, consumer: object) -> bool: ...

    def isUsedExclusivelyBy(self, consumer: object) -> bool: ...

    def isVersionControlSupported(self) -> bool: ...

    def isVersioned(self) -> bool: ...

    def length(self) -> long: ...

    def merge(self, okToUpgrade: bool, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    def modifiedSinceCheckout(self) -> bool: ...

    def moveTo(self, newParent: ghidra.framework.model.DomainFolder) -> ghidra.framework.model.DomainFile: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def packFile(self, file: java.io.File, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    def save(self, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    def setName(self, newName: unicode) -> ghidra.framework.model.DomainFile: ...

    def setReadOnly(self, state: bool) -> None: ...

    def takeRecoverySnapshot(self) -> bool: ...

    def terminateCheckout(self, checkoutId: long) -> None: ...

    def toString(self) -> unicode: ...

    def undoCheckout(self, keep: bool) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def busy(self) -> bool: ...

    @property
    def changed(self) -> bool: ...

    @property
    def changesByOthersSinceCheckout(self) -> ghidra.framework.model.ChangeSet: ...

    @property
    def checkedOut(self) -> bool: ...

    @property
    def checkedOutExclusive(self) -> bool: ...

    @property
    def checkoutStatus(self) -> ghidra.framework.store.ItemCheckoutStatus: ...

    @property
    def checkouts(self) -> List[ghidra.framework.store.ItemCheckoutStatus]: ...

    @property
    def consumers(self) -> java.util.ArrayList: ...

    @property
    def contentType(self) -> unicode: ...

    @property
    def domainObjectClass(self) -> java.lang.Class: ...

    @property
    def fileID(self) -> unicode: ...

    @property
    def hijacked(self) -> bool: ...

    @property
    def inUse(self) -> bool: ...

    @property
    def inWritableProject(self) -> bool: ...

    @property
    def lastModifiedTime(self) -> long: ...

    @property
    def latestVersion(self) -> bool: ...

    @property
    def metadata(self) -> java.util.Map: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def open(self) -> bool: ...

    @property
    def parent(self) -> ghidra.framework.model.DomainFolder: ...

    @property
    def pathname(self) -> unicode: ...

    @property
    def projectLocator(self) -> ghidra.framework.model.ProjectLocator: ...

    @property
    def readOnly(self) -> bool: ...

    @readOnly.setter
    def readOnly(self, value: bool) -> None: ...

    @property
    def version(self) -> int: ...

    @property
    def versionControlSupported(self) -> bool: ...

    @property
    def versionHistory(self) -> List[ghidra.framework.store.Version]: ...

    @property
    def versioned(self) -> bool: ...
