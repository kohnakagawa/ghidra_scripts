import generic.stl
import ghidra.pcodeCPort.semantics
import ghidra.pcodeCPort.space
import ghidra.pcodeCPort.translate
import java.io
import java.lang
import org.jdom


class ConstructTpl(object):
    loc: ghidra.sleigh.grammar.Location



    def __init__(self, __a0: ghidra.sleigh.grammar.Location): ...



    def addOp(self, __a0: ghidra.pcodeCPort.semantics.OpTpl) -> bool: ...

    def addOpList(self, __a0: generic.stl.VectorSTL) -> bool: ...

    def buildOnly(self) -> bool: ...

    def changeHandleIndex(self, __a0: generic.stl.VectorSTL) -> None: ...

    def delaySlot(self) -> int: ...

    def deleteOps(self, __a0: generic.stl.VectorSTL) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def fillinBuild(self, __a0: generic.stl.VectorSTL, __a1: ghidra.pcodeCPort.space.AddrSpace) -> generic.stl.Pair: ...

    def getClass(self) -> java.lang.Class: ...

    def getOpvec(self) -> generic.stl.VectorSTL: ...

    def getResult(self) -> ghidra.pcodeCPort.semantics.HandleTpl: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def numLabels(self) -> int: ...

    def restoreXml(self, __a0: org.jdom.Element, __a1: ghidra.pcodeCPort.translate.Translate) -> int: ...

    def saveXml(self, __a0: java.io.PrintStream, __a1: int) -> None: ...

    def setInput(self, __a0: ghidra.pcodeCPort.semantics.VarnodeTpl, __a1: int, __a2: int) -> None: ...

    def setNumLabels(self, __a0: int) -> None: ...

    def setOpvec(self, __a0: generic.stl.VectorSTL) -> None: ...

    def setOutput(self, __a0: ghidra.pcodeCPort.semantics.VarnodeTpl, __a1: int) -> None: ...

    def setResult(self, __a0: ghidra.pcodeCPort.semantics.HandleTpl) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def opvec(self) -> generic.stl.VectorSTL: ...

    @opvec.setter
    def opvec(self, value: generic.stl.VectorSTL) -> None: ...

    @property
    def result(self) -> ghidra.pcodeCPort.semantics.HandleTpl: ...

    @result.setter
    def result(self, value: ghidra.pcodeCPort.semantics.HandleTpl) -> None: ...
