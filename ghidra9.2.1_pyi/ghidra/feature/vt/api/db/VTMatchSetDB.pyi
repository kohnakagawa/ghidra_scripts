import db
import ghidra.feature.vt.api.db
import ghidra.feature.vt.api.impl
import ghidra.feature.vt.api.main
import ghidra.framework.options
import ghidra.program.database
import ghidra.program.model.address
import ghidra.util
import ghidra.util.task
import java.lang
import java.util


class VTMatchSetDB(ghidra.program.database.DatabaseObject, ghidra.feature.vt.api.main.VTMatchSet):








    def addMatch(self, __a0: ghidra.feature.vt.api.main.VTMatchInfo) -> ghidra.feature.vt.api.main.VTMatch: ...

    def checkDeleted(self) -> None: ...

    @overload
    def checkIsValid(self) -> bool: ...

    @overload
    def checkIsValid(self, __a0: db.Record) -> bool: ...

    @staticmethod
    def createMatchSetDB(__a0: db.Record, __a1: ghidra.feature.vt.api.db.VTSessionDB, __a2: db.DBHandle, __a3: ghidra.util.Lock) -> ghidra.feature.vt.api.db.VTMatchSetDB: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDestinationAddressSet(self) -> ghidra.program.model.address.AddressSet: ...

    def getID(self) -> int: ...

    def getKey(self) -> long: ...

    def getMatchCount(self) -> int: ...

    @staticmethod
    def getMatchSetDB(__a0: db.Record, __a1: ghidra.feature.vt.api.db.VTSessionDB, __a2: db.DBHandle, __a3: db.OpenMode, __a4: ghidra.util.task.TaskMonitor, __a5: ghidra.util.Lock) -> ghidra.feature.vt.api.db.VTMatchSetDB: ...

    @overload
    def getMatches(self) -> java.util.Collection: ...

    @overload
    def getMatches(self, __a0: ghidra.feature.vt.api.main.VTAssociation) -> java.util.Collection: ...

    @overload
    def getMatches(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address) -> java.util.Collection: ...

    def getOptions(self) -> ghidra.framework.options.Options: ...

    def getProgramCorrelatorClassName(self) -> unicode: ...

    def getProgramCorrelatorInfo(self) -> ghidra.feature.vt.api.impl.VTProgramCorrelatorInfo: ...

    def getProgramCorrelatorName(self) -> unicode: ...

    def getSession(self) -> ghidra.feature.vt.api.main.VTSession: ...

    def getSourceAddressSet(self) -> ghidra.program.model.address.AddressSet: ...

    def hasRemovableMatches(self) -> bool: ...

    def hashCode(self) -> int: ...

    def invalidateCache(self) -> None: ...

    def isDeleted(self) -> bool: ...

    def isInvalid(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeMatch(self, __a0: ghidra.feature.vt.api.main.VTMatch) -> bool: ...

    def setInvalid(self) -> None: ...

    def toString(self) -> unicode: ...

    def validate(self, __a0: ghidra.util.Lock) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def ID(self) -> int: ...

    @property
    def destinationAddressSet(self) -> ghidra.program.model.address.AddressSet: ...

    @property
    def invalid(self) -> bool: ...

    @property
    def matchCount(self) -> int: ...

    @property
    def matches(self) -> java.util.Collection: ...

    @property
    def options(self) -> ghidra.framework.options.Options: ...

    @property
    def programCorrelatorClassName(self) -> unicode: ...

    @property
    def programCorrelatorInfo(self) -> ghidra.feature.vt.api.impl.VTProgramCorrelatorInfo: ...

    @property
    def programCorrelatorName(self) -> unicode: ...

    @property
    def session(self) -> ghidra.feature.vt.api.main.VTSession: ...

    @property
    def sourceAddressSet(self) -> ghidra.program.model.address.AddressSet: ...
