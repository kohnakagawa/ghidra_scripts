from typing import List
import ghidra.formats.gfilesystem
import ghidra.util.task
import java.io
import java.lang


class DyldCacheFileSystem(ghidra.formats.gfilesystem.GFileSystemBase):




    def __init__(self, __a0: unicode, __a1: ghidra.app.util.bin.ByteProvider): ...



    def close(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDescription(self) -> unicode: ...

    def getFSRL(self) -> ghidra.formats.gfilesystem.FSRLRoot: ...

    def getFileCount(self) -> int: ...

    def getInfo(self, __a0: ghidra.formats.gfilesystem.GFile, __a1: ghidra.util.task.TaskMonitor) -> unicode: ...

    def getInputStream(self, __a0: ghidra.formats.gfilesystem.GFile, __a1: ghidra.util.task.TaskMonitor) -> java.io.InputStream: ...

    def getListing(self, __a0: ghidra.formats.gfilesystem.GFile) -> List[object]: ...

    def getName(self) -> unicode: ...

    def getRefManager(self) -> ghidra.formats.gfilesystem.FileSystemRefManager: ...

    def getType(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def isClosed(self) -> bool: ...

    def isStatic(self) -> bool: ...

    def isValid(self, __a0: ghidra.util.task.TaskMonitor) -> bool: ...

    def lookup(self, __a0: unicode) -> ghidra.formats.gfilesystem.GFile: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def open(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def setFSRL(self, __a0: ghidra.formats.gfilesystem.FSRLRoot) -> None: ...

    def setFilesystemService(self, __a0: ghidra.formats.gfilesystem.FileSystemService) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
