from typing import List
import ghidra.pcodeCPort.address
import ghidra.pcodeCPort.pcoderaw
import ghidra.pcodeCPort.space
import ghidra.pcodeCPort.translate
import java.io
import java.lang
import org.jdom


class Address(object, java.lang.Comparable):





    class mach_extreme(java.lang.Enum):
        m_maximal: ghidra.pcodeCPort.address.Address.mach_extreme = m_maximal
        m_minimal: ghidra.pcodeCPort.address.Address.mach_extreme = m_minimal







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.pcodeCPort.address.Address.mach_extreme: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.pcodeCPort.address.Address.mach_extreme]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    @overload
    def __init__(self): ...

    @overload
    def __init__(self, __a0: ghidra.pcodeCPort.address.Address): ...

    @overload
    def __init__(self, __a0: ghidra.pcodeCPort.address.Address.mach_extreme): ...

    @overload
    def __init__(self, __a0: ghidra.pcodeCPort.space.AddrSpace, __a1: long): ...



    def add(self, __a0: long) -> ghidra.pcodeCPort.address.Address: ...

    @overload
    def compareTo(self, __a0: ghidra.pcodeCPort.address.Address) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def endianContain(self, __a0: int, __a1: ghidra.pcodeCPort.address.Address, __a2: int) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddrSize(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getOffset(self) -> long: ...

    def getShortcut(self) -> int: ...

    def getSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    @staticmethod
    def getSpaceFromConst(__a0: ghidra.pcodeCPort.address.Address) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def hashCode(self) -> int: ...

    def isBigEndian(self) -> bool: ...

    def isConstant(self) -> bool: ...

    def isInvalid(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def overlap(self, __a0: int, __a1: ghidra.pcodeCPort.address.Address, __a2: int) -> int: ...

    def printRaw(self, __a0: java.io.PrintStream) -> int: ...

    def read(self, __a0: unicode) -> int: ...

    @staticmethod
    def restoreXml(__a0: org.jdom.Element, __a1: ghidra.pcodeCPort.translate.Translate) -> ghidra.pcodeCPort.pcoderaw.VarnodeData: ...

    @overload
    def saveXml(self, __a0: java.io.PrintStream) -> None: ...

    @overload
    def saveXml(self, __a0: java.io.PrintStream, __a1: int) -> None: ...

    def sub(self, __a0: long) -> ghidra.pcodeCPort.address.Address: ...

    def subtract(self, __a0: long) -> ghidra.pcodeCPort.address.Address: ...

    def toPhysical(self) -> None: ...

    @overload
    def toString(self) -> unicode: ...

    @overload
    def toString(self, __a0: bool) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addrSize(self) -> int: ...

    @property
    def bigEndian(self) -> bool: ...

    @property
    def constant(self) -> bool: ...

    @property
    def invalid(self) -> bool: ...

    @property
    def offset(self) -> long: ...

    @property
    def shortcut(self) -> int: ...

    @property
    def space(self) -> ghidra.pcodeCPort.space.AddrSpace: ...
