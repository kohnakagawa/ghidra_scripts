import java.awt
import java.lang


class PaintableShape(object):
    """
    A base class for shapes that can be painted on the graph.  See MouseDebugPaintable.
    """





    @overload
    def __init__(self, s: java.awt.Shape): ...

    @overload
    def __init__(self, s: java.awt.Shape, c: java.awt.Color): ...

    @overload
    def __init__(self, s: java.awt.Shape, c: java.awt.Color, stroke: java.awt.Stroke): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getColor(self) -> java.awt.Color: ...

    def getShape(self) -> java.awt.Shape: ...

    def getStroke(self) -> java.awt.Stroke: ...

    def getTx(self) -> float: ...

    def getTy(self) -> float: ...

    def hashCode(self) -> int: ...

    def isShapeFinished(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def paint(self, g: java.awt.Graphics2D) -> None: ...

    def shapeFinished(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def color(self) -> java.awt.Color: ...

    @property
    def shape(self) -> java.awt.Shape: ...

    @property
    def stroke(self) -> java.awt.Stroke: ...

    @property
    def tx(self) -> float: ...

    @property
    def ty(self) -> float: ...
