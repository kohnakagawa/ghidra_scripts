from typing import List
import ghidra.sleigh.grammar
import java.lang
import org.antlr.runtime


class ParsingEnvironment(object):




    @overload
    def __init__(self, writer: ghidra.sleigh.grammar.LineArrayListWriter): ...

    @overload
    def __init__(self, env: ghidra.sleigh.grammar.ParsingEnvironment): ...



    def equals(self, __a0: object) -> bool: ...

    def format(self, be: ghidra.sleigh.grammar.BailoutException) -> unicode: ...

    def getClass(self) -> java.lang.Class: ...

    def getErrorHeader(self, e: org.antlr.runtime.RecognitionException) -> unicode: ...

    def getErrorMessage(self, e: org.antlr.runtime.RecognitionException, tokenNames: List[unicode], mywriter: ghidra.sleigh.grammar.LineArrayListWriter) -> unicode: ...

    def getLexerErrorMessage(self, e: org.antlr.runtime.RecognitionException, tokenNames: List[unicode]) -> unicode: ...

    def getLexingErrors(self) -> int: ...

    def getLocator(self) -> ghidra.sleigh.grammar.Locator: ...

    def getParserErrorMessage(self, e: org.antlr.runtime.RecognitionException, tokenNames: List[unicode]) -> unicode: ...

    def getParsingErrors(self) -> int: ...

    def getTokenErrorDisplay(self, t: org.antlr.runtime.Token) -> unicode: ...

    def getWriter(self) -> ghidra.sleigh.grammar.LineArrayListWriter: ...

    def hashCode(self) -> int: ...

    def lexingError(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def parsingError(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def lexingErrors(self) -> int: ...

    @property
    def locator(self) -> ghidra.sleigh.grammar.Locator: ...

    @property
    def parsingErrors(self) -> int: ...

    @property
    def writer(self) -> ghidra.sleigh.grammar.LineArrayListWriter: ...
