from typing import List
import ghidra.bytepatterns.bitcluster
import ghidra.util.bytesearch
import java.lang
import java.util


class Face(ghidra.util.bytesearch.DittedBitSequence, java.lang.Comparable):
    strID: unicode



    @overload
    def __init__(self, __a0: List[int]): ...

    @overload
    def __init__(self, __a0: ghidra.bytepatterns.bitcluster.Face, __a1: ghidra.bytepatterns.bitcluster.Face, __a2: java.util.HashSet, __a3: int, __a4: bool): ...



    @overload
    def compareTo(self, __a0: ghidra.bytepatterns.bitcluster.Face) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def concatenate(self, __a0: ghidra.util.bytesearch.DittedBitSequence) -> ghidra.util.bytesearch.DittedBitSequence: ...

    def equals(self, __a0: object) -> bool: ...

    def getChildren(self) -> java.util.HashSet: ...

    def getClass(self) -> java.lang.Class: ...

    def getHexString(self) -> unicode: ...

    def getIndex(self) -> int: ...

    def getMaskBytes(self) -> List[int]: ...

    def getNumFixedBits(self) -> int: ...

    def getNumInitialFixedBits(self, __a0: int) -> int: ...

    def getNumUncertainBits(self) -> int: ...

    def getSize(self) -> int: ...

    def getValueBytes(self) -> List[int]: ...

    def getWeight(self) -> int: ...

    def hashCode(self) -> int: ...

    def incrementWeight(self) -> None: ...

    def isMatch(self, __a0: int, __a1: int) -> bool: ...

    def meetsCriteria(self, __a0: java.util.HashSet, __a1: java.util.HashMap) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def ratioFilled(self) -> float: ...

    def setIndex(self, __a0: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeBits(self, __a0: java.lang.StringBuffer) -> None: ...

    @property
    def children(self) -> java.util.HashSet: ...

    @property
    def weight(self) -> int: ...
