from typing import List
import docking.widgets.table
import docking.widgets.table.threaded
import ghidra.docking.settings
import ghidra.feature.vt.api.main
import ghidra.feature.vt.gui.filters
import ghidra.feature.vt.gui.provider.markuptable
import ghidra.feature.vt.gui.provider.matchtable
import ghidra.feature.vt.gui.util
import ghidra.framework.plugintool
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.model.symbol
import ghidra.program.util
import ghidra.util.table
import ghidra.util.table.column
import ghidra.util.table.field
import ghidra.util.task
import java.lang
import java.util
import java.util.function
import javax.swing.event
import javax.swing.table


class AbstractVTMatchTableModel(ghidra.util.table.AddressBasedTableModel):





    class SessionNumberTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> int: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...




    class SourceLengthTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> int: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...




    class SourceAddressTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> ghidra.feature.vt.gui.provider.markuptable.DisplayableListingAddress: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...

        @property
        def columnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...




    class SourceAddressComparator(object, java.util.Comparator):




        def __init__(self): ...



        @overload
        def compare(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.feature.vt.api.main.VTMatch) -> int: ...

        @overload
        def compare(self, __a0: object, __a1: object) -> int: ...

        @overload
        @staticmethod
        def comparing(__a0: java.util.function.Function) -> java.util.Comparator: ...

        @overload
        @staticmethod
        def comparing(__a0: java.util.function.Function, __a1: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def comparingDouble(__a0: java.util.function.ToDoubleFunction) -> java.util.Comparator: ...

        @staticmethod
        def comparingInt(__a0: java.util.function.ToIntFunction) -> java.util.Comparator: ...

        @staticmethod
        def comparingLong(__a0: java.util.function.ToLongFunction) -> java.util.Comparator: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def naturalOrder() -> java.util.Comparator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def nullsFirst(__a0: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def nullsLast(__a0: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def reverseOrder() -> java.util.Comparator: ...

        def reversed(self) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.Comparator) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.function.Function) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.function.Function, __a1: java.util.Comparator) -> java.util.Comparator: ...

        def thenComparingDouble(self, __a0: java.util.function.ToDoubleFunction) -> java.util.Comparator: ...

        def thenComparingInt(self, __a0: java.util.function.ToIntFunction) -> java.util.Comparator: ...

        def thenComparingLong(self, __a0: java.util.function.ToLongFunction) -> java.util.Comparator: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ConfidenceScoreTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> ghidra.feature.vt.api.main.VTScore: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnDescription(self) -> unicode: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...

        @property
        def columnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...




    class AppliedMarkupStatusTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> ghidra.feature.vt.api.main.VTMatch: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...

        @property
        def columnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...




    class LengthDeltaTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> int: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...




    class StatusTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> ghidra.feature.vt.gui.util.MungedAssocationAndMarkupItemStatus: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...




    class DestinationLabelTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> ghidra.feature.vt.gui.provider.matchtable.DisplayableLabel: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...

        @property
        def columnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...




    class SourceNamespaceTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> unicode: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...




    class DestinationNamespaceTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> unicode: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...




    class SourceLabelSourceTypeTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> unicode: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...




    class TagTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> unicode: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...




    class DestinationAddressComparator(object, java.util.Comparator):




        def __init__(self): ...



        @overload
        def compare(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.feature.vt.api.main.VTMatch) -> int: ...

        @overload
        def compare(self, __a0: object, __a1: object) -> int: ...

        @overload
        @staticmethod
        def comparing(__a0: java.util.function.Function) -> java.util.Comparator: ...

        @overload
        @staticmethod
        def comparing(__a0: java.util.function.Function, __a1: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def comparingDouble(__a0: java.util.function.ToDoubleFunction) -> java.util.Comparator: ...

        @staticmethod
        def comparingInt(__a0: java.util.function.ToIntFunction) -> java.util.Comparator: ...

        @staticmethod
        def comparingLong(__a0: java.util.function.ToLongFunction) -> java.util.Comparator: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        @staticmethod
        def naturalOrder() -> java.util.Comparator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def nullsFirst(__a0: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def nullsLast(__a0: java.util.Comparator) -> java.util.Comparator: ...

        @staticmethod
        def reverseOrder() -> java.util.Comparator: ...

        def reversed(self) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.Comparator) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.function.Function) -> java.util.Comparator: ...

        @overload
        def thenComparing(self, __a0: java.util.function.Function, __a1: java.util.Comparator) -> java.util.Comparator: ...

        def thenComparingDouble(self, __a0: java.util.function.ToDoubleFunction) -> java.util.Comparator: ...

        def thenComparingInt(self, __a0: java.util.function.ToIntFunction) -> java.util.Comparator: ...

        def thenComparingLong(self, __a0: java.util.function.ToLongFunction) -> java.util.Comparator: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ScoreTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> ghidra.feature.vt.api.main.VTScore: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnDescription(self) -> unicode: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...

        @property
        def columnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...




    class DestinationLabelSourceTypeTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> unicode: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...




    class DestinationLengthTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> int: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...




    class MatchTypeTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> unicode: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnDescription(self) -> unicode: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...




    class MultipleDestinationLabelsTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> List[ghidra.program.model.symbol.Symbol]: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...

        @property
        def columnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...




    class RelatedMatchCountColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> int: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnDescription(self) -> unicode: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...




    class AlgorithmTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> unicode: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...




    class MultipleSourceLabelsTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> List[ghidra.program.model.symbol.Symbol]: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...

        @property
        def columnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...




    class DestinationAddressTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> ghidra.feature.vt.gui.provider.markuptable.DisplayableListingAddress: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...

        @property
        def columnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...




    class AppliedMarkupStatusBatteryTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> ghidra.feature.vt.api.main.VTMatch: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...

        @property
        def columnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...




    class SourceLabelTableColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> ghidra.feature.vt.gui.provider.matchtable.DisplayableLabel: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...

        @property
        def columnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...




    class ImpliedMatchCountColumn(ghidra.util.table.field.AbstractProgramBasedDynamicTableColumn):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColumnClass(self) -> java.lang.Class: ...

        def getColumnDescription(self) -> unicode: ...

        def getColumnDisplayName(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

        def getColumnName(self) -> unicode: ...

        def getColumnPreferredWidth(self) -> int: ...

        def getColumnRenderer(self) -> ghidra.util.table.column.GColumnRenderer: ...

        def getComparator(self) -> java.util.Comparator: ...

        def getMaxLines(self, __a0: ghidra.docking.settings.Settings) -> int: ...

        def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

        def getSupportedRowType(self) -> java.lang.Class: ...

        def getUniqueIdentifier(self) -> unicode: ...

        @overload
        def getValue(self, __a0: ghidra.feature.vt.api.main.VTMatch, __a1: ghidra.docking.settings.Settings, __a2: ghidra.program.model.listing.Program, __a3: ghidra.framework.plugintool.ServiceProvider) -> int: ...

        @overload
        def getValue(self, __a0: object, __a1: ghidra.docking.settings.Settings, __a2: object, __a3: ghidra.framework.plugintool.ServiceProvider) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def columnDescription(self) -> unicode: ...

        @property
        def columnName(self) -> unicode: ...

        @property
        def columnPreferredWidth(self) -> int: ...

    def __init__(self, __a0: unicode, __a1: ghidra.feature.vt.gui.plugin.VTController): ...



    def addFilter(self, __a0: ghidra.feature.vt.gui.filters.Filter) -> None: ...

    def addInitialLoadListener(self, __a0: docking.widgets.table.threaded.ThreadedTableModelListener) -> None: ...

    def addObject(self, __a0: object) -> None: ...

    def addSortListener(self, __a0: docking.widgets.table.SortListener) -> None: ...

    def addTableModelListener(self, __a0: javax.swing.event.TableModelListener) -> None: ...

    def addThreadedTableModelListener(self, __a0: docking.widgets.table.threaded.ThreadedTableModelListener) -> None: ...

    def cancelAllUpdates(self) -> None: ...

    def clearData(self) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def findColumn(self, __a0: unicode) -> int: ...

    def fireTableCellUpdated(self, __a0: int, __a1: int) -> None: ...

    def fireTableChanged(self, __a0: javax.swing.event.TableModelEvent) -> None: ...

    def fireTableDataChanged(self) -> None: ...

    def fireTableRowsDeleted(self, __a0: int, __a1: int) -> None: ...

    def fireTableRowsInserted(self, __a0: int, __a1: int) -> None: ...

    def fireTableRowsUpdated(self, __a0: int, __a1: int) -> None: ...

    def fireTableStructureChanged(self) -> None: ...

    @staticmethod
    def from(__a0: javax.swing.table.TableModel) -> docking.widgets.table.VariableColumnTableModel: ...

    def getAddress(self, __a0: int) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getColumn(self, __a0: int) -> docking.widgets.table.DynamicTableColumn: ...

    def getColumnClass(self, __a0: int) -> java.lang.Class: ...

    def getColumnCount(self) -> int: ...

    def getColumnDescription(self, __a0: int) -> unicode: ...

    def getColumnDisplayName(self, __a0: int) -> unicode: ...

    @overload
    def getColumnIndex(self, __a0: docking.widgets.table.DynamicTableColumn) -> int: ...

    @overload
    def getColumnIndex(self, __a0: java.lang.Class) -> int: ...

    def getColumnName(self, __a0: int) -> unicode: ...

    def getColumnSettings(self, __a0: int) -> ghidra.docking.settings.Settings: ...

    def getColumnSettingsDefinitions(self, __a0: int) -> List[ghidra.docking.settings.SettingsDefinition]: ...

    def getColumnValueForRow(self, __a0: object, __a1: int) -> object: ...

    def getDataSource(self) -> object: ...

    def getDefaultColumnCount(self) -> int: ...

    def getLastSelectedObjects(self) -> List[object]: ...

    def getListeners(self, __a0: java.lang.Class) -> List[java.util.EventListener]: ...

    def getMaxLines(self, __a0: int) -> int: ...

    def getModelData(self) -> List[object]: ...

    def getModelIndex(self, __a0: object) -> int: ...

    def getModelRow(self, __a0: int) -> int: ...

    def getName(self) -> unicode: ...

    def getPendingSortState(self) -> docking.widgets.table.TableSortState: ...

    def getPreferredColumnWidth(self, __a0: int) -> int: ...

    def getPrimarySortColumnIndex(self) -> int: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getProgramLocation(self, __a0: int, __a1: int) -> ghidra.program.util.ProgramLocation: ...

    def getProgramSelection(self, __a0: List[int]) -> ghidra.program.util.ProgramSelection: ...

    def getRenderer(self, __a0: int) -> javax.swing.table.TableCellRenderer: ...

    def getRowCount(self) -> int: ...

    def getRowIndex(self, __a0: object) -> int: ...

    def getRowObject(self, __a0: int) -> object: ...

    def getRowObjects(self, __a0: List[int]) -> List[object]: ...

    def getTableFilter(self) -> docking.widgets.table.TableFilter: ...

    def getTableModelListeners(self) -> List[javax.swing.event.TableModelListener]: ...

    def getTableSortState(self) -> docking.widgets.table.TableSortState: ...

    def getUnfilteredData(self) -> List[object]: ...

    def getUnfilteredRowCount(self) -> int: ...

    def getUniqueIdentifier(self, __a0: int) -> unicode: ...

    def getValueAt(self, __a0: int, __a1: int) -> object: ...

    def getViewIndex(self, __a0: object) -> int: ...

    def getViewRow(self, __a0: int) -> int: ...

    def hasFilter(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isBusy(self) -> bool: ...

    def isCellEditable(self, __a0: int, __a1: int) -> bool: ...

    def isDefaultColumn(self, __a0: int) -> bool: ...

    def isFiltered(self) -> bool: ...

    def isLoadIncrementally(self) -> bool: ...

    def isSortPending(self) -> bool: ...

    def isSortable(self, __a0: int) -> bool: ...

    def isSorted(self) -> bool: ...

    def isVisibleByDefault(self, __a0: int) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def reFilter(self) -> None: ...

    def reSort(self) -> None: ...

    def refresh(self) -> None: ...

    def reload(self) -> None: ...

    def removeObject(self, __a0: object) -> None: ...

    def removeTableModelListener(self, __a0: javax.swing.event.TableModelListener) -> None: ...

    def removeThreadedTableModelListener(self, __a0: docking.widgets.table.threaded.ThreadedTableModelListener) -> None: ...

    def sessionChanged(self) -> None: ...

    def setAllColumnSettings(self, __a0: List[ghidra.docking.settings.Settings]) -> None: ...

    def setIncrementalTaskMonitor(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

    def setLastSelectedObjects(self, __a0: List[object]) -> None: ...

    def setProgram(self, __a0: ghidra.program.model.listing.Program) -> None: ...

    def setTableFilter(self, __a0: docking.widgets.table.TableFilter) -> None: ...

    def setTableSortState(self, __a0: docking.widgets.table.TableSortState) -> None: ...

    def setValueAt(self, __a0: object, __a1: int, __a2: int) -> None: ...

    def stateChanged(self, __a0: javax.swing.event.ChangeEvent) -> None: ...

    def toString(self) -> unicode: ...

    @staticmethod
    def unwrap(__a0: javax.swing.table.TableModel) -> javax.swing.table.TableModel: ...

    def updateFilter(self) -> None: ...

    def updateObject(self, __a0: object) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
