from typing import Iterator
from typing import List
import ghidra.program.model.listing
import java.lang
import java.util
import java.util.function


class DataIterator(java.util.Iterator, java.lang.Iterable, object):
    """
    Interface to define an iterator over over some set of Data.
    """

    EMPTY: ghidra.program.model.listing.DataIterator = ghidra.program.model.listing.DataIterator$IteratorWrapper@5433d286




    class IteratorWrapper(object, ghidra.program.model.listing.DataIterator):
        EMPTY: ghidra.program.model.listing.DataIterator = ghidra.program.model.listing.DataIterator$IteratorWrapper@5433d286





        def __iter__(self) -> Iterator[object]: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def forEachRemaining(self, __a0: java.util.function.Consumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def hasNext(self) -> bool: ...

        def hashCode(self) -> int: ...

        def iterator(self) -> java.util.Iterator: ...

        def next(self) -> object: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def of(__a0: List[ghidra.program.model.listing.Data]) -> ghidra.program.model.listing.DataIterator: ...

        def remove(self) -> None: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...





    def __iter__(self) -> Iterator[ghidra.program.model.listing.Data]: ...

    def equals(self, __a0: object) -> bool: ...

    def forEach(self, __a0: java.util.function.Consumer) -> None: ...

    def forEachRemaining(self, __a0: java.util.function.Consumer) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def hasNext(self) -> bool: ...

    def hashCode(self) -> int: ...

    def iterator(self) -> Iterator[ghidra.program.model.listing.Data]: ...

    def next(self) -> ghidra.program.model.listing.Data: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def of(dataInstances: List[ghidra.program.model.listing.Data]) -> ghidra.program.model.listing.DataIterator:
        """
        Create a DataIterator that returns a sequence of the specified items.
        @param dataInstances variable length list of items that will be iterated
        @return new Iterator
        """
        ...

    def remove(self) -> None: ...

    def spliterator(self) -> java.util.Spliterator: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
