from typing import List
import ghidra.bitpatterns.info
import ghidra.util.bytesearch
import java.io
import java.lang


class PatternInfoRowObject(object):




    def __init__(self, __a0: ghidra.bitpatterns.info.PatternType, __a1: ghidra.util.bytesearch.DittedBitSequence, __a2: ghidra.bitpatterns.info.ContextRegisterFilter): ...



    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def exportXMLFile(__a0: List[object], __a1: java.io.File, __a2: int, __a3: int) -> None: ...

    def getAlignment(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getContextRegisterFilter(self) -> ghidra.bitpatterns.info.ContextRegisterFilter: ...

    def getDittedBitSequence(self) -> ghidra.util.bytesearch.DittedBitSequence: ...

    def getNote(self) -> unicode: ...

    def getPatternType(self) -> ghidra.bitpatterns.info.PatternType: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setAlignment(self, __a0: int) -> None: ...

    def setNote(self, __a0: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def alignment(self) -> int: ...

    @alignment.setter
    def alignment(self, value: int) -> None: ...

    @property
    def contextRegisterFilter(self) -> ghidra.bitpatterns.info.ContextRegisterFilter: ...

    @property
    def dittedBitSequence(self) -> ghidra.util.bytesearch.DittedBitSequence: ...

    @property
    def note(self) -> unicode: ...

    @note.setter
    def note(self, value: unicode) -> None: ...

    @property
    def patternType(self) -> ghidra.bitpatterns.info.PatternType: ...
