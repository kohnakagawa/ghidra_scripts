from typing import List
import ghidra.app.util.bin
import ghidra.program.model.data
import java.lang


class BTreeHeaderRecord(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType = char
    BYTE: ghidra.program.model.data.DataType = byte
    DWORD: ghidra.program.model.data.DataType = dword
    IBO32: ghidra.program.model.data.DataType = ImageBaseOffset32
    POINTER: ghidra.program.model.data.DataType = pointer
    QWORD: ghidra.program.model.data.DataType = qword
    STRING: ghidra.program.model.data.DataType = string
    UTF16: ghidra.program.model.data.DataType = unicode
    UTF8: ghidra.program.model.data.DataType = string-utf8
    VOID: ghidra.program.model.data.DataType = void
    WORD: ghidra.program.model.data.DataType = word







    def equals(self, __a0: object) -> bool: ...

    def getAttributes(self) -> int: ...

    def getBtreeType(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getClumpSize(self) -> int: ...

    def getFirstLeafNode(self) -> int: ...

    def getFreeNodes(self) -> int: ...

    def getKeyCompareType(self) -> int: ...

    def getLastLeafNode(self) -> int: ...

    def getLeafRecords(self) -> int: ...

    def getMaxKeyLength(self) -> int: ...

    def getNodeSize(self) -> int: ...

    def getReserved(self) -> List[int]: ...

    def getReserved1(self) -> int: ...

    def getRootNode(self) -> int: ...

    def getTotalNodes(self) -> int: ...

    def getTreeDepth(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def attributes(self) -> int: ...

    @property
    def btreeType(self) -> int: ...

    @property
    def clumpSize(self) -> int: ...

    @property
    def firstLeafNode(self) -> int: ...

    @property
    def freeNodes(self) -> int: ...

    @property
    def keyCompareType(self) -> int: ...

    @property
    def lastLeafNode(self) -> int: ...

    @property
    def leafRecords(self) -> int: ...

    @property
    def maxKeyLength(self) -> int: ...

    @property
    def nodeSize(self) -> int: ...

    @property
    def reserved(self) -> List[int]: ...

    @property
    def reserved1(self) -> int: ...

    @property
    def rootNode(self) -> int: ...

    @property
    def totalNodes(self) -> int: ...

    @property
    def treeDepth(self) -> int: ...
