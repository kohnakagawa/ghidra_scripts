from typing import List
import ghidra.app.context
import ghidra.app.plugin.core.function
import ghidra.app.services
import ghidra.framework.model
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.framework.plugintool.util
import ghidra.program.model.data
import java.lang
import java.util


class FunctionPlugin(ghidra.framework.plugintool.Plugin, ghidra.app.services.DataService):
    FUNCTION_MENU_PULLRIGHT: unicode = u'Function'
    FUNCTION_MENU_SUBGROUP: unicode = u'Function'
    FUNCTION_SUBGROUP_BEGINNING: unicode = u'A_Beginning'
    FUNCTION_SUBGROUP_MIDDLE: unicode = u'M_Middle'
    SET_DATA_TYPE_PULLRIGHT: unicode = u'Set Data Type'
    STACK_MENU_SUBGROUP: unicode = u'Stack'
    THUNK_FUNCTION_MENU_SUBGROUP: unicode = u'FunctionThunk'
    VARIABLE_MENU_PULLRIGHT: unicode = u'Function Variables'
    VARIABLE_MENU_SUBGROUP: unicode = u'FunctionVariable'



    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def acceptData(self, __a0: List[ghidra.framework.model.DomainFile]) -> bool: ...

    @overload
    def createData(self, __a0: ghidra.program.model.data.DataType, __a1: ghidra.app.context.ListingActionContext, __a2: bool) -> bool: ...

    @overload
    def createData(self, __a0: ghidra.program.model.data.DataType, __a1: ghidra.app.context.ListingActionContext, __a2: bool, __a3: bool) -> bool: ...

    def dataStateRestoreCompleted(self) -> None: ...

    def dependsUpon(self, __a0: ghidra.framework.plugintool.Plugin) -> bool: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def eventSent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def firePluginEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getData(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getDataTypeManagerService(self) -> ghidra.app.services.DataTypeManagerService: ...

    def getFunctions(self, __a0: ghidra.app.context.ListingActionContext) -> java.util.Iterator: ...

    def getMissingRequiredServices(self) -> List[object]: ...

    def getName(self) -> unicode: ...

    def getPluginDescription(self) -> ghidra.framework.plugintool.util.PluginDescription: ...

    @staticmethod
    def getPluginName(__a0: java.lang.Class) -> unicode: ...

    def getSupportedDataTypes(self) -> List[java.lang.Class]: ...

    def getTool(self) -> ghidra.framework.plugintool.PluginTool: ...

    def getTransientState(self) -> object: ...

    def getUndoRedoState(self, __a0: ghidra.framework.model.DomainObject) -> object: ...

    def getVariableCommentDialog(self) -> ghidra.app.plugin.core.function.VariableCommentDialog: ...

    def hasMissingRequiredService(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isCreateDataAllowed(self, __a0: ghidra.app.context.ListingActionContext) -> bool: ...

    def isCreateFunctionAllowed(self, __a0: ghidra.app.context.ListingActionContext, __a1: bool, __a2: bool) -> bool: ...

    def isDisposed(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def processEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def readDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def restoreTransientState(self, __a0: object) -> None: ...

    def restoreUndoRedoState(self, __a0: ghidra.framework.model.DomainObject, __a1: object) -> None: ...

    def serviceAdded(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def serviceRemoved(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @property
    def dataTypeManagerService(self) -> ghidra.app.services.DataTypeManagerService: ...

    @property
    def variableCommentDialog(self) -> ghidra.app.plugin.core.function.VariableCommentDialog: ...
