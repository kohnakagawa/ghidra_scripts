from typing import List
import ghidra.framework.model
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.framework.plugintool.util
import ghidra.program.model.symbol
import ghidra.util.task
import java.lang


class SelectByFlowPlugin(ghidra.framework.plugintool.Plugin, ghidra.framework.options.OptionsChangeListener):
    SELECT_ALL_FLOWS_FROM: int
    SELECT_ALL_FLOWS_TO: int
    SELECT_DEAD_SUBROUTINES: int
    SELECT_FUNCTIONS: int
    SELECT_LIMITED_FLOWS_FROM: int
    SELECT_LIMITED_FLOWS_TO: int
    SELECT_SUBROUTINES: int




    class SelectByFlowTask(ghidra.util.task.Task):








        def addTaskListener(self, __a0: ghidra.util.task.TaskListener) -> None: ...

        def canCancel(self) -> bool: ...

        def cancel(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getStatusTextAlignment(self) -> int: ...

        def getTaskTitle(self) -> unicode: ...

        def hasProgress(self) -> bool: ...

        def hashCode(self) -> int: ...

        def isModal(self) -> bool: ...

        def monitoredRun(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def run(self, __a0: ghidra.util.task.TaskMonitor) -> None: ...

        def setHasProgress(self, __a0: bool) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def acceptData(self, __a0: List[ghidra.framework.model.DomainFile]) -> bool: ...

    def dataStateRestoreCompleted(self) -> None: ...

    def dependsUpon(self, __a0: ghidra.framework.plugintool.Plugin) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def eventSent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def firePluginEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getData(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getFlowTypesNotToFollow(self) -> List[ghidra.program.model.symbol.FlowType]: ...

    def getMissingRequiredServices(self) -> List[object]: ...

    def getName(self) -> unicode: ...

    def getPluginDescription(self) -> ghidra.framework.plugintool.util.PluginDescription: ...

    @staticmethod
    def getPluginName(__a0: java.lang.Class) -> unicode: ...

    def getSupportedDataTypes(self) -> List[java.lang.Class]: ...

    def getTool(self) -> ghidra.framework.plugintool.PluginTool: ...

    def getTransientState(self) -> object: ...

    def getUndoRedoState(self, __a0: ghidra.framework.model.DomainObject) -> object: ...

    def hasMissingRequiredService(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isDisposed(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def optionsChanged(self, __a0: ghidra.framework.options.ToolOptions, __a1: unicode, __a2: object, __a3: object) -> None: ...

    def processEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def readDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def restoreTransientState(self, __a0: object) -> None: ...

    def restoreUndoRedoState(self, __a0: ghidra.framework.model.DomainObject, __a1: object) -> None: ...

    def serviceAdded(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def serviceRemoved(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @property
    def flowTypesNotToFollow(self) -> List[ghidra.program.model.symbol.FlowType]: ...
