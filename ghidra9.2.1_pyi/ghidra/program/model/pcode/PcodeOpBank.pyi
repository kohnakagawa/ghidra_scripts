from typing import Iterator
import ghidra.program.model.address
import ghidra.program.model.pcode
import java.lang


class PcodeOpBank(object):
    """
    Container for PcodeOpAST's
    """





    def __init__(self): ...



    def allAlive(self) -> Iterator[object]:
        """
        Returns iterator containing both PcodeOpAST and {@literal Iterator<PcodeOp>} objects.
        """
        ...

    def allDead(self) -> Iterator[object]:
        """
        Returns iterator containing both PcodeOpAST and {@literal Iterator<PcodeOp>} objects.
        """
        ...

    @overload
    def allOrdered(self) -> Iterator[ghidra.program.model.pcode.PcodeOpAST]: ...

    @overload
    def allOrdered(self, pc: ghidra.program.model.address.Address) -> Iterator[ghidra.program.model.pcode.PcodeOpAST]: ...

    def changeOpcode(self, op: ghidra.program.model.pcode.PcodeOp, newopc: int) -> None: ...

    def clear(self) -> None: ...

    @overload
    def create(self, opcode: int, numinputs: int, pc: ghidra.program.model.address.Address) -> ghidra.program.model.pcode.PcodeOp: ...

    @overload
    def create(self, opcode: int, numinputs: int, sq: ghidra.program.model.pcode.SequenceNumber) -> ghidra.program.model.pcode.PcodeOp: ...

    def destroy(self, op: ghidra.program.model.pcode.PcodeOp) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def findOp(self, num: ghidra.program.model.pcode.SequenceNumber) -> ghidra.program.model.pcode.PcodeOp: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    def markAlive(self, op: ghidra.program.model.pcode.PcodeOp) -> None: ...

    def markDead(self, op: ghidra.program.model.pcode.PcodeOp) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def size(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def empty(self) -> bool: ...
