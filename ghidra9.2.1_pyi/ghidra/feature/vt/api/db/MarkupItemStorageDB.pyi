import db
import ghidra.feature.vt.api.impl
import ghidra.feature.vt.api.main
import ghidra.feature.vt.api.markuptype
import ghidra.feature.vt.api.util
import ghidra.program.database
import ghidra.program.model.address
import ghidra.util
import java.lang


class MarkupItemStorageDB(ghidra.program.database.DatabaseObject, ghidra.feature.vt.api.impl.MarkupItemStorage):








    def checkDeleted(self) -> None: ...

    @overload
    def checkIsValid(self) -> bool: ...

    @overload
    def checkIsValid(self, __a0: db.Record) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getAssociation(self) -> ghidra.feature.vt.api.main.VTAssociation: ...

    def getClass(self) -> java.lang.Class: ...

    def getDestinationAddress(self) -> ghidra.program.model.address.Address: ...

    def getDestinationAddressSource(self) -> unicode: ...

    def getDestinationValue(self) -> ghidra.feature.vt.api.util.Stringable: ...

    def getKey(self) -> long: ...

    def getMarkupType(self) -> ghidra.feature.vt.api.markuptype.VTMarkupType: ...

    def getSourceAddress(self) -> ghidra.program.model.address.Address: ...

    def getSourceValue(self) -> ghidra.feature.vt.api.util.Stringable: ...

    def getStatus(self) -> ghidra.feature.vt.api.main.VTMarkupItemStatus: ...

    def getStatusDescription(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def isDeleted(self) -> bool: ...

    def isInvalid(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def reset(self) -> ghidra.feature.vt.api.impl.MarkupItemStorage: ...

    def setApplyFailed(self, __a0: unicode) -> ghidra.feature.vt.api.impl.MarkupItemStorage: ...

    def setDestinationAddress(self, __a0: ghidra.program.model.address.Address, __a1: unicode) -> ghidra.feature.vt.api.impl.MarkupItemStorage: ...

    def setInvalid(self) -> None: ...

    def setSourceDestinationValues(self, __a0: ghidra.feature.vt.api.util.Stringable, __a1: ghidra.feature.vt.api.util.Stringable) -> None: ...

    def setStatus(self, __a0: ghidra.feature.vt.api.main.VTMarkupItemStatus) -> ghidra.feature.vt.api.impl.MarkupItemStorage: ...

    def toString(self) -> unicode: ...

    def validate(self, __a0: ghidra.util.Lock) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def applyFailed(self) -> None: ...  # No getter available.

    @applyFailed.setter
    def applyFailed(self, value: unicode) -> None: ...

    @property
    def association(self) -> ghidra.feature.vt.api.main.VTAssociation: ...

    @property
    def destinationAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def destinationAddressSource(self) -> unicode: ...

    @property
    def destinationValue(self) -> ghidra.feature.vt.api.util.Stringable: ...

    @property
    def markupType(self) -> ghidra.feature.vt.api.markuptype.VTMarkupType: ...

    @property
    def sourceAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def sourceValue(self) -> ghidra.feature.vt.api.util.Stringable: ...

    @property
    def status(self) -> ghidra.feature.vt.api.main.VTMarkupItemStatus: ...

    @status.setter
    def status(self, value: ghidra.feature.vt.api.main.VTMarkupItemStatus) -> None: ...

    @property
    def statusDescription(self) -> unicode: ...
