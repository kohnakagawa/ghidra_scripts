import ghidra.app.cmd.data
import ghidra.app.util.demangler
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.listing
import ghidra.program.model.scalar
import ghidra.program.model.symbol
import java.lang


class TypeDescriptorModel(ghidra.app.cmd.data.AbstractCreateDataTypeModel):
    DATA_TYPE_NAME: unicode = u'TypeDescriptor'



    def __init__(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.Address, __a2: ghidra.app.util.datatype.microsoft.DataValidationOptions): ...



    def checkAgainstMaxCount(self, __a0: unicode, __a1: int, __a2: int) -> None: ...

    def checkEntryCount(self, __a0: unicode, __a1: int, __a2: int) -> None: ...

    def checkNonNegative(self, __a0: unicode, __a1: int) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    @staticmethod
    def getBaseAddress(__a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.Address) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getComponentAddressOfTypeName(self) -> ghidra.program.model.address.Address: ...

    def getCount(self) -> int: ...

    @overload
    def getDataType(self) -> ghidra.program.model.data.DataType: ...

    @overload
    @staticmethod
    def getDataType(__a0: ghidra.program.model.listing.Program) -> ghidra.program.model.data.DataType: ...

    def getDemangledTypeDescriptor(self) -> unicode: ...

    def getDescriptorAsNamespace(self) -> ghidra.program.model.symbol.Namespace: ...

    def getDescriptorName(self) -> unicode: ...

    def getDescriptorTypeNamespace(self) -> unicode: ...

    def getHashValue(self) -> ghidra.program.model.scalar.Scalar: ...

    def getName(self) -> unicode: ...

    def getNameOffset(self) -> int: ...

    def getParentNamespace(self) -> ghidra.app.util.demangler.DemangledType: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getRefType(self) -> unicode: ...

    def getSpareDataAddress(self) -> ghidra.program.model.address.Address: ...

    def getSpareDataOffset(self) -> int: ...

    def getTypeName(self) -> unicode: ...

    def getVFTableAddress(self) -> ghidra.program.model.address.Address: ...

    def getVFTableAddressOffset(self) -> int: ...

    def hashCode(self) -> int: ...

    def isBlockedByInstructions(self) -> bool: ...

    def isDataTypeAlreadyBasedOnCount(self) -> bool: ...

    def isLoadedAndInitializedAddress(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def validate(self) -> None: ...

    @overload
    def validate(self, __a0: ghidra.program.model.address.Address) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def VFTableAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def VFTableAddressOffset(self) -> int: ...

    @property
    def componentAddressOfTypeName(self) -> ghidra.program.model.address.Address: ...

    @property
    def dataType(self) -> ghidra.program.model.data.DataType: ...

    @property
    def demangledTypeDescriptor(self) -> unicode: ...

    @property
    def descriptorAsNamespace(self) -> ghidra.program.model.symbol.Namespace: ...

    @property
    def descriptorName(self) -> unicode: ...

    @property
    def descriptorTypeNamespace(self) -> unicode: ...

    @property
    def hashValue(self) -> ghidra.program.model.scalar.Scalar: ...

    @property
    def name(self) -> unicode: ...

    @property
    def nameOffset(self) -> int: ...

    @property
    def parentNamespace(self) -> ghidra.app.util.demangler.DemangledType: ...

    @property
    def refType(self) -> unicode: ...

    @property
    def spareDataAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def spareDataOffset(self) -> int: ...

    @property
    def typeName(self) -> unicode: ...
