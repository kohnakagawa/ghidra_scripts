from typing import List
import ghidra.app.plugin.core.analysis
import ghidra.framework.options
import ghidra.program.model.listing
import java.lang


class StoredAnalyzerTimes(object, ghidra.framework.options.CustomOption):
    CUSTOM_OPTION_CLASS_NAME_KEY: unicode = u'CUSTOM_OPTION_CLASS'
    OPTIONS_LIST: unicode = u'Program Information.Analysis Times'
    OPTION_NAME: unicode = u'Times'



    def __init__(self): ...



    def addTime(self, __a0: unicode, __a1: long) -> None: ...

    @overload
    def clear(self) -> None: ...

    @overload
    def clear(self, __a0: unicode) -> None: ...

    def clone(self) -> object: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    @staticmethod
    def getStoredAnalyzerTimes(__a0: ghidra.program.model.listing.Program) -> ghidra.app.plugin.core.analysis.StoredAnalyzerTimes: ...

    def getTaskNames(self) -> List[unicode]: ...

    def getTime(self, __a0: unicode) -> long: ...

    def getTotalTime(self) -> long: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @staticmethod
    def setStoredAnalyzerTimes(__a0: ghidra.program.model.listing.Program, __a1: ghidra.app.plugin.core.analysis.StoredAnalyzerTimes) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @property
    def empty(self) -> bool: ...

    @property
    def taskNames(self) -> List[unicode]: ...

    @property
    def totalTime(self) -> long: ...
