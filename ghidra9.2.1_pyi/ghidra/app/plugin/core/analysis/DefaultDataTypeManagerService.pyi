from typing import List
import ghidra.app.plugin.core.datamgr.archive
import ghidra.app.services
import ghidra.program.model.data
import ghidra.program.model.listing
import ghidra.util
import java.io
import java.lang
import java.util
import javax.swing.tree


class DefaultDataTypeManagerService(object, ghidra.app.services.DataTypeManagerService):




    def __init__(self): ...



    def addDataTypeManagerChangeListener(self, __a0: ghidra.program.model.data.DataTypeManagerChangeListener) -> None: ...

    def closeArchive(self, __a0: ghidra.program.model.data.DataTypeManager) -> None: ...

    def edit(self, __a0: ghidra.program.model.data.DataType) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getBuiltInDataTypesManager(self) -> ghidra.program.model.data.DataTypeManager: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    def getDataType(self, __a0: unicode) -> ghidra.program.model.data.DataType: ...

    @overload
    def getDataType(self, __a0: javax.swing.tree.TreePath) -> ghidra.program.model.data.DataType: ...

    def getDataTypeManagers(self) -> List[ghidra.program.model.data.DataTypeManager]: ...

    def getEditorHelpLocation(self, __a0: ghidra.program.model.data.DataType) -> ghidra.util.HelpLocation: ...

    def getFavorites(self) -> List[object]: ...

    def getPossibleEquateNames(self, __a0: long) -> java.util.Set: ...

    def getRecentlyUsed(self) -> ghidra.program.model.data.DataType: ...

    def getSortedDataTypeList(self) -> List[object]: ...

    def hashCode(self) -> int: ...

    def isEditable(self, __a0: ghidra.program.model.data.DataType) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def openArchive(self, __a0: ghidra.program.model.listing.DataTypeArchive) -> ghidra.app.plugin.core.datamgr.archive.Archive: ...

    @overload
    def openArchive(self, __a0: java.io.File, __a1: bool) -> ghidra.app.plugin.core.datamgr.archive.Archive: ...

    def openDataTypeArchive(self, __a0: unicode) -> ghidra.program.model.data.DataTypeManager: ...

    def removeDataTypeManagerChangeListener(self, __a0: ghidra.program.model.data.DataTypeManagerChangeListener) -> None: ...

    def setDataTypeSelected(self, __a0: ghidra.program.model.data.DataType) -> None: ...

    def setRecentlyUsed(self, __a0: ghidra.program.model.data.DataType) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def builtInDataTypesManager(self) -> ghidra.program.model.data.DataTypeManager: ...

    @property
    def dataTypeManagers(self) -> List[ghidra.program.model.data.DataTypeManager]: ...

    @property
    def dataTypeSelected(self) -> None: ...  # No getter available.

    @dataTypeSelected.setter
    def dataTypeSelected(self, value: ghidra.program.model.data.DataType) -> None: ...

    @property
    def favorites(self) -> List[object]: ...

    @property
    def recentlyUsed(self) -> ghidra.program.model.data.DataType: ...

    @recentlyUsed.setter
    def recentlyUsed(self, value: ghidra.program.model.data.DataType) -> None: ...

    @property
    def sortedDataTypeList(self) -> List[object]: ...
