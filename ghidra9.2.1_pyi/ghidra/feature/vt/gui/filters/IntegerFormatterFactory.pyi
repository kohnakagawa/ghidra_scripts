import java.lang
import javax.swing
import javax.swing.text


class IntegerFormatterFactory(javax.swing.text.DefaultFormatterFactory):




    @overload
    def __init__(self, __a0: bool): ...

    @overload
    def __init__(self, __a0: docking.widgets.textfield.IntegerFormatter, __a1: bool): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDefaultFormatter(self) -> javax.swing.JFormattedTextField.AbstractFormatter: ...

    def getDisplayFormatter(self) -> javax.swing.JFormattedTextField.AbstractFormatter: ...

    def getEditFormatter(self) -> javax.swing.JFormattedTextField.AbstractFormatter: ...

    def getFormatter(self, __a0: javax.swing.JFormattedTextField) -> javax.swing.JFormattedTextField.AbstractFormatter: ...

    def getNullFormatter(self) -> javax.swing.JFormattedTextField.AbstractFormatter: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setDefaultFormatter(self, __a0: javax.swing.JFormattedTextField.AbstractFormatter) -> None: ...

    def setDisplayFormatter(self, __a0: javax.swing.JFormattedTextField.AbstractFormatter) -> None: ...

    def setEditFormatter(self, __a0: javax.swing.JFormattedTextField.AbstractFormatter) -> None: ...

    def setNullFormatter(self, __a0: javax.swing.JFormattedTextField.AbstractFormatter) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
