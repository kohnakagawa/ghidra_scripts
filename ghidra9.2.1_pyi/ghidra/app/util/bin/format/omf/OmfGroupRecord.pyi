import ghidra.app.util.bin
import ghidra.app.util.bin.format.omf
import ghidra.program.model.address
import ghidra.program.model.lang
import java.lang
import java.util


class OmfGroupRecord(ghidra.app.util.bin.format.omf.OmfRecord):





    class GroupSubrecord(object):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def read(__a0: ghidra.app.util.bin.BinaryReader) -> ghidra.app.util.bin.format.omf.OmfGroupRecord.GroupSubrecord: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, reader: ghidra.app.util.bin.BinaryReader): ...



    def calcCheckSum(self, reader: ghidra.app.util.bin.BinaryReader) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddress(self, language: ghidra.program.model.lang.Language) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getFrameDatum(self) -> int:
        """
        This is the segment selector needed for this object
        @return
        """
        ...

    def getName(self) -> unicode: ...

    def getRecordLength(self) -> int: ...

    def getRecordType(self) -> int: ...

    def getSegmentComponentType(self, i: int) -> int: ...

    def getSegmentIndex(self, i: int) -> int: ...

    def getStartAddress(self) -> long: ...

    def hasBigFields(self) -> bool: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def numSegments(self) -> int: ...

    def readCheckSumByte(self, reader: ghidra.app.util.bin.BinaryReader) -> None: ...

    @staticmethod
    def readIndex(reader: ghidra.app.util.bin.BinaryReader) -> int: ...

    @staticmethod
    def readInt1Or2(reader: ghidra.app.util.bin.BinaryReader, isBig: bool) -> int: ...

    @staticmethod
    def readInt2Or4(reader: ghidra.app.util.bin.BinaryReader, isBig: bool) -> int: ...

    @staticmethod
    def readRecord(reader: ghidra.app.util.bin.BinaryReader) -> ghidra.app.util.bin.format.omf.OmfRecord: ...

    def readRecordHeader(self, reader: ghidra.app.util.bin.BinaryReader) -> None: ...

    @staticmethod
    def readString(reader: ghidra.app.util.bin.BinaryReader) -> unicode:
        """
        Read the OMF string format,  1-byte length, followed by that many ascii characters
        @param reader
        @return
        @throws IOException
        """
        ...

    def resolveNames(self, __a0: java.util.ArrayList) -> None: ...

    def setStartAddress(self, val: long) -> None: ...

    def toString(self) -> unicode: ...

    def validCheckSum(self, reader: ghidra.app.util.bin.BinaryReader) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def frameDatum(self) -> int: ...

    @property
    def name(self) -> unicode: ...

    @property
    def startAddress(self) -> long: ...

    @startAddress.setter
    def startAddress(self, value: long) -> None: ...
