from typing import List
import generic.jar
import ghidra
import ghidra.util.task
import java.io
import java.lang


class GhidraJarBuilder(object, ghidra.GhidraLaunchable):




    @overload
    def __init__(self): ...

    @overload
    def __init__(self, __a0: List[object]): ...



    def addAllModules(self) -> None: ...

    def addExcludedFileExtension(self, excludedExtension: unicode) -> None: ...

    def addFileFilter(self, filter: java.io.FileFilter) -> None: ...

    def addModule(self, name: unicode) -> bool: ...

    def addModuleToJar(self, module: generic.jar.ApplicationModule) -> None: ...

    def buildJar(self, outputFile: java.io.File, extraBinDir: java.io.File, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    def buildSrcZip(self, outputFile: java.io.File, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllModules(self) -> List[generic.jar.ApplicationModule]: ...

    def getClass(self) -> java.lang.Class: ...

    def getExcludedModules(self) -> List[generic.jar.ApplicationModule]: ...

    def getIncludedModules(self) -> List[generic.jar.ApplicationModule]: ...

    def getModule(self, name: unicode) -> generic.jar.ApplicationModule: ...

    def hashCode(self) -> int: ...

    def isModuleIncluded(self, moduleName: unicode) -> bool: ...

    def launch(self, layout: ghidra.GhidraApplicationLayout, args: List[unicode]) -> None:
        """
        Entry point for buildGhidraJar.bat.
        """
        ...

    @staticmethod
    def main(args: List[unicode]) -> None:
        """
        Entry point for 'gradle buildGhidraJar'.
        """
        ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeAllProcessorModules(self) -> None: ...

    def removeModule(self, name: unicode) -> bool: ...

    def setExcludeHelp(self, excludeHelp: bool) -> None: ...

    def setMainClass(self, mainClass: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def allModules(self) -> List[object]: ...

    @property
    def excludeHelp(self) -> None: ...  # No getter available.

    @excludeHelp.setter
    def excludeHelp(self, value: bool) -> None: ...

    @property
    def excludedModules(self) -> List[object]: ...

    @property
    def includedModules(self) -> List[object]: ...

    @property
    def mainClass(self) -> None: ...  # No getter available.

    @mainClass.setter
    def mainClass(self, value: unicode) -> None: ...
