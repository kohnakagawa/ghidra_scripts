from typing import List
import docking.widgets.autocomplete
import ghidra
import ghidra.app.plugin.core.assembler
import ghidra.program.model.lang
import ghidra.program.util
import java.awt
import java.awt.event
import java.lang
import javax.swing


class AssemblyDualTextField(object):





    class AssemblyDualTextFieldDemo(object, ghidra.GhidraLaunchable):
        ADDR_FORMAT: unicode
        DEMO_LANG_ID: ghidra.program.model.lang.LanguageID



        def __init__(self, __a0: ghidra.app.plugin.core.assembler.AssemblyDualTextField): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def launch(self, __a0: ghidra.GhidraApplicationLayout, __a1: List[unicode]) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AssemblyCompletion(object, java.lang.Comparable):




        def __init__(self, __a0: unicode, __a1: unicode, __a2: java.awt.Color, __a3: int): ...



        @overload
        def compareTo(self, __a0: ghidra.app.plugin.core.assembler.AssemblyDualTextField.AssemblyCompletion) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getCanDefault(self) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getColor(self) -> java.awt.Color: ...

        def getDisplay(self) -> unicode: ...

        def getText(self) -> unicode: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def canDefault(self) -> bool: ...

        @property
        def color(self) -> java.awt.Color: ...

        @property
        def display(self) -> unicode: ...

        @property
        def text(self) -> unicode: ...




    class VisibilityMode(java.lang.Enum):
        DUAL_VISIBLE: ghidra.app.plugin.core.assembler.AssemblyDualTextField.VisibilityMode = DUAL_VISIBLE
        INVISIBLE: ghidra.app.plugin.core.assembler.AssemblyDualTextField.VisibilityMode = INVISIBLE
        SINGLE_VISIBLE: ghidra.app.plugin.core.assembler.AssemblyDualTextField.VisibilityMode = SINGLE_VISIBLE







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.assembler.AssemblyDualTextField.VisibilityMode: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.assembler.AssemblyDualTextField.VisibilityMode]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self): ...



    def addFocusListener(self, __a0: java.awt.event.FocusListener) -> None: ...

    def addKeyListener(self, __a0: java.awt.event.KeyListener) -> None: ...

    def clear(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAssemblyField(self) -> javax.swing.JTextField: ...

    def getAutocompleter(self) -> docking.widgets.autocomplete.TextFieldAutocompleter: ...

    def getClass(self) -> java.lang.Class: ...

    def getMnemonicField(self) -> javax.swing.JTextField: ...

    def getOperandsField(self) -> javax.swing.JTextField: ...

    def getText(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setCaretPosition(self, __a0: int) -> None: ...

    def setLanguageLocation(self, __a0: ghidra.program.model.lang.Language, __a1: long) -> None: ...

    def setProgramLocation(self, __a0: ghidra.program.util.ProgramLocation) -> None: ...

    def setText(self, __a0: unicode) -> None: ...

    def setVisible(self, __a0: ghidra.app.plugin.core.assembler.AssemblyDualTextField.VisibilityMode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def assemblyField(self) -> javax.swing.JTextField: ...

    @property
    def autocompleter(self) -> docking.widgets.autocomplete.TextFieldAutocompleter: ...

    @property
    def caretPosition(self) -> None: ...  # No getter available.

    @caretPosition.setter
    def caretPosition(self, value: int) -> None: ...

    @property
    def mnemonicField(self) -> javax.swing.JTextField: ...

    @property
    def operandsField(self) -> javax.swing.JTextField: ...

    @property
    def programLocation(self) -> None: ...  # No getter available.

    @programLocation.setter
    def programLocation(self, value: ghidra.program.util.ProgramLocation) -> None: ...

    @property
    def text(self) -> unicode: ...

    @text.setter
    def text(self, value: unicode) -> None: ...

    @property
    def visible(self) -> None: ...  # No getter available.

    @visible.setter
    def visible(self, value: ghidra.app.plugin.core.assembler.AssemblyDualTextField.VisibilityMode) -> None: ...
