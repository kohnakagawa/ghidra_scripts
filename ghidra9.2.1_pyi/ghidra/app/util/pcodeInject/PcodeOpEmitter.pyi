from typing import List
import ghidra.program.model.pcode
import java.lang


class PcodeOpEmitter(object):




    def __init__(self, __a0: ghidra.app.plugin.processors.sleigh.SleighLanguage, __a1: ghidra.program.model.address.Address, __a2: long): ...



    def defineTemp(self, __a0: unicode, __a1: int) -> None: ...

    def emitAssignConstantToRegister(self, __a0: unicode, __a1: int) -> None: ...

    def emitAssignRegisterFromPcodeOpCall(self, __a0: unicode, __a1: unicode, __a2: List[unicode]) -> None: ...

    def emitAssignVarnodeFromDereference(self, __a0: unicode, __a1: int, __a2: unicode) -> None: ...

    def emitAssignVarnodeFromPcodeOpCall(self, __a0: unicode, __a1: int, __a2: unicode, __a3: List[unicode]) -> None: ...

    def emitIndirectCall(self, __a0: unicode) -> None: ...

    def emitPopCat1Value(self, __a0: unicode) -> None: ...

    def emitPopCat2Value(self, __a0: unicode) -> None: ...

    def emitPushCat1Value(self, __a0: unicode) -> None: ...

    def emitPushCat2Value(self, __a0: unicode) -> None: ...

    def emitSignExtension(self, __a0: unicode, __a1: int, __a2: unicode) -> None: ...

    def emitTruncate(self, __a0: unicode, __a1: int, __a2: unicode) -> None: ...

    def emitVoidPcodeOpCall(self, __a0: unicode, __a1: List[unicode]) -> None: ...

    def emitWriteToMemory(self, __a0: unicode, __a1: int, __a2: unicode, __a3: unicode) -> None: ...

    def emitZeroExtension(self, __a0: unicode, __a1: int, __a2: unicode) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getPcodeOps(self) -> List[ghidra.program.model.pcode.PcodeOp]: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def pcodeOps(self) -> List[ghidra.program.model.pcode.PcodeOp]: ...
