from typing import List
import generic.stl
import ghidra.pcodeCPort.context
import ghidra.pcodeCPort.semantics
import ghidra.pcodeCPort.space
import ghidra.pcodeCPort.translate
import java.io
import java.lang
import org.jdom


class ConstTpl(object):





    class const_type(java.lang.Enum):
        handle: ghidra.pcodeCPort.semantics.ConstTpl.const_type = handle
        j_curspace: ghidra.pcodeCPort.semantics.ConstTpl.const_type = j_curspace
        j_curspace_size: ghidra.pcodeCPort.semantics.ConstTpl.const_type = j_curspace_size
        j_flowdest: ghidra.pcodeCPort.semantics.ConstTpl.const_type = j_flowdest
        j_flowdest_size: ghidra.pcodeCPort.semantics.ConstTpl.const_type = j_flowdest_size
        j_flowref: ghidra.pcodeCPort.semantics.ConstTpl.const_type = j_flowref
        j_flowref_size: ghidra.pcodeCPort.semantics.ConstTpl.const_type = j_flowref_size
        j_next: ghidra.pcodeCPort.semantics.ConstTpl.const_type = j_next
        j_relative: ghidra.pcodeCPort.semantics.ConstTpl.const_type = j_relative
        j_start: ghidra.pcodeCPort.semantics.ConstTpl.const_type = j_start
        real: ghidra.pcodeCPort.semantics.ConstTpl.const_type = real
        spaceid: ghidra.pcodeCPort.semantics.ConstTpl.const_type = spaceid







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.pcodeCPort.semantics.ConstTpl.const_type: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.pcodeCPort.semantics.ConstTpl.const_type]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class v_field(java.lang.Enum):
        v_offset: ghidra.pcodeCPort.semantics.ConstTpl.v_field = v_offset
        v_offset_plus: ghidra.pcodeCPort.semantics.ConstTpl.v_field = v_offset_plus
        v_size: ghidra.pcodeCPort.semantics.ConstTpl.v_field = v_size
        v_space: ghidra.pcodeCPort.semantics.ConstTpl.v_field = v_space







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.pcodeCPort.semantics.ConstTpl.v_field: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.pcodeCPort.semantics.ConstTpl.v_field]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    @overload
    def __init__(self): ...

    @overload
    def __init__(self, __a0: ghidra.pcodeCPort.semantics.ConstTpl): ...

    @overload
    def __init__(self, __a0: ghidra.pcodeCPort.semantics.ConstTpl.const_type): ...

    @overload
    def __init__(self, __a0: ghidra.pcodeCPort.space.AddrSpace): ...

    @overload
    def __init__(self, __a0: ghidra.pcodeCPort.semantics.ConstTpl.const_type, __a1: long): ...

    @overload
    def __init__(self, __a0: ghidra.pcodeCPort.semantics.ConstTpl.const_type, __a1: int, __a2: ghidra.pcodeCPort.semantics.ConstTpl.v_field): ...

    @overload
    def __init__(self, __a0: ghidra.pcodeCPort.semantics.ConstTpl.const_type, __a1: int, __a2: ghidra.pcodeCPort.semantics.ConstTpl.v_field, __a3: long): ...



    def changeHandleIndex(self, __a0: generic.stl.VectorSTL) -> None: ...

    def compareTo(self, __a0: ghidra.pcodeCPort.semantics.ConstTpl) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def fillinOffset(self, __a0: ghidra.pcodeCPort.context.FixedHandle, __a1: ghidra.pcodeCPort.context.ParserWalker) -> None: ...

    def fillinSpace(self, __a0: ghidra.pcodeCPort.context.FixedHandle, __a1: ghidra.pcodeCPort.context.ParserWalker) -> None: ...

    def fix(self, __a0: ghidra.pcodeCPort.context.ParserWalker) -> long: ...

    def fixSpace(self, __a0: ghidra.pcodeCPort.context.ParserWalker) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getClass(self) -> java.lang.Class: ...

    def getHandleIndex(self) -> int: ...

    def getReal(self) -> long: ...

    def getSelect(self) -> ghidra.pcodeCPort.semantics.ConstTpl.v_field: ...

    def getSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getType(self) -> ghidra.pcodeCPort.semantics.ConstTpl.const_type: ...

    def hashCode(self) -> int: ...

    def isConstSpace(self) -> bool: ...

    def isUniqueSpace(self) -> bool: ...

    def isZero(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def restoreXml(self, __a0: org.jdom.Element, __a1: ghidra.pcodeCPort.translate.Translate) -> None: ...

    def saveXml(self, __a0: java.io.PrintStream) -> None: ...

    def toString(self) -> unicode: ...

    def transfer(self, __a0: generic.stl.VectorSTL) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def constSpace(self) -> bool: ...

    @property
    def handleIndex(self) -> int: ...

    @property
    def real(self) -> long: ...

    @property
    def select(self) -> ghidra.pcodeCPort.semantics.ConstTpl.v_field: ...

    @property
    def space(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    @property
    def type(self) -> ghidra.pcodeCPort.semantics.ConstTpl.const_type: ...

    @property
    def uniqueSpace(self) -> bool: ...

    @property
    def zero(self) -> bool: ...
