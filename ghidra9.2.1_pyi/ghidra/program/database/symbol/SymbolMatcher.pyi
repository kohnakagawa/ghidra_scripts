import java.lang
import java.util.function


class SymbolMatcher(object, java.util.function.Predicate):








    def and(self, __a0: java.util.function.Predicate) -> java.util.function.Predicate: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def isEqual(__a0: object) -> java.util.function.Predicate: ...

    def negate(self) -> java.util.function.Predicate: ...

    @staticmethod
    def not(__a0: java.util.function.Predicate) -> java.util.function.Predicate: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def or(self, __a0: java.util.function.Predicate) -> java.util.function.Predicate: ...

    def test(self, __a0: object) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
