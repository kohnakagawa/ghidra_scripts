import ghidra.docking.settings
import ghidra.program.model.data
import java.lang


class DataTypeComponentDB(object, ghidra.program.model.data.InternalDataTypeComponent):
    """
    Database implementation for a DataTypeComponent. If this
     component is for an undefined data type, then the record object is
     null.
    """









    def equals(self, obj: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getComment(self) -> unicode: ...

    def getDataType(self) -> ghidra.program.model.data.DataType: ...

    def getDefaultFieldName(self) -> unicode: ...

    def getDefaultSettings(self) -> ghidra.docking.settings.Settings: ...

    def getEndOffset(self) -> int: ...

    def getFieldName(self) -> unicode: ...

    def getLength(self) -> int: ...

    def getOffset(self) -> int: ...

    def getOrdinal(self) -> int: ...

    def getParent(self) -> ghidra.program.model.data.Composite: ...

    def hashCode(self) -> int: ...

    def isBitFieldComponent(self) -> bool: ...

    def isEquivalent(self, dtc: ghidra.program.model.data.DataTypeComponent) -> bool: ...

    def isFlexibleArrayComponent(self) -> bool: ...

    def isZeroBitFieldComponent(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setComment(self, comment: unicode) -> None: ...

    def setDataType(self, newDt: ghidra.program.model.data.DataType) -> None: ...

    def setDefaultSettings(self, settings: ghidra.docking.settings.Settings) -> None: ...

    def setFieldName(self, name: unicode) -> None: ...

    def toString(self) -> unicode: ...

    def update(self, newOrdinal: int, newOffset: int, newLength: int) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
