import generic.stl
import ghidra.pcodeCPort.address
import ghidra.pcodeCPort.pcoderaw
import ghidra.pcodeCPort.sleighbase
import ghidra.pcodeCPort.slghsymbol
import ghidra.pcodeCPort.space
import ghidra.pcodeCPort.translate
import ghidra.pcodeCPort.xml
import java.io
import java.lang
import org.jdom


class SleighBase(ghidra.pcodeCPort.translate.Translate, ghidra.pcodeCPort.sleighbase.NamedSymbolProvider):
    SLA_FORMAT_VERSION: int = 2



    def __init__(self): ...



    def addRegister(self, __a0: unicode, __a1: ghidra.pcodeCPort.space.AddrSpace, __a2: long, __a3: int) -> None: ...

    def addSpacebase(self, __a0: ghidra.pcodeCPort.space.AddrSpace, __a1: ghidra.pcodeCPort.space.AddrSpace, __a2: long, __a3: int) -> None: ...

    def allowContextSet(self, __a0: bool) -> None: ...

    def assignShortcut(self, __a0: ghidra.pcodeCPort.space.spacetype) -> int: ...

    def createConstFromSpace(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> ghidra.pcodeCPort.address.Address: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def findSymbol(self, __a0: int) -> ghidra.pcodeCPort.slghsymbol.SleighSymbol: ...

    @overload
    def findSymbol(self, __a0: unicode) -> ghidra.pcodeCPort.slghsymbol.SleighSymbol: ...

    def getAddrSize(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getConstant(self, __a0: long) -> ghidra.pcodeCPort.address.Address: ...

    def getConstantSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getDefaultSize(self) -> int: ...

    def getDefaultSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getFspecSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getIopSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getNextSpaceInOrder(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getRegister(self, __a0: unicode) -> ghidra.pcodeCPort.pcoderaw.VarnodeData: ...

    def getRegisterName(self, __a0: ghidra.pcodeCPort.space.AddrSpace, __a1: long, __a2: int) -> unicode: ...

    def getSpace(self, __a0: int) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getSpaceByName(self, __a0: unicode) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getSpaceByShortcut(self, __a0: int) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getSpaceBySpacebase(self, __a0: ghidra.pcodeCPort.address.Address, __a1: int) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getSpacebase(self, __a0: ghidra.pcodeCPort.space.AddrSpace, __a1: int) -> ghidra.pcodeCPort.pcoderaw.VarnodeData: ...

    def getStackSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getUniqueBase(self) -> long: ...

    def getUniqueSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getUserOpNames(self, __a0: generic.stl.VectorSTL) -> None: ...

    def hashCode(self) -> int: ...

    def highPtrPossible(self, __a0: ghidra.pcodeCPort.address.Address, __a1: int) -> bool: ...

    def initialize(self, __a0: ghidra.pcodeCPort.xml.DocumentStorage) -> None: ...

    def insertSpace(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> None: ...

    def instructionLength(self, __a0: ghidra.pcodeCPort.address.Address) -> int: ...

    def isBigEndian(self) -> bool: ...

    def isInitialized(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def numSpacebase(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> int: ...

    def numSpaces(self) -> int: ...

    def parseNoHighPtr(self, __a0: org.jdom.Element) -> None: ...

    def parseSpacebase(self, __a0: org.jdom.Element) -> None: ...

    def parseStackPointer(self, __a0: org.jdom.Element) -> None: ...

    def printAssembly(self, __a0: java.io.PrintStream, __a1: int, __a2: ghidra.pcodeCPort.address.Address) -> int: ...

    def saveXml(self, __a0: java.io.PrintStream) -> None: ...

    def setContextDefault(self, __a0: unicode, __a1: int) -> None: ...

    def setDefaultSpace(self, __a0: int) -> None: ...

    def setLanguage(self, __a0: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def initialized(self) -> bool: ...
