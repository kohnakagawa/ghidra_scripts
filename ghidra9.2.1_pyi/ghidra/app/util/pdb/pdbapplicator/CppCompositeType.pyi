import ghidra.app.util.pdb.pdbapplicator
import ghidra.program.model.data
import ghidra.util.task
import java.lang


class CppCompositeType(object):




    def __init__(self, __a0: ghidra.program.model.data.Composite, __a1: unicode): ...



    @overload
    def addDirectBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: int) -> None: ...

    @overload
    def addDirectBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes, __a2: int) -> None: ...

    @overload
    def addDirectSyntacticBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType) -> None: ...

    @overload
    def addDirectSyntacticBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes) -> None: ...

    @overload
    def addDirectVirtualBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: int, __a2: ghidra.program.model.data.DataType, __a3: int) -> None: ...

    @overload
    def addDirectVirtualBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes, __a2: int, __a3: ghidra.program.model.data.DataType, __a4: int) -> None: ...

    @overload
    def addIndirectVirtualBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: int, __a2: ghidra.program.model.data.DataType, __a3: int) -> None: ...

    @overload
    def addIndirectVirtualBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes, __a2: int, __a3: ghidra.program.model.data.DataType, __a4: int) -> None: ...

    @overload
    def addMember(self, __a0: unicode, __a1: ghidra.program.model.data.DataType, __a2: bool, __a3: int) -> None: ...

    @overload
    def addMember(self, __a0: unicode, __a1: ghidra.program.model.data.DataType, __a2: bool, __a3: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes, __a4: int) -> None: ...

    @overload
    def addMember(self, __a0: unicode, __a1: ghidra.program.model.data.DataType, __a2: bool, __a3: int, __a4: unicode) -> None: ...

    @overload
    def addMember(self, __a0: unicode, __a1: ghidra.program.model.data.DataType, __a2: bool, __a3: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes, __a4: int, __a5: unicode) -> None: ...

    @overload
    def addStaticMember(self, __a0: unicode, __a1: ghidra.program.model.data.DataType) -> None: ...

    @overload
    def addStaticMember(self, __a0: unicode, __a1: ghidra.program.model.data.DataType, __a2: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes) -> None: ...

    @overload
    def addSyntacticBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType) -> None: ...

    @overload
    def addSyntacticBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes) -> None: ...

    def addVirtualFunctionTablePointer(self, __a0: unicode, __a1: ghidra.program.model.data.DataType, __a2: int) -> None: ...

    @overload
    def addVirtualSyntacticBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType) -> None: ...

    @overload
    def addVirtualSyntacticBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes) -> None: ...

    @overload
    @staticmethod
    def createCppClassType(__a0: ghidra.program.model.data.Composite, __a1: unicode) -> ghidra.app.util.pdb.pdbapplicator.CppCompositeType.CppClassType: ...

    @overload
    @staticmethod
    def createCppClassType(__a0: ghidra.program.model.data.Composite, __a1: unicode, __a2: unicode, __a3: int) -> ghidra.app.util.pdb.pdbapplicator.CppCompositeType.CppClassType: ...

    @overload
    @staticmethod
    def createCppStructType(__a0: ghidra.program.model.data.Composite, __a1: unicode) -> ghidra.app.util.pdb.pdbapplicator.CppCompositeType.CppStructType: ...

    @overload
    @staticmethod
    def createCppStructType(__a0: ghidra.program.model.data.Composite, __a1: unicode, __a2: unicode, __a3: int) -> ghidra.app.util.pdb.pdbapplicator.CppCompositeType.CppStructType: ...

    def createLayout(self, __a0: ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout, __a1: ghidra.app.util.pdb.pdbapplicator.VbtManager, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def createLayoutFromSyntacticDescription(self, __a0: ghidra.app.util.pdb.pdbapplicator.VbtManager, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def createSpeculativeLayout(self, __a0: ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout, __a1: ghidra.app.util.pdb.pdbapplicator.VbtManager, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def createVbtBasedLayout(self, __a0: ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout, __a1: ghidra.app.util.pdb.pdbapplicator.VbtManager, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getLayout(self, __a0: ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout) -> ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout: ...

    def getMangledName(self) -> unicode: ...

    def getName(self) -> unicode: ...

    def getNumLayoutBaseClasses(self) -> int: ...

    def getNumLayoutMembers(self) -> int: ...

    def getNumLayoutVirtualBaseClasses(self) -> int: ...

    def getNumMembers(self) -> int: ...

    def getNumSyntacticBaseClasses(self) -> int: ...

    def getSize(self) -> int: ...

    def getType(self) -> ghidra.app.util.pdb.pdbapplicator.CppCompositeType.Type: ...

    def hashCode(self) -> int: ...

    @overload
    def insertDirectSyntacticBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: int) -> None: ...

    @overload
    def insertDirectSyntacticBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes, __a2: int) -> None: ...

    @overload
    def insertMember(self, __a0: unicode, __a1: ghidra.program.model.data.DataType, __a2: bool, __a3: int) -> None: ...

    @overload
    def insertMember(self, __a0: unicode, __a1: ghidra.program.model.data.DataType, __a2: bool, __a3: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes, __a4: int) -> None: ...

    @overload
    def insertMember(self, __a0: unicode, __a1: ghidra.program.model.data.DataType, __a2: bool, __a3: int, __a4: unicode) -> None: ...

    @overload
    def insertMember(self, __a0: unicode, __a1: ghidra.program.model.data.DataType, __a2: bool, __a3: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes, __a4: int, __a5: unicode) -> None: ...

    @overload
    def insertSyntacticBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: int) -> None: ...

    @overload
    def insertSyntacticBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes, __a2: int) -> None: ...

    @overload
    def insertVirtualSyntacticBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: int) -> None: ...

    @overload
    def insertVirtualSyntacticBaseClass(self, __a0: ghidra.app.util.pdb.pdbapplicator.CppCompositeType, __a1: ghidra.app.util.pdb.pdbapplicator.CppCompositeType.ClassFieldAttributes, __a2: int) -> None: ...

    def isFinal(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setClass(self) -> None: ...

    def setFinal(self, __a0: bool) -> None: ...

    def setMangledName(self, __a0: unicode) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setSize(self, __a0: int) -> None: ...

    def setStruct(self) -> None: ...

    def setUnion(self) -> None: ...

    def toString(self) -> unicode: ...

    def validate(self) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def final(self) -> bool: ...

    @final.setter
    def final(self, value: bool) -> None: ...

    @property
    def mangledName(self) -> unicode: ...

    @mangledName.setter
    def mangledName(self, value: unicode) -> None: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def numLayoutBaseClasses(self) -> int: ...

    @property
    def numLayoutMembers(self) -> int: ...

    @property
    def numLayoutVirtualBaseClasses(self) -> int: ...

    @property
    def numMembers(self) -> int: ...

    @property
    def numSyntacticBaseClasses(self) -> int: ...

    @property
    def size(self) -> int: ...

    @size.setter
    def size(self, value: int) -> None: ...

    @property
    def type(self) -> ghidra.app.util.pdb.pdbapplicator.CppCompositeType.Type: ...
