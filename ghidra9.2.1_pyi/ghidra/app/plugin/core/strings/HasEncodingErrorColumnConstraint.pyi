import docking.widgets.table.constraint
import docking.widgets.table.constrainteditor
import ghidra.app.plugin.core.strings
import ghidra.program.model.data
import java.lang


class HasEncodingErrorColumnConstraint(ghidra.app.plugin.core.strings.StringDataInstanceColumnConstraint):




    def __init__(self): ...



    @overload
    def accepts(self, __a0: ghidra.program.model.data.StringDataInstance, __a1: docking.widgets.table.constraint.TableFilterContext) -> bool: ...

    @overload
    def accepts(self, __a0: object, __a1: docking.widgets.table.constraint.TableFilterContext) -> bool: ...

    def asString(self) -> unicode: ...

    @overload
    def compareTo(self, __a0: docking.widgets.table.constraint.ColumnConstraint) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getColumnType(self) -> java.lang.Class: ...

    def getConstraintValueString(self) -> unicode: ...

    def getConstraintValueTooltip(self) -> unicode: ...

    def getEditor(self, __a0: docking.widgets.table.constraint.ColumnData) -> docking.widgets.table.constrainteditor.ColumnConstraintEditor: ...

    def getGroup(self) -> unicode: ...

    def getName(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def parseConstraintValue(self, __a0: unicode, __a1: object) -> docking.widgets.table.constraint.ColumnConstraint: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def name(self) -> unicode: ...
