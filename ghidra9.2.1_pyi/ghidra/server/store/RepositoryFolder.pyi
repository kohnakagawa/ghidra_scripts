from typing import List
import db.buffers
import ghidra.server.store
import java.lang


class RepositoryFolder(object):




    def __init__(self, __a0: ghidra.server.Repository, __a1: ghidra.framework.store.local.LocalFileSystem): ...



    def createDatabase(self, __a0: unicode, __a1: unicode, __a2: int, __a3: unicode, __a4: unicode, __a5: unicode) -> db.buffers.LocalManagedBufferFile: ...

    def createFolder(self, __a0: unicode, __a1: unicode) -> ghidra.server.store.RepositoryFolder: ...

    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getFile(self, __a0: unicode) -> ghidra.server.store.RepositoryFile: ...

    def getFiles(self) -> List[ghidra.server.store.RepositoryFile]: ...

    def getFolder(self, __a0: unicode) -> ghidra.server.store.RepositoryFolder: ...

    def getFolders(self) -> List[ghidra.server.store.RepositoryFolder]: ...

    def getName(self) -> unicode: ...

    def getParent(self) -> ghidra.server.store.RepositoryFolder: ...

    def getPathname(self) -> unicode: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def makePathname(__a0: unicode, __a1: unicode) -> unicode: ...

    def moveTo(self, __a0: ghidra.server.store.RepositoryFolder, __a1: unicode, __a2: unicode) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def pathChanged(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def files(self) -> List[ghidra.server.store.RepositoryFile]: ...

    @property
    def folders(self) -> List[ghidra.server.store.RepositoryFolder]: ...

    @property
    def name(self) -> unicode: ...

    @property
    def parent(self) -> ghidra.server.store.RepositoryFolder: ...

    @property
    def pathname(self) -> unicode: ...
