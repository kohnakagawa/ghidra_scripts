from typing import Iterator
import java.lang
import java.util
import javax.tools
import javax.tools.JavaFileManager
import javax.tools.JavaFileObject


class ResourceFileJavaFileManager(object, javax.tools.JavaFileManager):
    """
    A JavaFileManager that works with Ghidra's ResourceFiles.

     This class is used to dynamically compile Ghidra scripts.
    """





    def __init__(self, __a0: List[object], __a1: java.util.Set): ...



    def close(self) -> None: ...

    def contains(self, location: javax.tools.JavaFileManager.Location, fo: javax.tools.FileObject) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def flush(self) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getClassLoader(self, location: javax.tools.JavaFileManager.Location) -> java.lang.ClassLoader: ...

    def getFileForInput(self, location: javax.tools.JavaFileManager.Location, packageName: unicode, relativeName: unicode) -> javax.tools.FileObject: ...

    def getFileForOutput(self, location: javax.tools.JavaFileManager.Location, packageName: unicode, relativeName: unicode, sibling: javax.tools.FileObject) -> javax.tools.FileObject: ...

    def getJavaFileForInput(self, location: javax.tools.JavaFileManager.Location, className: unicode, kind: javax.tools.JavaFileObject.Kind) -> javax.tools.JavaFileObject: ...

    def getJavaFileForOutput(self, location: javax.tools.JavaFileManager.Location, className: unicode, kind: javax.tools.JavaFileObject.Kind, sibling: javax.tools.FileObject) -> javax.tools.JavaFileObject: ...

    @overload
    def getLocationForModule(self, location: javax.tools.JavaFileManager.Location, moduleName: unicode) -> javax.tools.JavaFileManager.Location: ...

    @overload
    def getLocationForModule(self, location: javax.tools.JavaFileManager.Location, fo: javax.tools.JavaFileObject) -> javax.tools.JavaFileManager.Location: ...

    def getServiceLoader(self, location: javax.tools.JavaFileManager.Location, service: java.lang.Class) -> java.util.ServiceLoader: ...

    def handleOption(self, current: unicode, remaining: Iterator[unicode]) -> bool: ...

    def hasLocation(self, location: javax.tools.JavaFileManager.Location) -> bool: ...

    def hashCode(self) -> int: ...

    def inferBinaryName(self, location: javax.tools.JavaFileManager.Location, file: javax.tools.JavaFileObject) -> unicode: ...

    def inferModuleName(self, location: javax.tools.JavaFileManager.Location) -> unicode: ...

    def isSameFile(self, a: javax.tools.FileObject, b: javax.tools.FileObject) -> bool: ...

    def isSupportedOption(self, option: unicode) -> int: ...

    def list(self, location: javax.tools.JavaFileManager.Location, packageName: unicode, kinds: java.util.Set, recurse: bool) -> java.lang.Iterable: ...

    def listLocationsForModules(self, location: javax.tools.JavaFileManager.Location) -> java.lang.Iterable: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
