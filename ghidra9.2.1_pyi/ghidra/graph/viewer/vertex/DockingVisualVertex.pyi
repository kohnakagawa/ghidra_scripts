import ghidra.graph.viewer.vertex
import java.awt
import java.awt.geom
import java.lang
import javax.swing


class DockingVisualVertex(ghidra.graph.viewer.vertex.AbstractVisualVertex):
    """
    A VisualVertex implementation that provides a component with a docking header that
     is clickable.
    """





    def __init__(self, name: unicode): ...



    def dispose(self) -> None: ...

    def equals(self, obj: object) -> bool: ...

    def getAlpha(self) -> float: ...

    def getClass(self) -> java.lang.Class: ...

    def getComponent(self) -> javax.swing.JComponent: ...

    def getEmphasis(self) -> float: ...

    def getLocation(self) -> java.awt.geom.Point2D: ...

    def getName(self) -> unicode: ...

    def getText(self) -> unicode: ...

    def getTextArea(self) -> javax.swing.JTextArea: ...

    def hashCode(self) -> int: ...

    def isFocused(self) -> bool: ...

    def isGrabbable(self, c: java.awt.Component) -> bool: ...

    def isHovered(self) -> bool: ...

    def isSelected(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setAlpha(self, alpha: float) -> None: ...

    def setEmphasis(self, emphasisLevel: float) -> None: ...

    def setFocused(self, focused: bool) -> None: ...

    def setHovered(self, hovered: bool) -> None: ...

    def setLocation(self, location: java.awt.geom.Point2D) -> None: ...

    def setMaxWidth(self, width: int) -> None: ...

    def setSelected(self, selected: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def component(self) -> javax.swing.JComponent: ...

    @property
    def focused(self) -> bool: ...

    @focused.setter
    def focused(self, value: bool) -> None: ...

    @property
    def maxWidth(self) -> None: ...  # No getter available.

    @maxWidth.setter
    def maxWidth(self, value: int) -> None: ...

    @property
    def name(self) -> unicode: ...

    @property
    def selected(self) -> bool: ...

    @selected.setter
    def selected(self, value: bool) -> None: ...

    @property
    def text(self) -> unicode: ...

    @property
    def textArea(self) -> javax.swing.JTextArea: ...
