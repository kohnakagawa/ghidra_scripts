import ghidra.app.util.bin.format.pdb2.pdbreader
import ghidra.app.util.bin.format.pdb2.pdbreader.symbol
import java.lang


class ExtraFrameAndProcedureInformationMsSymbol(ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractMsSymbol):
    PDB_ID: int = 4114



    def __init__(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb, __a1: ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader): ...



    def containsCfgChecksButNoWriteChecks(self) -> bool: ...

    def containsCfwChecksAndOrInstrumentation(self) -> bool: ...

    def couldNotDoStackOrderingWithGsBufferSecurityChecks(self) -> bool: ...

    def emit(self, __a0: java.lang.StringBuilder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getCalleeSaveRegistersByteCount(self) -> long: ...

    def getClass(self) -> java.lang.Class: ...

    def getExceptionHandlerOffset(self) -> long: ...

    def getExceptionHandlerSectionID(self) -> int: ...

    def getExplicitlyEncodedLocalBasePointer(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.RegisterName: ...

    def getExplicitlyEncodedParameterPointer(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.RegisterName: ...

    def getFlags(self) -> long: ...

    def getPadding(self) -> int: ...

    def getPaddingOffset(self) -> long: ...

    def getPdbId(self) -> int: ...

    def getProcedureFramePaddingLength(self) -> long: ...

    def getProcedureFrameTotalLength(self) -> long: ...

    def hasExceptionHandlingStates(self) -> bool: ...

    def hasGsBufferSecurityCheck(self) -> bool: ...

    def hashCode(self) -> int: ...

    def hasvalidPogoCounts(self) -> bool: ...

    def isCompiledWithAsyncExceptionHandling(self) -> bool: ...

    def isDeclspecNaked(self) -> bool: ...

    def isDeclspecSafeBuffers(self) -> bool: ...

    def isDeclspecStrictGsCheck(self) -> bool: ...

    def isOptimizedForSpeed(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    def usesAlloca(self) -> bool: ...

    def usesInlineAsm(self) -> bool: ...

    def usesLongJmp(self) -> bool: ...

    def usesSetJmp(self) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def wasCompiledWithPgoPgu(self) -> bool: ...

    def wasInlineSpec(self) -> bool: ...

    def wasInlinedWithinAnotherFunction(self) -> bool: ...

    def wasStructuredExceptionHandling(self) -> bool: ...

    @property
    def calleeSaveRegistersByteCount(self) -> long: ...

    @property
    def compiledWithAsyncExceptionHandling(self) -> bool: ...

    @property
    def declspecNaked(self) -> bool: ...

    @property
    def declspecSafeBuffers(self) -> bool: ...

    @property
    def declspecStrictGsCheck(self) -> bool: ...

    @property
    def exceptionHandlerOffset(self) -> long: ...

    @property
    def exceptionHandlerSectionID(self) -> int: ...

    @property
    def explicitlyEncodedLocalBasePointer(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.RegisterName: ...

    @property
    def explicitlyEncodedParameterPointer(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.RegisterName: ...

    @property
    def flags(self) -> long: ...

    @property
    def optimizedForSpeed(self) -> bool: ...

    @property
    def padding(self) -> int: ...

    @property
    def paddingOffset(self) -> long: ...

    @property
    def pdbId(self) -> int: ...

    @property
    def procedureFramePaddingLength(self) -> long: ...

    @property
    def procedureFrameTotalLength(self) -> long: ...
