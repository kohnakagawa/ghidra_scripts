from typing import List
import ghidra.closedpatternmining
import java.lang
import java.util


class ProjectedDatabase(object):




    @overload
    def __init__(self, __a0: ghidra.closedpatternmining.ProjectedDatabase, __a1: ghidra.closedpatternmining.SequenceItem): ...

    @overload
    def __init__(self, __a0: ghidra.closedpatternmining.SequenceDatabase, __a1: List[object]): ...



    def equals(self, __a0: object) -> bool: ...

    def getBackwardExtensionItems(self) -> java.util.Set: ...

    def getClass(self) -> java.lang.Class: ...

    def getDatabase(self) -> ghidra.closedpatternmining.SequenceDatabase: ...

    def getForwardExtensionItems(self, __a0: java.util.Set) -> java.util.Set: ...

    def getLocallyFrequentItems(self, __a0: java.util.Set, __a1: int) -> java.util.TreeSet: ...

    def getPrefix(self) -> List[object]: ...

    def getProjectedInfo(self) -> List[object]: ...

    def getSupport(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def backwardExtensionItems(self) -> java.util.Set: ...

    @property
    def database(self) -> ghidra.closedpatternmining.SequenceDatabase: ...

    @property
    def prefix(self) -> List[object]: ...

    @property
    def projectedInfo(self) -> List[object]: ...

    @property
    def support(self) -> int: ...
