import edu.uci.ics.jung.visualization
import ghidra.app.plugin.core.functiongraph.graph
import ghidra.app.plugin.core.functiongraph.graph.vertex
import ghidra.app.plugin.core.functiongraph.mvc
import ghidra.graph.job
import ghidra.graph.viewer
import ghidra.program.model.address
import ghidra.util.task
import java.awt
import java.awt.geom
import java.lang
import java.util
import javax.swing
import utility.function


class FGViewUpdater(ghidra.graph.viewer.VisualGraphViewUpdater):




    def __init__(self, __a0: ghidra.graph.viewer.GraphViewer, __a1: ghidra.graph.VisualGraph): ...



    def addJobScheduledListener(self, __a0: utility.function.Callback) -> None: ...

    def addToGroup(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController, __a1: ghidra.app.plugin.core.functiongraph.graph.vertex.GroupedFunctionGraphVertex, __a2: java.util.Set) -> None: ...

    def animateEdgeHover(self) -> None: ...

    def centerLayoutSpacePointWithoutAnimation(self, __a0: java.awt.Point) -> None: ...

    def centerViewSpacePointWithAnimation(self, __a0: java.awt.Point) -> None: ...

    def centerViewSpacePointWithoutAnimation(self, __a0: java.awt.Point) -> None: ...

    def dispose(self) -> None: ...

    def ensureVertexAreaVisible(self, __a0: ghidra.graph.viewer.VisualVertex, __a1: java.awt.Rectangle, __a2: ghidra.util.task.BusyListener) -> None: ...

    def ensureVertexVisible(self, __a0: ghidra.graph.viewer.VisualVertex, __a1: java.awt.Rectangle) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def fitAllGraphsToViewsNow(self) -> None: ...

    @overload
    def fitGraphToViewerLater(self) -> None: ...

    @overload
    def fitGraphToViewerLater(self, __a0: edu.uci.ics.jung.visualization.VisualizationServer) -> None: ...

    @overload
    def fitGraphToViewerNow(self) -> None: ...

    @overload
    def fitGraphToViewerNow(self, __a0: edu.uci.ics.jung.visualization.VisualizationServer) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    def groupSelectedVertices(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController) -> None: ...

    @overload
    def groupSelectedVertices(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController, __a1: java.awt.geom.Point2D) -> None: ...

    def groupVertices(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController, __a1: unicode, __a2: java.util.Set, __a3: java.awt.geom.Point2D) -> None: ...

    def hashCode(self) -> int: ...

    def installGroupVertex(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController, __a1: ghidra.app.plugin.core.functiongraph.graph.vertex.GroupedFunctionGraphVertex, __a2: java.awt.geom.Point2D) -> bool: ...

    def isAnimationEnabled(self) -> bool: ...

    def isBusy(self) -> bool: ...

    def isMutatingGraph(self) -> bool: ...

    def mergeVertexWithParent(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController, __a1: ghidra.app.plugin.core.functiongraph.graph.vertex.FGVertex) -> None: ...

    @overload
    def moveVertexToCenterTopWithAnimation(self, __a0: ghidra.graph.viewer.VisualVertex) -> None: ...

    @overload
    def moveVertexToCenterTopWithAnimation(self, __a0: ghidra.graph.viewer.VisualVertex, __a1: ghidra.util.task.BusyListener) -> None: ...

    def moveVertexToCenterTopWithoutAnimation(self, __a0: ghidra.graph.viewer.VisualVertex) -> None: ...

    @overload
    def moveVertexToCenterWithAnimation(self, __a0: ghidra.graph.viewer.VisualVertex) -> None: ...

    @overload
    def moveVertexToCenterWithAnimation(self, __a0: ghidra.graph.viewer.VisualVertex, __a1: ghidra.util.task.BusyListener) -> None: ...

    def moveVertexToCenterWithoutAnimation(self, __a0: ghidra.graph.viewer.VisualVertex) -> None: ...

    def moveViewerLocationWithoutAnimation(self, __a0: java.awt.Point) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def promptUserForGroupVertexText(self, __a0: javax.swing.JComponent, __a1: unicode, __a2: java.util.Set) -> unicode: ...

    def regroupVertices(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController, __a1: ghidra.app.plugin.core.functiongraph.graph.vertex.FGVertex) -> None: ...

    def relayoutGraph(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController) -> None: ...

    def scheduleViewChangeJob(self, __a0: ghidra.graph.job.GraphJob) -> None: ...

    def setGraphPerspective(self, __a0: ghidra.graph.viewer.GraphPerspectiveInfo) -> None: ...

    def setGraphScale(self, __a0: float) -> None: ...

    def setLayoutSpacePointWithAnimation(self, __a0: java.awt.Point) -> None: ...

    def setLayoutSpacePointWithoutAnimation(self, __a0: java.awt.geom.Point2D) -> None: ...

    def splitVertex(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController, __a1: ghidra.app.plugin.core.functiongraph.graph.vertex.FGVertex, __a2: ghidra.program.model.address.Address) -> None: ...

    def stopAllAnimation(self) -> None: ...

    def stopEdgeHoverAnimation(self) -> None: ...

    def toString(self) -> unicode: ...

    def twinkeVertex(self, __a0: ghidra.graph.viewer.VisualVertex) -> None: ...

    def ungroupAllVertices(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController) -> None: ...

    @overload
    def ungroupVertex(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController, __a1: ghidra.app.plugin.core.functiongraph.graph.vertex.GroupedFunctionGraphVertex) -> None: ...

    @overload
    def ungroupVertex(self, __a0: ghidra.app.plugin.core.functiongraph.mvc.FGController, __a1: ghidra.app.plugin.core.functiongraph.graph.vertex.GroupedFunctionGraphVertex, __a2: bool) -> None: ...

    def updateEdgeShapes(self, __a0: java.util.Collection) -> None: ...

    def updateEdgeVertexForUngrouping(self, __a0: ghidra.app.plugin.core.functiongraph.graph.FunctionGraph, __a1: ghidra.app.plugin.core.functiongraph.graph.vertex.GroupedFunctionGraphVertex, __a2: ghidra.app.plugin.core.functiongraph.graph.vertex.FGVertex) -> ghidra.app.plugin.core.functiongraph.graph.vertex.FGVertex: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @overload
    def zoomInCompletely(self) -> None: ...

    @overload
    def zoomInCompletely(self, __a0: ghidra.graph.viewer.VisualVertex) -> None: ...
