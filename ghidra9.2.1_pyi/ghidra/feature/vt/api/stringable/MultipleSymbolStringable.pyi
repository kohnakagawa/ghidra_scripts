from typing import List
import ghidra.feature.vt.api.util
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.model.symbol
import java.lang


class MultipleSymbolStringable(ghidra.feature.vt.api.util.Stringable):
    SHORT_NAME: unicode = u'MULTI_SYM'



    @overload
    def __init__(self): ...

    @overload
    def __init__(self, __a0: List[ghidra.program.model.symbol.Symbol]): ...

    @overload
    def __init__(self, __a0: List[object]): ...



    def contains(self, __a0: ghidra.program.model.symbol.Symbol) -> bool: ...

    def containsDynamic(self) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDisplayString(self) -> unicode: ...

    def getNames(self) -> List[unicode]: ...

    @staticmethod
    def getString(__a0: ghidra.feature.vt.api.util.Stringable, __a1: ghidra.program.model.listing.Program) -> unicode: ...

    @staticmethod
    def getStringable(__a0: unicode, __a1: ghidra.program.model.listing.Program) -> ghidra.feature.vt.api.util.Stringable: ...

    def hashCode(self) -> int: ...

    def isAllDynamic(self) -> bool: ...

    def isEmpty(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setSymbols(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.Address, __a2: bool) -> List[object]: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def allDynamic(self) -> bool: ...

    @property
    def displayString(self) -> unicode: ...

    @property
    def empty(self) -> bool: ...

    @property
    def names(self) -> List[unicode]: ...
