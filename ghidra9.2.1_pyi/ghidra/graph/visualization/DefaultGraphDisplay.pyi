import docking
import docking.action
import docking.widgets
import ghidra.service.graph
import ghidra.util.task
import java.awt.event
import java.lang
import java.util
import org.jungrapht.visualization


class DefaultGraphDisplay(object, ghidra.service.graph.GraphDisplay):
    ALIGN_CENTER: int = 1
    ALIGN_LEFT: int = 0
    ALIGN_RIGHT: int = 2







    def addAction(self, __a0: docking.action.DockingAction) -> None: ...

    def centerAndScale(self) -> None: ...

    def clear(self) -> None: ...

    def close(self) -> None: ...

    def createViewer(self) -> org.jungrapht.visualization.VisualizationViewer: ...

    def defineEdgeAttribute(self, __a0: unicode) -> None: ...

    def defineVertexAttribute(self, __a0: unicode) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getActionContext(self, __a0: java.awt.event.MouseEvent) -> docking.ActionContext: ...

    def getClass(self) -> java.lang.Class: ...

    def getFocusedVertex(self) -> ghidra.service.graph.AttributedVertex: ...

    def getGraph(self) -> ghidra.service.graph.AttributedGraph: ...

    def getGraphTitle(self) -> unicode: ...

    def getSelectedVertices(self) -> java.util.Set: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def selectVertices(self, __a0: java.util.Set, __a1: docking.widgets.EventTrigger) -> None: ...

    @overload
    def setFocusedVertex(self, __a0: ghidra.service.graph.AttributedVertex) -> None: ...

    @overload
    def setFocusedVertex(self, __a0: ghidra.service.graph.AttributedVertex, __a1: docking.widgets.EventTrigger) -> None: ...

    def setGraph(self, __a0: ghidra.service.graph.AttributedGraph, __a1: unicode, __a2: bool, __a3: ghidra.util.task.TaskMonitor) -> None: ...

    def setGraphDisplayListener(self, __a0: ghidra.service.graph.GraphDisplayListener) -> None: ...

    def setVertexLabel(self, __a0: unicode, __a1: int, __a2: int, __a3: bool, __a4: int) -> None: ...

    def toString(self) -> unicode: ...

    def updateVertexName(self, __a0: ghidra.service.graph.AttributedVertex, __a1: unicode) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def focusedVertex(self) -> ghidra.service.graph.AttributedVertex: ...

    @focusedVertex.setter
    def focusedVertex(self, value: ghidra.service.graph.AttributedVertex) -> None: ...

    @property
    def graph(self) -> ghidra.service.graph.AttributedGraph: ...

    @property
    def graphDisplayListener(self) -> None: ...  # No getter available.

    @graphDisplayListener.setter
    def graphDisplayListener(self, value: ghidra.service.graph.GraphDisplayListener) -> None: ...

    @property
    def graphTitle(self) -> unicode: ...

    @property
    def selectedVertices(self) -> java.util.Set: ...
