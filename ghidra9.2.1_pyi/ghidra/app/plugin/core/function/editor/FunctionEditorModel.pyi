from typing import List
import ghidra.app.plugin.core.function.editor
import ghidra.program.model.data
import ghidra.program.model.listing
import java.lang


class FunctionEditorModel(object):
    PARSING_MODE_STATUS_TEXT: unicode = u'<TAB> or <RETURN> to commit edits, <ESC> to abort'



    def __init__(self, __a0: ghidra.app.services.DataTypeManagerService, __a1: ghidra.program.model.listing.Function): ...



    def addParameter(self) -> None: ...

    def apply(self) -> bool: ...

    def canCustomizeStorage(self) -> bool: ...

    def canMoveParameterDown(self) -> bool: ...

    def canMoveParameterUp(self) -> bool: ...

    def canRemoveParameters(self) -> bool: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getCallFixupName(self) -> unicode: ...

    def getCallFixupNames(self) -> List[unicode]: ...

    def getCallingConventionName(self) -> unicode: ...

    def getCallingConventionNames(self) -> List[object]: ...

    def getClass(self) -> java.lang.Class: ...

    def getFormalReturnType(self) -> ghidra.program.model.data.DataType: ...

    def getFunction(self) -> ghidra.program.model.listing.Function: ...

    def getFunctionNameStartPosition(self) -> int: ...

    def getFunctionSignatureTextFromModel(self) -> unicode: ...

    def getName(self) -> unicode: ...

    def getNameString(self) -> unicode: ...

    def getParameters(self) -> List[object]: ...

    def getReturnStorage(self) -> ghidra.program.model.listing.VariableStorage: ...

    def getReturnType(self) -> ghidra.program.model.data.DataType: ...

    def getSelectedParameterRows(self) -> List[int]: ...

    def getStatusText(self) -> unicode: ...

    def hasValidName(self) -> bool: ...

    def hasVarArgs(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isInLine(self) -> bool: ...

    def isInParsingMode(self) -> bool: ...

    def isInlineAllowed(self) -> bool: ...

    def isNoReturn(self) -> bool: ...

    def isValid(self) -> bool: ...

    def moveSelectedParameterDown(self) -> None: ...

    def moveSelectedParameterUp(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def parseSignatureFieldText(self) -> None: ...

    def removeParameters(self) -> None: ...

    def resetSignatureTextField(self) -> None: ...

    def setCallFixupName(self, __a0: unicode) -> None: ...

    def setCallingConventionName(self, __a0: unicode) -> None: ...

    def setFormalReturnType(self, __a0: ghidra.program.model.data.DataType) -> None: ...

    def setFunctionData(self, __a0: ghidra.program.model.data.FunctionDefinitionDataType) -> None: ...

    def setHasVarArgs(self, __a0: bool) -> None: ...

    def setIsInLine(self, __a0: bool) -> None: ...

    def setModelChanged(self, __a0: bool) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setNoReturn(self, __a0: bool) -> None: ...

    def setParameterFormalDataType(self, __a0: ghidra.app.plugin.core.function.editor.ParamInfo, __a1: ghidra.program.model.data.DataType) -> None: ...

    def setParameterName(self, __a0: ghidra.app.plugin.core.function.editor.ParamInfo, __a1: unicode) -> None: ...

    def setParameterStorage(self, __a0: ghidra.app.plugin.core.function.editor.ParamInfo, __a1: ghidra.program.model.listing.VariableStorage) -> None: ...

    def setReturnStorage(self, __a0: ghidra.program.model.listing.VariableStorage) -> None: ...

    def setSelectedParameterRow(self, __a0: List[int]) -> None: ...

    def setSignatureFieldText(self, __a0: unicode) -> None: ...

    def setUseCustomizeStorage(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def callFixupName(self) -> unicode: ...

    @callFixupName.setter
    def callFixupName(self, value: unicode) -> None: ...

    @property
    def callFixupNames(self) -> List[unicode]: ...

    @property
    def callingConventionName(self) -> unicode: ...

    @callingConventionName.setter
    def callingConventionName(self, value: unicode) -> None: ...

    @property
    def callingConventionNames(self) -> List[object]: ...

    @property
    def formalReturnType(self) -> ghidra.program.model.data.DataType: ...

    @formalReturnType.setter
    def formalReturnType(self, value: ghidra.program.model.data.DataType) -> None: ...

    @property
    def function(self) -> ghidra.program.model.listing.Function: ...

    @property
    def functionData(self) -> None: ...  # No getter available.

    @functionData.setter
    def functionData(self, value: ghidra.program.model.data.FunctionDefinitionDataType) -> None: ...

    @property
    def functionNameStartPosition(self) -> int: ...

    @property
    def functionSignatureTextFromModel(self) -> unicode: ...

    @property
    def inLine(self) -> bool: ...

    @property
    def inParsingMode(self) -> bool: ...

    @property
    def inlineAllowed(self) -> bool: ...

    @property
    def modelChanged(self) -> None: ...  # No getter available.

    @modelChanged.setter
    def modelChanged(self, value: bool) -> None: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def nameString(self) -> unicode: ...

    @property
    def noReturn(self) -> bool: ...

    @noReturn.setter
    def noReturn(self, value: bool) -> None: ...

    @property
    def parameters(self) -> List[object]: ...

    @property
    def returnStorage(self) -> ghidra.program.model.listing.VariableStorage: ...

    @returnStorage.setter
    def returnStorage(self, value: ghidra.program.model.listing.VariableStorage) -> None: ...

    @property
    def returnType(self) -> ghidra.program.model.data.DataType: ...

    @property
    def selectedParameterRow(self) -> None: ...  # No getter available.

    @selectedParameterRow.setter
    def selectedParameterRow(self, value: List[int]) -> None: ...

    @property
    def selectedParameterRows(self) -> List[int]: ...

    @property
    def signatureFieldText(self) -> None: ...  # No getter available.

    @signatureFieldText.setter
    def signatureFieldText(self, value: unicode) -> None: ...

    @property
    def statusText(self) -> unicode: ...

    @property
    def useCustomizeStorage(self) -> None: ...  # No getter available.

    @useCustomizeStorage.setter
    def useCustomizeStorage(self, value: bool) -> None: ...

    @property
    def valid(self) -> bool: ...
