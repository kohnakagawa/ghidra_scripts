import java.lang
import java.util
import org.apache.commons.collections4
import org.apache.commons.collections4.multimap


class TreeSetValuedTreeMap(org.apache.commons.collections4.multimap.AbstractSetValuedMap):
    """
    A multi-valued map using a tree map of tree sets
    """





    def __init__(self): ...



    def asMap(self) -> java.util.Map: ...

    def clear(self) -> None: ...

    def containsKey(self, __a0: object) -> bool: ...

    def containsMapping(self, __a0: object, __a1: object) -> bool: ...

    def containsValue(self, __a0: object) -> bool: ...

    def entries(self) -> java.util.Collection: ...

    def equals(self, __a0: object) -> bool: ...

    def get(self, __a0: object) -> java.util.Set: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    def keySet(self) -> java.util.Set: ...

    def keys(self) -> org.apache.commons.collections4.MultiSet: ...

    def mapIterator(self) -> org.apache.commons.collections4.MapIterator: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def put(self, __a0: object, __a1: object) -> bool: ...

    @overload
    def putAll(self, __a0: java.util.Map) -> bool: ...

    @overload
    def putAll(self, __a0: org.apache.commons.collections4.MultiValuedMap) -> bool: ...

    @overload
    def putAll(self, __a0: object, __a1: java.lang.Iterable) -> bool: ...

    def remove(self, __a0: object) -> java.util.Collection: ...

    def removeMapping(self, __a0: object, __a1: object) -> bool: ...

    def size(self) -> int: ...

    def toString(self) -> unicode: ...

    def values(self) -> java.util.Collection: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
