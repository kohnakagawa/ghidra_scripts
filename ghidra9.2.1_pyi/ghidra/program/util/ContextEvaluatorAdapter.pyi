import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.model.pcode
import ghidra.program.model.symbol
import ghidra.program.util
import java.lang


class ContextEvaluatorAdapter(object, ghidra.program.util.ContextEvaluator):
    """
    Default behavior implementation of ContextEvaluator passed to SymbolicPropogator

     Override methods to inspect context.
    """





    def __init__(self): ...



    def allowAccess(self, context: ghidra.program.util.VarnodeContext, addr: ghidra.program.model.address.Address) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def evaluateConstant(self, context: ghidra.program.util.VarnodeContext, instr: ghidra.program.model.listing.Instruction, pcodeop: int, constant: ghidra.program.model.address.Address, size: int, refType: ghidra.program.model.symbol.RefType) -> ghidra.program.model.address.Address: ...

    def evaluateContext(self, context: ghidra.program.util.VarnodeContext, instr: ghidra.program.model.listing.Instruction) -> bool: ...

    def evaluateContextBefore(self, context: ghidra.program.util.VarnodeContext, instr: ghidra.program.model.listing.Instruction) -> bool: ...

    def evaluateDestination(self, context: ghidra.program.util.VarnodeContext, instruction: ghidra.program.model.listing.Instruction) -> bool: ...

    def evaluateReference(self, context: ghidra.program.util.VarnodeContext, instr: ghidra.program.model.listing.Instruction, pcodeop: int, address: ghidra.program.model.address.Address, size: int, refType: ghidra.program.model.symbol.RefType) -> bool: ...

    def evaluateSymbolicReference(self, context: ghidra.program.util.VarnodeContext, instr: ghidra.program.model.listing.Instruction, address: ghidra.program.model.address.Address) -> bool: ...

    def followFalseConditionalBranches(self) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    def unknownValue(self, context: ghidra.program.util.VarnodeContext, instruction: ghidra.program.model.listing.Instruction, node: ghidra.program.model.pcode.Varnode) -> long: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
