from typing import List
import ghidra.framework.options
import ghidra.util
import java.awt
import java.beans
import java.io
import java.lang
import java.util
import javax.swing
import org.jdom


class ToolOptions(ghidra.framework.options.AbstractOptions):
    """
    Class to manage a set of option name/value pairs for a category.
     The values may be primitives or
     WrappedObjects that are containers for its primitive components.
     The option may be associated with a particular group.
      The name/value pair has a owner so that the option name
     can be removed from the Options object when it is no longer being used.
     NOTE: Property Names can have DELIMITER characters to create a hierarchy.
     The Options Dialog shows the hierarchy in tree format.
    """

    PRIMITIVE_CLASSES: java.util.Set = [class java.lang.Double, class java.lang.Long, class java.lang.Float, class java.lang.String, class java.lang.Short, class java.lang.Byte, class java.lang.Boolean, class java.lang.Integer]
    WRAPPABLE_CLASSES: java.util.Set = [class java.io.File, class java.awt.Font, class javax.swing.KeyStroke, class java.awt.Color]
    XML_ELEMENT_NAME: unicode = u'CATEGORY'



    @overload
    def __init__(self, name: unicode): ...

    @overload
    def __init__(self, root: org.jdom.Element):
        """
        Construct a new Options object from the given XML element.
        @param root XML that contains the set of options to restore
        """
        ...



    def addOptionsChangeListener(self, l: ghidra.framework.options.OptionsChangeListener) -> None:
        """
        Add the options change listener. NOTE: The Options uses
         WeakReferences to manage the listeners; this means that you must supply a
         listener and maintain a handle to it, or else the listener will be
         garbage collected and will never get called. So for this reason, do
         <i>not</i> create the listener in an anonymous inner class.
        @param l listener to add
        """
        ...

    def contains(self, optionName: unicode) -> bool: ...

    def copy(self) -> ghidra.framework.options.ToolOptions: ...

    def copyOptions(self, newOptions: ghidra.framework.options.Options) -> None:
        """
        Adds all the options name/value pairs to this Options.
        @param newOptions the new options into which the current options values will be placed
        """
        ...

    def createAlias(self, aliasName: unicode, options: ghidra.framework.options.Options, optionsName: unicode) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, obj: object) -> bool: ...

    @staticmethod
    def findPropertyEditor(originalValueClass: java.lang.Class) -> java.beans.PropertyEditor: ...

    def getBoolean(self, optionName: unicode, defaultValue: bool) -> bool: ...

    def getByteArray(self, optionName: unicode, defaultValue: List[int]) -> List[int]: ...

    def getCategoryHelpLocation(self, categoryPath: unicode) -> ghidra.util.HelpLocation: ...

    def getChildOptions(self) -> List[ghidra.framework.options.Options]: ...

    def getClass(self) -> java.lang.Class: ...

    def getColor(self, optionName: unicode, defaultValue: java.awt.Color) -> java.awt.Color: ...

    def getCustomOption(self, optionName: unicode, defaultValue: ghidra.framework.options.CustomOption) -> ghidra.framework.options.CustomOption: ...

    def getDate(self, optionName: unicode, defaultValue: java.util.Date) -> java.util.Date: ...

    def getDefaultValue(self, optionName: unicode) -> object: ...

    def getDefaultValueAsString(self, optionName: unicode) -> unicode: ...

    def getDescription(self, optionName: unicode) -> unicode: ...

    def getDouble(self, optionName: unicode, defaultValue: float) -> float: ...

    def getEnum(self, __a0: unicode, __a1: java.lang.Enum) -> java.lang.Enum: ...

    def getFile(self, optionName: unicode, defaultValue: java.io.File) -> java.io.File: ...

    def getFloat(self, optionName: unicode, defaultValue: float) -> float: ...

    def getFont(self, optionName: unicode, defaultValue: java.awt.Font) -> java.awt.Font: ...

    def getHelpLocation(self, optionName: unicode) -> ghidra.util.HelpLocation: ...

    def getID(self, optionName: unicode) -> unicode: ...

    def getInt(self, optionName: unicode, defaultValue: int) -> int: ...

    def getKeyStroke(self, optionName: unicode, defaultValue: javax.swing.KeyStroke) -> javax.swing.KeyStroke: ...

    def getLeafOptionNames(self) -> List[unicode]: ...

    def getLong(self, optionName: unicode, defaultValue: long) -> long: ...

    def getName(self) -> unicode: ...

    def getObject(self, optionName: unicode, defaultValue: object) -> object: ...

    def getOption(self, optionName: unicode, type: ghidra.framework.options.OptionType, defaultValue: object) -> ghidra.framework.options.Option: ...

    def getOptionNames(self) -> List[unicode]: ...

    def getOptions(self, path: unicode) -> ghidra.framework.options.Options: ...

    @overload
    def getOptionsEditor(self) -> ghidra.framework.options.OptionsEditor: ...

    @overload
    def getOptionsEditor(self, categoryPath: unicode) -> ghidra.framework.options.OptionsEditor: ...

    def getOptionsHelpLocation(self) -> ghidra.util.HelpLocation: ...

    def getPropertyEditor(self, optionName: unicode) -> java.beans.PropertyEditor: ...

    def getRegisteredPropertyEditor(self, optionName: unicode) -> java.beans.PropertyEditor: ...

    def getString(self, optionName: unicode, defaultValue: unicode) -> unicode: ...

    def getType(self, optionName: unicode) -> ghidra.framework.options.OptionType: ...

    def getValueAsString(self, optionName: unicode) -> unicode: ...

    def getXmlRoot(self, includeDefaultBindings: bool) -> org.jdom.Element:
        """
        Return an XML element for the option names and values.
         Note: only those options which have been explicitly set
         will be included.
        @param includeDefaultBindings true to include default key binding values in the xml
        @return the xml root element
        """
        ...

    def hashCode(self) -> int: ...

    def isAlias(self, aliasName: unicode) -> bool: ...

    def isDefaultValue(self, optionName: unicode) -> bool: ...

    def isRegistered(self, optionName: unicode) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def putObject(self, optionName: unicode, newValue: object) -> None: ...

    @overload
    def putObject(self, optionName: unicode, newValue: object, type: ghidra.framework.options.OptionType) -> None: ...

    @overload
    def registerOption(self, optionName: unicode, defaultValue: object, help: ghidra.util.HelpLocation, description: unicode) -> None: ...

    @overload
    def registerOption(self, optionName: unicode, type: ghidra.framework.options.OptionType, defaultValue: object, help: ghidra.util.HelpLocation, description: unicode) -> None: ...

    @overload
    def registerOption(self, optionName: unicode, type: ghidra.framework.options.OptionType, defaultValue: object, help: ghidra.util.HelpLocation, description: unicode, editor: java.beans.PropertyEditor) -> None: ...

    def registerOptions(self, oldOptions: ghidra.framework.options.ToolOptions) -> None: ...

    @overload
    def registerOptionsEditor(self, editor: ghidra.framework.options.OptionsEditor) -> None: ...

    @overload
    def registerOptionsEditor(self, categoryPath: unicode, editor: ghidra.framework.options.OptionsEditor) -> None: ...

    def removeOption(self, optionName: unicode) -> None: ...

    def removeOptionsChangeListener(self, l: ghidra.framework.options.OptionsChangeListener) -> None:
        """
        Remove the options change listener.
        @param l listener to remove
        """
        ...

    def removeUnusedOptions(self) -> None:
        """
        Check each option to ensure that an owner is still registered for it;
         if there is no owner, then remove the option.
        """
        ...

    def restoreDefaultValue(self, optionName: unicode) -> None: ...

    def restoreDefaultValues(self) -> None: ...

    def setBoolean(self, optionName: unicode, value: bool) -> None: ...

    def setByteArray(self, optionName: unicode, value: List[int]) -> None: ...

    def setCategoryHelpLocation(self, categoryPath: unicode, helpLocation: ghidra.util.HelpLocation) -> None: ...

    def setColor(self, optionName: unicode, value: java.awt.Color) -> None: ...

    def setCustomOption(self, optionName: unicode, value: ghidra.framework.options.CustomOption) -> None: ...

    def setDate(self, optionName: unicode, value: java.util.Date) -> None: ...

    def setDouble(self, optionName: unicode, value: float) -> None: ...

    def setEnum(self, __a0: unicode, __a1: java.lang.Enum) -> None: ...

    def setFile(self, optionName: unicode, value: java.io.File) -> None: ...

    def setFloat(self, optionName: unicode, value: float) -> None: ...

    def setFont(self, optionName: unicode, value: java.awt.Font) -> None: ...

    def setInt(self, optionName: unicode, value: int) -> None: ...

    def setKeyStroke(self, optionName: unicode, value: javax.swing.KeyStroke) -> None: ...

    def setLong(self, optionName: unicode, value: long) -> None: ...

    def setName(self, newName: unicode) -> None:
        """
        Sets the name for this Options object.  Used when updating old options names to new names.
        @param newName the new name for this options object.
        """
        ...

    def setOptionsHelpLocation(self, helpLocation: ghidra.util.HelpLocation) -> None: ...

    def setString(self, optionName: unicode, value: unicode) -> None: ...

    def takeListeners(self, oldOptions: ghidra.framework.options.ToolOptions) -> None: ...

    def toString(self) -> unicode: ...

    def validateOptions(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
