import ghidra.framework.cmd
import ghidra.framework.model
import ghidra.program.model.address
import ghidra.util.task
import java.lang


class ApplyFidEntriesCommand(ghidra.framework.cmd.BackgroundCommand):
    FIDCONFLICT_BOOKMARK_CATEGORY: unicode = u'Function ID Conflict'
    FID_BOOKMARK_CATEGORY: unicode = u'Function ID Analyzer'
    FID_CONFLICT: unicode = u'FID_conflict:'
    MAGIC_MULTIPLE_LIBRARY_LIMIT: int = 5
    MAGIC_MULTIPLE_MATCH_LIMIT: int = 10
    MAX_PLATE_COMMENT_LINE_LENGTH: int = 58



    def __init__(self, __a0: ghidra.program.model.address.AddressSetView, __a1: float, __a2: float, __a3: bool, __a4: bool): ...



    @overload
    def applyTo(self, __a0: ghidra.framework.model.DomainObject) -> bool: ...

    @overload
    def applyTo(self, __a0: ghidra.framework.model.DomainObject, __a1: ghidra.util.task.TaskMonitor) -> bool: ...

    def canCancel(self) -> bool: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getFIDLocations(self) -> ghidra.program.model.address.AddressSetView: ...

    def getName(self) -> unicode: ...

    def getStatusMsg(self) -> unicode: ...

    def hasProgress(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isModal(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def taskCompleted(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def FIDLocations(self) -> ghidra.program.model.address.AddressSetView: ...
