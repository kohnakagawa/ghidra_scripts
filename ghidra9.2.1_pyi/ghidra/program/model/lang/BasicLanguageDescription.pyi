from typing import List
import ghidra.program.model.lang
import java.lang


class BasicLanguageDescription(object, ghidra.program.model.lang.LanguageDescription):




    @overload
    def __init__(self, id: ghidra.program.model.lang.LanguageID, processor: ghidra.program.model.lang.Processor, endian: ghidra.program.model.lang.Endian, instructionEndian: ghidra.program.model.lang.Endian, size: int, variant: unicode, description: unicode, version: int, minorVersion: int, deprecated: bool, compilerSpec: ghidra.program.model.lang.CompilerSpecDescription, externalNames: java.util.Map): ...

    @overload
    def __init__(self, __a0: ghidra.program.model.lang.LanguageID, __a1: ghidra.program.model.lang.Processor, __a2: ghidra.program.model.lang.Endian, __a3: ghidra.program.model.lang.Endian, __a4: int, __a5: unicode, __a6: unicode, __a7: int, __a8: int, __a9: bool, __a10: List[object], __a11: java.util.Map): ...



    def equals(self, obj: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCompatibleCompilerSpecDescriptions(self) -> List[ghidra.program.model.lang.CompilerSpecDescription]: ...

    def getCompilerSpecDescriptionByID(self, compilerSpecID: ghidra.program.model.lang.CompilerSpecID) -> ghidra.program.model.lang.CompilerSpecDescription: ...

    def getDescription(self) -> unicode: ...

    def getEndian(self) -> ghidra.program.model.lang.Endian: ...

    def getExternalNames(self, key: unicode) -> List[unicode]: ...

    def getInstructionEndian(self) -> ghidra.program.model.lang.Endian: ...

    def getLanguageID(self) -> ghidra.program.model.lang.LanguageID: ...

    def getMinorVersion(self) -> int: ...

    def getProcessor(self) -> ghidra.program.model.lang.Processor: ...

    def getSize(self) -> int: ...

    def getVariant(self) -> unicode: ...

    def getVersion(self) -> int: ...

    def hashCode(self) -> int: ...

    def isDeprecated(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def compatibleCompilerSpecDescriptions(self) -> List[object]: ...

    @property
    def deprecated(self) -> bool: ...

    @property
    def description(self) -> unicode: ...

    @property
    def endian(self) -> ghidra.program.model.lang.Endian: ...

    @property
    def instructionEndian(self) -> ghidra.program.model.lang.Endian: ...

    @property
    def languageID(self) -> ghidra.program.model.lang.LanguageID: ...

    @property
    def minorVersion(self) -> int: ...

    @property
    def processor(self) -> ghidra.program.model.lang.Processor: ...

    @property
    def size(self) -> int: ...

    @property
    def variant(self) -> unicode: ...

    @property
    def version(self) -> int: ...
