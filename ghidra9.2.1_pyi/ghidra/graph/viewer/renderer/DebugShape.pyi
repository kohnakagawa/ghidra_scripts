import edu.uci.ics.jung.visualization
import edu.uci.ics.jung.visualization.transform.shape
import java.awt
import java.lang


class DebugShape(object, edu.uci.ics.jung.visualization.VisualizationServer.Paintable):




    def __init__(self, viewer: edu.uci.ics.jung.visualization.VisualizationServer, drawingIterationCounter: java.util.concurrent.atomic.AtomicInteger, text: unicode, shape: java.awt.Shape, color: java.awt.Color): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getColor(self) -> java.awt.Color: ...

    def getShape(self) -> java.awt.Shape: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def paint(self, g: edu.uci.ics.jung.visualization.transform.shape.GraphicsDecorator) -> None: ...

    @overload
    def paint(self, g: java.awt.Graphics) -> None: ...

    def toString(self) -> unicode: ...

    def useTransform(self) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def color(self) -> java.awt.Color: ...

    @property
    def shape(self) -> java.awt.Shape: ...
