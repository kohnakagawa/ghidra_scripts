from typing import List
import ghidra.docking.settings
import java.lang


class TypedefSettings(object, ghidra.docking.settings.Settings):
    """
    Settings for typedefs that combines the default settings with instance
     settings if instance settings for a setting name does not exist.
    """









    def clearAllSettings(self) -> None: ...

    def clearSetting(self, name: unicode) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getByteArray(self, name: unicode) -> List[int]: ...

    def getClass(self) -> java.lang.Class: ...

    def getDefaultSettings(self) -> ghidra.docking.settings.Settings:
        """
        @see ghidra.docking.settings.Settings#getDefaultSettings()
        """
        ...

    def getLong(self, name: unicode) -> long: ...

    def getNames(self) -> List[unicode]: ...

    def getString(self, name: unicode) -> unicode: ...

    def getValue(self, name: unicode) -> object: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setByteArray(self, name: unicode, value: List[int]) -> None: ...

    def setLong(self, name: unicode, value: long) -> None: ...

    def setString(self, name: unicode, value: unicode) -> None: ...

    def setValue(self, name: unicode, value: object) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
