from typing import List
import docking.widgets
import ghidra.framework.client
import ghidra.framework.remote
import java.awt
import java.lang
import java.net
import javax.security.auth.callback


class DefaultClientAuthenticator(docking.widgets.PopupKeyStorePasswordProvider, ghidra.framework.client.ClientAuthenticator):




    def __init__(self): ...



    def equals(self, __a0: object) -> bool: ...

    def getAuthenticator(self) -> java.net.Authenticator: ...

    def getClass(self) -> java.lang.Class: ...

    def getKeyStorePassword(self, keystorePath: unicode, passwordError: bool) -> List[int]: ...

    def getNewPassword(self, parent: java.awt.Component, serverInfo: unicode, username: unicode) -> List[int]: ...

    def hashCode(self) -> int: ...

    def isSSHKeyAvailable(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def processPasswordCallbacks(self, title: unicode, serverType: unicode, serverName: unicode, nameCb: javax.security.auth.callback.NameCallback, passCb: javax.security.auth.callback.PasswordCallback, choiceCb: javax.security.auth.callback.ChoiceCallback, anonymousCb: ghidra.framework.remote.AnonymousCallback, loginError: unicode) -> bool: ...

    def processSSHSignatureCallbacks(self, serverName: unicode, nameCb: javax.security.auth.callback.NameCallback, sshCb: ghidra.framework.remote.SSHSignatureCallback) -> bool: ...

    def promptForReconnect(self, parent: java.awt.Component, message: unicode) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def SSHKeyAvailable(self) -> bool: ...

    @property
    def authenticator(self) -> java.net.Authenticator: ...
