from typing import List
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.mem
import ghidra.program.util.string
import ghidra.program.util.string.FoundString
import java.lang


class FoundString(object, java.lang.Comparable):





    class DefinedState(java.lang.Enum):
        CONFLICTS: ghidra.program.util.string.FoundString.DefinedState = CONFLICTS
        DEFINED: ghidra.program.util.string.FoundString.DefinedState = DEFINED
        NOT_DEFINED: ghidra.program.util.string.FoundString.DefinedState = NOT_DEFINED
        PARTIALLY_DEFINED: ghidra.program.util.string.FoundString.DefinedState = PARTIALLY_DEFINED







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.program.util.string.FoundString.DefinedState: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.program.util.string.FoundString.DefinedState]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    @overload
    def __init__(self, address: ghidra.program.model.address.Address, length: int, stringDataType: ghidra.program.model.data.DataType): ...

    @overload
    def __init__(self, address: ghidra.program.model.address.Address, length: int, stringDataType: ghidra.program.model.data.DataType, definedState: ghidra.program.util.string.FoundString.DefinedState): ...



    @overload
    def compareTo(self, other: ghidra.program.util.string.FoundString) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def conflicts(self) -> bool: ...

    def equals(self, obj: object) -> bool: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataInstance(self, memory: ghidra.program.model.mem.Memory) -> ghidra.program.model.data.StringDataInstance: ...

    def getDataType(self) -> ghidra.program.model.data.DataType: ...

    def getDefinedState(self) -> ghidra.program.util.string.FoundString.DefinedState: ...

    def getEndAddress(self) -> ghidra.program.model.address.Address: ...

    def getLength(self) -> int: ...

    def getString(self, memory: ghidra.program.model.mem.Memory) -> unicode: ...

    def getStringLength(self, mem: ghidra.program.model.mem.Memory) -> int: ...

    def hashCode(self) -> int: ...

    def isDefined(self) -> bool: ...

    def isPartiallyDefined(self) -> bool: ...

    def isPascall(self) -> bool: ...

    def isUndefined(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setAddress(self, address: ghidra.program.model.address.Address) -> None: ...

    def setDefinedState(self, newState: ghidra.program.util.string.FoundString.DefinedState) -> None: ...

    def setLength(self, length: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @address.setter
    def address(self, value: ghidra.program.model.address.Address) -> None: ...

    @property
    def dataType(self) -> ghidra.program.model.data.DataType: ...

    @property
    def defined(self) -> bool: ...

    @property
    def definedState(self) -> ghidra.program.util.string.FoundString.DefinedState: ...

    @definedState.setter
    def definedState(self, value: ghidra.program.util.string.FoundString.DefinedState) -> None: ...

    @property
    def endAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def length(self) -> int: ...

    @length.setter
    def length(self, value: int) -> None: ...

    @property
    def partiallyDefined(self) -> bool: ...

    @property
    def pascall(self) -> bool: ...

    @property
    def undefined(self) -> bool: ...
