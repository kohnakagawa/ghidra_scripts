from typing import List
import ghidra.app.plugin.processors.sleigh
import ghidra.app.plugin.processors.sleigh.pattern
import ghidra.xml
import java.lang


class PatternBlock(object):
    """
    A mask/value pair viewed as two bitstreams
    """





    @overload
    def __init__(self, tf: bool): ...

    @overload
    def __init__(self, list: java.util.ArrayList): ...

    @overload
    def __init__(self, a: ghidra.app.plugin.processors.sleigh.pattern.PatternBlock, b: ghidra.app.plugin.processors.sleigh.pattern.PatternBlock): ...

    @overload
    def __init__(self, off: int, msk: int, val: int): ...



    def alwaysFalse(self) -> bool: ...

    def alwaysTrue(self) -> bool: ...

    def andBlock(self, b: ghidra.app.plugin.processors.sleigh.pattern.PatternBlock) -> ghidra.app.plugin.processors.sleigh.pattern.PatternBlock: ...

    def clone(self) -> object: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getLength(self) -> int: ...

    def getMask(self, startbit: int, size: int) -> int: ...

    def getMaskVector(self) -> List[int]: ...

    def getNonZeroLength(self) -> int: ...

    def getOffset(self) -> int: ...

    def getValue(self, startbit: int, size: int) -> int: ...

    def getValueVector(self) -> List[int]: ...

    def getWholeBytes(self) -> List[int]:
        """
        Extract those portions of the pattern which constitute fully-specified bytes
        @return an array of bytes
        """
        ...

    def hashCode(self) -> int: ...

    def identical(self, op2: ghidra.app.plugin.processors.sleigh.pattern.PatternBlock) -> bool: ...

    def isContextMatch(self, walker: ghidra.app.plugin.processors.sleigh.ParserWalker) -> bool: ...

    def isInstructionMatch(self, walker: ghidra.app.plugin.processors.sleigh.ParserWalker) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def restoreXml(self, parser: ghidra.xml.XmlPullParser) -> None: ...

    def shift(self, sa: int) -> None: ...

    def specializes(self, op2: ghidra.app.plugin.processors.sleigh.pattern.PatternBlock) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def length(self) -> int: ...

    @property
    def maskVector(self) -> List[int]: ...

    @property
    def nonZeroLength(self) -> int: ...

    @property
    def offset(self) -> int: ...

    @property
    def valueVector(self) -> List[int]: ...

    @property
    def wholeBytes(self) -> List[int]: ...
