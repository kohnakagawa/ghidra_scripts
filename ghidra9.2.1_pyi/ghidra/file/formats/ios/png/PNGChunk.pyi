from typing import List
import ghidra.app.util.bin
import ghidra.program.model.data
import java.lang


class PNGChunk(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType = char
    BYTE: ghidra.program.model.data.DataType = byte
    DWORD: ghidra.program.model.data.DataType = dword
    IBO32: ghidra.program.model.data.DataType = ImageBaseOffset32
    POINTER: ghidra.program.model.data.DataType = pointer
    QWORD: ghidra.program.model.data.DataType = qword
    STRING: ghidra.program.model.data.DataType = string
    UTF16: ghidra.program.model.data.DataType = unicode
    UTF8: ghidra.program.model.data.DataType = string-utf8
    VOID: ghidra.program.model.data.DataType = void
    WORD: ghidra.program.model.data.DataType = word



    def __init__(self, __a0: ghidra.app.util.bin.BinaryReader): ...



    def equals(self, __a0: object) -> bool: ...

    def getChunkBytes(self) -> List[int]: ...

    def getChunkID(self) -> int: ...

    def getChunkIDBytes(self) -> List[int]: ...

    def getClass(self) -> java.lang.Class: ...

    def getCrc32(self) -> int: ...

    def getCrc32Bytes(self) -> List[int]: ...

    def getData(self) -> List[int]: ...

    def getIDString(self) -> unicode: ...

    def getLength(self) -> int: ...

    def getLengthBytes(self) -> List[int]: ...

    def getTotalLength(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setChunkID(self, __a0: int) -> None: ...

    def setCrc32(self, __a0: int) -> None: ...

    def setData(self, __a0: List[int]) -> None: ...

    def setLength(self, __a0: int) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def IDString(self) -> unicode: ...

    @property
    def chunkBytes(self) -> List[int]: ...

    @property
    def chunkID(self) -> int: ...

    @chunkID.setter
    def chunkID(self, value: int) -> None: ...

    @property
    def chunkIDBytes(self) -> List[int]: ...

    @property
    def crc32(self) -> int: ...

    @crc32.setter
    def crc32(self, value: int) -> None: ...

    @property
    def crc32Bytes(self) -> List[int]: ...

    @property
    def data(self) -> List[int]: ...

    @data.setter
    def data(self, value: List[int]) -> None: ...

    @property
    def length(self) -> int: ...

    @length.setter
    def length(self, value: int) -> None: ...

    @property
    def lengthBytes(self) -> List[int]: ...

    @property
    def totalLength(self) -> int: ...
