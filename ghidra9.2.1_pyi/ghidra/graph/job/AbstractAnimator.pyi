import ghidra.util.task
import java.lang


class AbstractAnimator(object):




    def __init__(self): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hasFinished(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isRunning(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setBusyListener(self, listener: ghidra.util.task.BusyListener) -> None: ...

    def start(self) -> None: ...

    def stop(self) -> None:
        """
        Stops this animator <b>and all scheduled animators!</b>
        """
        ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def busyListener(self) -> None: ...  # No getter available.

    @busyListener.setter
    def busyListener(self, value: ghidra.util.task.BusyListener) -> None: ...

    @property
    def running(self) -> bool: ...
