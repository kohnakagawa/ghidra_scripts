from typing import List
import ghidra.app.plugin.core.functiongraph.graph.vertex
import ghidra.app.plugin.core.functiongraph.mvc
import ghidra.framework.options
import java.awt
import java.lang


class FGColorProvider(object):








    def clearVertexColor(self, __a0: ghidra.app.plugin.core.functiongraph.graph.vertex.FGVertex) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getColorFromUser(self, __a0: java.awt.Color) -> java.awt.Color: ...

    def getMostRecentColor(self) -> java.awt.Color: ...

    def getRecentColors(self) -> List[object]: ...

    def hashCode(self) -> int: ...

    def isUsingCustomColors(self) -> bool: ...

    def loadPluginColor(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def loadVertexColors(self, __a0: ghidra.app.plugin.core.functiongraph.graph.vertex.FGVertex, __a1: ghidra.app.plugin.core.functiongraph.mvc.FunctionGraphVertexAttributes) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def savePluginColors(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def saveVertexColors(self, __a0: ghidra.app.plugin.core.functiongraph.graph.vertex.FGVertex, __a1: ghidra.app.plugin.core.functiongraph.mvc.FunctionGraphVertexAttributes) -> None: ...

    def setVertexColor(self, __a0: ghidra.app.plugin.core.functiongraph.graph.vertex.FGVertex, __a1: java.awt.Color) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def mostRecentColor(self) -> java.awt.Color: ...

    @property
    def recentColors(self) -> List[object]: ...

    @property
    def usingCustomColors(self) -> bool: ...
