import ghidra.pcode.floatformat
import java.lang
import java.math


class FloatFormat(object):
    BIG_NEGATIVE_INFINITY: java.math.BigDecimal = -1E+65536
    BIG_NaN: java.math.BigDecimal = None
    BIG_POSITIVE_INFINITY: java.math.BigDecimal = 1E+65536
    maxValue: java.math.BigDecimal
    minValue: java.math.BigDecimal







    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    def getEncoding(self, host: float) -> long: ...

    @overload
    def getEncoding(self, value: java.math.BigDecimal) -> long: ...

    @overload
    def getHostFloat(self, encoding: long) -> float: ...

    @overload
    def getHostFloat(self, encoding: long) -> float: ...

    def getSize(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def opAbs(self, a: long) -> long: ...

    @overload
    def opAbs(self, a: long) -> long: ...

    @overload
    def opAdd(self, a: long, b: long) -> long: ...

    @overload
    def opAdd(self, a: long, b: long) -> long: ...

    @overload
    def opCeil(self, a: long) -> long: ...

    @overload
    def opCeil(self, a: long) -> long: ...

    @overload
    def opDiv(self, a: long, b: long) -> long: ...

    @overload
    def opDiv(self, a: long, b: long) -> long: ...

    @overload
    def opEqual(self, a: long, b: long) -> long: ...

    @overload
    def opEqual(self, a: long, b: long) -> long: ...

    @overload
    def opFloat2Float(self, a: long, outformat: ghidra.pcode.floatformat.FloatFormat) -> long: ...

    @overload
    def opFloat2Float(self, a: long, outformat: ghidra.pcode.floatformat.FloatFormat) -> long: ...

    @overload
    def opFloor(self, a: long) -> long: ...

    @overload
    def opFloor(self, a: long) -> long: ...

    @overload
    def opInt2Float(self, a: long, sizein: int) -> long: ...

    @overload
    def opInt2Float(self, a: long, sizein: int, signed: bool) -> long: ...

    @overload
    def opLess(self, a: long, b: long) -> long: ...

    @overload
    def opLess(self, a: long, b: long) -> long: ...

    @overload
    def opLessEqual(self, a: long, b: long) -> long: ...

    @overload
    def opLessEqual(self, a: long, b: long) -> long: ...

    @overload
    def opMult(self, a: long, b: long) -> long: ...

    @overload
    def opMult(self, a: long, b: long) -> long: ...

    @overload
    def opNan(self, a: long) -> long: ...

    @overload
    def opNan(self, a: long) -> long: ...

    @overload
    def opNeg(self, a: long) -> long: ...

    @overload
    def opNeg(self, a: long) -> long: ...

    @overload
    def opNotEqual(self, a: long, b: long) -> long: ...

    @overload
    def opNotEqual(self, a: long, b: long) -> long: ...

    @overload
    def opRound(self, a: long) -> long: ...

    @overload
    def opRound(self, a: long) -> long: ...

    @overload
    def opSqrt(self, a: long) -> long: ...

    @overload
    def opSqrt(self, a: long) -> long: ...

    @overload
    def opSub(self, a: long, b: long) -> long: ...

    @overload
    def opSub(self, a: long, b: long) -> long: ...

    @overload
    def opTrunc(self, a: long, sizeout: int) -> long: ...

    @overload
    def opTrunc(self, a: long, sizeout: int) -> long: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def size(self) -> int: ...
