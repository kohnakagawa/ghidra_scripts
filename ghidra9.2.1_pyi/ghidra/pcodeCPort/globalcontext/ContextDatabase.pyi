from typing import List
import generic.stl
import ghidra.pcodeCPort.address
import ghidra.pcodeCPort.globalcontext
import ghidra.pcodeCPort.pcoderaw
import ghidra.pcodeCPort.translate
import ghidra.pcodeCPort.utils
import java.io
import java.lang
import org.jdom


class ContextDatabase(object):




    def __init__(self): ...



    def createContext(self, __a0: ghidra.pcodeCPort.address.Address) -> List[int]: ...

    def createSet(self, __a0: ghidra.pcodeCPort.address.Address, __a1: ghidra.pcodeCPort.address.Address) -> generic.stl.VectorSTL: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    def getContext(self, __a0: ghidra.pcodeCPort.address.Address) -> List[int]: ...

    @overload
    def getContext(self, __a0: ghidra.pcodeCPort.address.Address, __a1: ghidra.pcodeCPort.utils.MutableLong, __a2: ghidra.pcodeCPort.utils.MutableLong) -> List[int]: ...

    def getContextSize(self) -> int: ...

    @overload
    def getDefaultValue(self) -> List[int]: ...

    @overload
    def getDefaultValue(self, __a0: unicode) -> int: ...

    def getRegion(self, __a0: generic.stl.VectorSTL, __a1: ghidra.pcodeCPort.address.Address, __a2: ghidra.pcodeCPort.address.Address) -> None: ...

    def getTrackedDefault(self) -> generic.stl.VectorSTL: ...

    def getTrackedSet(self, __a0: ghidra.pcodeCPort.address.Address) -> generic.stl.VectorSTL: ...

    def getTrackedValue(self, __a0: ghidra.pcodeCPort.pcoderaw.VarnodeData, __a1: ghidra.pcodeCPort.address.Address) -> long: ...

    @overload
    def getVariable(self, __a0: unicode) -> ghidra.pcodeCPort.globalcontext.ContextBitRange: ...

    @overload
    def getVariable(self, __a0: unicode, __a1: ghidra.pcodeCPort.address.Address) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def registerVariable(self, __a0: unicode, __a1: int, __a2: int) -> None: ...

    def restoreFromSpec(self, __a0: org.jdom.Element, __a1: ghidra.pcodeCPort.translate.Translate) -> None: ...

    @staticmethod
    def restoreTracked(__a0: org.jdom.Element, __a1: ghidra.pcodeCPort.translate.Translate, __a2: generic.stl.VectorSTL) -> None: ...

    def restoreXml(self, __a0: org.jdom.Element, __a1: ghidra.pcodeCPort.translate.Translate) -> None: ...

    def saveXml(self, __a0: java.io.PrintStream) -> None: ...

    def setContextRange(self, __a0: ghidra.pcodeCPort.address.Address, __a1: int, __a2: int, __a3: int) -> None: ...

    def setVariable(self, __a0: unicode, __a1: ghidra.pcodeCPort.address.Address, __a2: int) -> None: ...

    def setVariableDefault(self, __a0: unicode, __a1: int) -> None: ...

    def setVariableRegion(self, __a0: unicode, __a1: ghidra.pcodeCPort.address.Address, __a2: ghidra.pcodeCPort.address.Address, __a3: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def contextSize(self) -> int: ...

    @property
    def defaultValue(self) -> List[int]: ...

    @property
    def trackedDefault(self) -> generic.stl.VectorSTL: ...
