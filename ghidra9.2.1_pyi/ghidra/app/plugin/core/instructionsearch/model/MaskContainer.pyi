from typing import List
import java.lang


class MaskContainer(object):




    def __init__(self, __a0: List[int], __a1: List[int]): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getMask(self) -> List[int]: ...

    def getMaskAsBinaryString(self) -> unicode: ...

    def getValue(self) -> List[int]: ...

    def getValueAsBinaryString(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setMask(self, __a0: List[int]) -> None: ...

    def setValue(self, __a0: List[int]) -> None: ...

    def toBinaryString(self) -> unicode: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def mask(self) -> List[int]: ...

    @mask.setter
    def mask(self, value: List[int]) -> None: ...

    @property
    def maskAsBinaryString(self) -> unicode: ...

    @property
    def value(self) -> List[int]: ...

    @value.setter
    def value(self, value: List[int]) -> None: ...

    @property
    def valueAsBinaryString(self) -> unicode: ...
