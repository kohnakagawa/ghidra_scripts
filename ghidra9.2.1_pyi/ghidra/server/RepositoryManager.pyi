from typing import List
import ghidra.server
import ghidra.server.remote
import java.lang


class RepositoryManager(object):




    def __init__(self, __a0: java.io.File, __a1: bool, __a2: int, __a3: bool): ...



    def addHandle(self, __a0: ghidra.server.remote.RepositoryServerHandleImpl) -> None: ...

    def anonymousAccessAllowed(self) -> bool: ...

    def createRepository(self, __a0: unicode, __a1: unicode) -> ghidra.server.Repository: ...

    def deleteRepository(self, __a0: unicode, __a1: unicode) -> None: ...

    def dispose(self) -> None: ...

    def dropHandle(self, __a0: ghidra.server.remote.RepositoryServerHandleImpl) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllUsers(self, __a0: unicode) -> List[unicode]: ...

    def getClass(self) -> java.lang.Class: ...

    @staticmethod
    def getRMIClient() -> unicode: ...

    def getRepository(self, __a0: unicode, __a1: unicode) -> ghidra.server.Repository: ...

    def getRepositoryNames(self, __a0: unicode) -> List[unicode]: ...

    def getUserManager(self) -> ghidra.server.UserManager: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def log(__a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def userManager(self) -> ghidra.server.UserManager: ...
