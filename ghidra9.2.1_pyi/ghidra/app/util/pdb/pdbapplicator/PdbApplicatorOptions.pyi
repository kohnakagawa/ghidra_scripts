import ghidra.app.util.pdb.pdbapplicator
import java.lang


class PdbApplicatorOptions(object):
    DEFAULT_ALLOW_DEMOTE_PRIMARY_MANGLED_SYMBOLS: bool = True
    DEFAULT_APPLY_CODE_SCOPE_BLOCK_COMMENTS: bool = False
    DEFAULT_APPLY_FUNCTION_VARIABLES: bool = False
    DEFAULT_APPLY_INSTRUCTION_LABELS: bool = False
    DEFAULT_CLASS_LAYOUT: ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout = Legacy
    DEFAULT_REMAP_ADDRESSES_USING_EXISTING_SYMBOLS: bool = False
    DEFAULT_RESTRICTIONS: ghidra.app.util.pdb.pdbapplicator.PdbApplicatorRestrictions = None



    def __init__(self): ...



    def allowDemotePrimaryMangledSymbols(self) -> bool: ...

    def applyCodeScopeBlockComments(self) -> bool: ...

    def applyFunctionVariables(self) -> bool: ...

    def applyInstructionLabels(self) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getClassLayout(self) -> ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout: ...

    def getRestrictions(self) -> ghidra.app.util.pdb.pdbapplicator.PdbApplicatorRestrictions: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def remapAddressUsingExistingPublicSymbols(self) -> bool: ...

    def restoreDefaults(self) -> None: ...

    def setAllowDemotePrimaryMangledSymbols(self, __a0: bool) -> None: ...

    def setApplyCodeScopeBlockComments(self, __a0: bool) -> None: ...

    def setApplyFunctionVariables(self, __a0: bool) -> None: ...

    def setApplyInstructionLabels(self, __a0: bool) -> None: ...

    def setClassLayout(self, __a0: ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout) -> None: ...

    def setRemapAddressUsingExistingPublicSymbols(self, __a0: bool) -> None: ...

    def setRestrictions(self, __a0: ghidra.app.util.pdb.pdbapplicator.PdbApplicatorRestrictions) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def classLayout(self) -> ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout: ...

    @classLayout.setter
    def classLayout(self, value: ghidra.app.util.pdb.pdbapplicator.ObjectOrientedClassLayout) -> None: ...

    @property
    def restrictions(self) -> ghidra.app.util.pdb.pdbapplicator.PdbApplicatorRestrictions: ...

    @restrictions.setter
    def restrictions(self, value: ghidra.app.util.pdb.pdbapplicator.PdbApplicatorRestrictions) -> None: ...
