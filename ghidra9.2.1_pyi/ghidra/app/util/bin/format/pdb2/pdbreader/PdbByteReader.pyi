from typing import List
import ghidra.app.util.bin.format.pdb2.pdbreader
import ghidra.app.util.datatype.microsoft
import java.lang
import java.nio.charset


class PdbByteReader(object):




    def __init__(self, __a0: List[int]): ...



    def align4(self) -> int: ...

    @overload
    def dump(self) -> unicode: ...

    @overload
    def dump(self, __a0: int) -> unicode: ...

    @overload
    def dump(self, __a0: int, __a1: int) -> unicode: ...

    @overload
    def dumpBytes(self) -> unicode: ...

    @overload
    def dumpBytes(self, __a0: int) -> unicode: ...

    @overload
    def dumpBytes(self, __a0: int, __a1: int) -> unicode: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getIndex(self) -> int: ...

    def getLimit(self) -> int: ...

    def getSubPdbByteReader(self, __a0: int) -> ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader: ...

    def hasMore(self) -> bool: ...

    def hasMoreNonPad(self) -> bool: ...

    def hashCode(self) -> int: ...

    def markAlign(self, __a0: int) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def numRemaining(self) -> int: ...

    def parseByteLengthPrefixedString(self, __a0: java.nio.charset.Charset) -> unicode: ...

    def parseByteLengthPrefixedUtf8String(self) -> unicode: ...

    def parseBytes(self, __a0: int) -> List[int]: ...

    def parseBytesRemaining(self) -> List[int]: ...

    def parseGUID(self) -> ghidra.app.util.datatype.microsoft.GUID: ...

    def parseInt(self) -> int: ...

    def parseLong(self) -> long: ...

    def parseNullTerminatedString(self, __a0: java.nio.charset.Charset) -> unicode: ...

    def parseNullTerminatedUtf8String(self) -> unicode: ...

    def parseNullTerminatedWcharString(self, __a0: java.nio.charset.Charset) -> unicode: ...

    def parseShort(self) -> int: ...

    def parseShortLengthPrefixedByteArray(self) -> List[int]: ...

    def parseSmallVarSizedUInt(self, __a0: int) -> int: ...

    def parseString(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb, __a1: ghidra.app.util.bin.format.pdb2.pdbreader.StringParseType) -> unicode: ...

    def parseUnsignedByteVal(self) -> int: ...

    def parseUnsignedIntVal(self) -> long: ...

    def parseUnsignedLongVal(self) -> long: ...

    def parseUnsignedShortVal(self) -> int: ...

    def parseVarSizedCount(self, __a0: int) -> int: ...

    def parseVarSizedInt(self, __a0: int) -> int: ...

    def parseVarSizedOffset(self, __a0: int) -> long: ...

    def parseVarSizedUInt(self, __a0: int) -> long: ...

    def reset(self) -> None: ...

    def setIndex(self, __a0: int) -> None: ...

    def skip(self, __a0: int) -> None: ...

    def skipPadding(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def index(self) -> int: ...

    @index.setter
    def index(self, value: int) -> None: ...

    @property
    def limit(self) -> int: ...
