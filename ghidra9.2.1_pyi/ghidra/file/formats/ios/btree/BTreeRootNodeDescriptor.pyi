from typing import List
import ghidra.file.formats.ios.btree
import ghidra.program.model.data
import java.lang


class BTreeRootNodeDescriptor(ghidra.file.formats.ios.btree.BTreeNodeDescriptor):




    def __init__(self, __a0: ghidra.app.util.bin.BinaryReader): ...



    def equals(self, __a0: object) -> bool: ...

    def getBLink(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getFLink(self) -> int: ...

    def getHeaderRecord(self) -> ghidra.file.formats.ios.btree.BTreeHeaderRecord: ...

    def getHeight(self) -> int: ...

    def getKind(self) -> int: ...

    def getMapRecord(self) -> ghidra.file.formats.ios.btree.BTreeMapRecord: ...

    def getNode(self, __a0: int) -> ghidra.file.formats.ios.btree.BTreeNodeDescriptor: ...

    def getNodes(self) -> List[object]: ...

    def getNumRecords(self) -> int: ...

    def getRecordOffsets(self) -> List[object]: ...

    def getRecords(self) -> List[object]: ...

    def getReserved(self) -> int: ...

    def getUserDataRecord(self) -> ghidra.file.formats.ios.btree.BTreeUserDataRecord: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def headerRecord(self) -> ghidra.file.formats.ios.btree.BTreeHeaderRecord: ...

    @property
    def mapRecord(self) -> ghidra.file.formats.ios.btree.BTreeMapRecord: ...

    @property
    def nodes(self) -> List[object]: ...

    @property
    def userDataRecord(self) -> ghidra.file.formats.ios.btree.BTreeUserDataRecord: ...
