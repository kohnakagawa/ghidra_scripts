import docking.action
import ghidra.util
import java.io
import java.lang
import utility.function


class InterpreterConsole(ghidra.util.Disposable, object):








    def addAction(self, __a0: docking.action.DockingAction) -> None: ...

    def addFirstActivationCallback(self, __a0: utility.function.Callback) -> None: ...

    def clear(self) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getErrWriter(self) -> java.io.PrintWriter: ...

    def getOutWriter(self) -> java.io.PrintWriter: ...

    def getStdErr(self) -> java.io.OutputStream: ...

    def getStdOut(self) -> java.io.OutputStream: ...

    def getStdin(self) -> java.io.InputStream: ...

    def hashCode(self) -> int: ...

    def isInputPermitted(self) -> bool: ...

    def isVisible(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setInputPermitted(self, __a0: bool) -> None: ...

    def setPrompt(self, __a0: unicode) -> None: ...

    def setTransient(self) -> None: ...

    def show(self) -> None: ...

    def toString(self) -> unicode: ...

    def updateTitle(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def errWriter(self) -> java.io.PrintWriter: ...

    @property
    def inputPermitted(self) -> bool: ...

    @inputPermitted.setter
    def inputPermitted(self, value: bool) -> None: ...

    @property
    def outWriter(self) -> java.io.PrintWriter: ...

    @property
    def prompt(self) -> None: ...  # No getter available.

    @prompt.setter
    def prompt(self, value: unicode) -> None: ...

    @property
    def stdErr(self) -> java.io.OutputStream: ...

    @property
    def stdOut(self) -> java.io.OutputStream: ...

    @property
    def stdin(self) -> java.io.InputStream: ...

    @property
    def visible(self) -> bool: ...
