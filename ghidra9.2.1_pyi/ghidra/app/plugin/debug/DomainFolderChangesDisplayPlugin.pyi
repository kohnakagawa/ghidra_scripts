from typing import List
import ghidra.framework.main
import ghidra.framework.model
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.framework.plugintool.util
import java.lang


class DomainFolderChangesDisplayPlugin(ghidra.framework.plugintool.Plugin, ghidra.framework.main.FrontEndOnly, ghidra.framework.model.ProjectListener, ghidra.framework.model.DomainFolderChangeListener):




    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool): ...



    def acceptData(self, __a0: List[ghidra.framework.model.DomainFile]) -> bool: ...

    def dataStateRestoreCompleted(self) -> None: ...

    def dependsUpon(self, __a0: ghidra.framework.plugintool.Plugin) -> bool: ...

    def domainFileAdded(self, __a0: ghidra.framework.model.DomainFile) -> None: ...

    def domainFileMoved(self, __a0: ghidra.framework.model.DomainFile, __a1: ghidra.framework.model.DomainFolder, __a2: unicode) -> None: ...

    def domainFileObjectClosed(self, __a0: ghidra.framework.model.DomainFile, __a1: ghidra.framework.model.DomainObject) -> None: ...

    def domainFileObjectOpenedForUpdate(self, __a0: ghidra.framework.model.DomainFile, __a1: ghidra.framework.model.DomainObject) -> None: ...

    def domainFileObjectReplaced(self, __a0: ghidra.framework.model.DomainFile, __a1: ghidra.framework.model.DomainObject) -> None: ...

    def domainFileRemoved(self, __a0: ghidra.framework.model.DomainFolder, __a1: unicode, __a2: unicode) -> None: ...

    def domainFileRenamed(self, __a0: ghidra.framework.model.DomainFile, __a1: unicode) -> None: ...

    def domainFileStatusChanged(self, __a0: ghidra.framework.model.DomainFile, __a1: bool) -> None: ...

    def domainFolderAdded(self, __a0: ghidra.framework.model.DomainFolder) -> None: ...

    def domainFolderMoved(self, __a0: ghidra.framework.model.DomainFolder, __a1: ghidra.framework.model.DomainFolder) -> None: ...

    def domainFolderRemoved(self, __a0: ghidra.framework.model.DomainFolder, __a1: unicode) -> None: ...

    def domainFolderRenamed(self, __a0: ghidra.framework.model.DomainFolder, __a1: unicode) -> None: ...

    def domainFolderSetActive(self, __a0: ghidra.framework.model.DomainFolder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def eventSent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def firePluginEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getData(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getMissingRequiredServices(self) -> List[object]: ...

    def getName(self) -> unicode: ...

    def getPluginDescription(self) -> ghidra.framework.plugintool.util.PluginDescription: ...

    @staticmethod
    def getPluginName(__a0: java.lang.Class) -> unicode: ...

    def getSupportedDataTypes(self) -> List[java.lang.Class]: ...

    def getTool(self) -> ghidra.framework.plugintool.PluginTool: ...

    def getTransientState(self) -> object: ...

    def getUndoRedoState(self, __a0: ghidra.framework.model.DomainObject) -> object: ...

    def hasMissingRequiredService(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isDisposed(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def processEvent(self, __a0: ghidra.framework.plugintool.PluginEvent) -> None: ...

    def projectClosed(self, __a0: ghidra.framework.model.Project) -> None: ...

    def projectOpened(self, __a0: ghidra.framework.model.Project) -> None: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def readDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def restoreTransientState(self, __a0: object) -> None: ...

    def restoreUndoRedoState(self, __a0: ghidra.framework.model.DomainObject, __a1: object) -> None: ...

    def serviceAdded(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def serviceRemoved(self, __a0: java.lang.Class, __a1: object) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.options.SaveState) -> None: ...
