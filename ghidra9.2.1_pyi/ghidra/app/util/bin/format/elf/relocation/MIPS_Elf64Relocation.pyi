from typing import List
import ghidra.app.util.bin.format.elf
import ghidra.program.model.data
import ghidra.util
import java.lang


class MIPS_Elf64Relocation(ghidra.app.util.bin.format.elf.ElfRelocation):




    def __init__(self): ...



    def equals(self, __a0: object) -> bool: ...

    def getAddend(self) -> long: ...

    def getClass(self) -> java.lang.Class: ...

    def getOffset(self) -> long: ...

    def getRelocationIndex(self) -> int: ...

    def getRelocationInfo(self) -> long: ...

    def getSpecialSymbolIndex(self) -> int: ...

    @staticmethod
    def getStandardRelocationEntrySize(__a0: bool, __a1: bool) -> int: ...

    def getSymbolIndex(self) -> int: ...

    def getType(self) -> int: ...

    def hasAddend(self) -> bool: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def setOffset(self, __a0: long) -> None: ...

    @overload
    def setOffset(self, __a0: int) -> None: ...

    def setType(self, __a0: long) -> None: ...

    def toBytes(self, __a0: ghidra.util.DataConverter) -> List[int]: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def specialSymbolIndex(self) -> int: ...

    @property
    def symbolIndex(self) -> int: ...

    @property
    def type(self) -> int: ...
