from typing import List
import docking.widgets.fieldpanel.field
import docking.widgets.fieldpanel.support
import java.awt
import java.lang
import javax.swing


class ClangFieldElement(docking.widgets.fieldpanel.field.AbstractTextFieldElement):




    def __init__(self, token: ghidra.app.decompiler.ClangToken, as_: docking.widgets.fieldpanel.field.AttributedString, col: int): ...



    def charAt(self, index: int) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getCharacterIndexForDataLocation(self, dataRow: int, dataColumn: int) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getColor(self, charIndex: int) -> java.awt.Color: ...

    def getDataLocationForCharacterIndex(self, characterIndex: int) -> docking.widgets.fieldpanel.support.RowColLocation: ...

    def getFieldElement(self, characterOffset: int) -> docking.widgets.fieldpanel.field.FieldElement: ...

    def getHeightAbove(self) -> int: ...

    def getHeightBelow(self) -> int: ...

    def getMaxCharactersForWidth(self, width: int) -> int: ...

    def getStringWidth(self) -> int: ...

    def getText(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def length(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def paint(self, c: javax.swing.JComponent, g: java.awt.Graphics, x: int, y: int) -> None: ...

    def replaceAll(self, targets: List[int], replacement: int) -> docking.widgets.fieldpanel.field.FieldElement: ...

    @overload
    def substring(self, start: int) -> docking.widgets.fieldpanel.field.FieldElement: ...

    @overload
    def substring(self, start: int, end: int) -> docking.widgets.fieldpanel.field.FieldElement: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
