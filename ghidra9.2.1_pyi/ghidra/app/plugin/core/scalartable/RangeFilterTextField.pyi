from typing import List
import docking.widgets.textfield
import ghidra.app.plugin.core.scalartable
import java.awt.event
import java.lang
import javax.swing
import javax.swing.event


class RangeFilterTextField(docking.widgets.textfield.IntegerTextField):





    class FilterType(java.lang.Enum):
        MAX: ghidra.app.plugin.core.scalartable.RangeFilterTextField.FilterType = MAX
        MIN: ghidra.app.plugin.core.scalartable.RangeFilterTextField.FilterType = MIN







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.scalartable.RangeFilterTextField.FilterType: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.scalartable.RangeFilterTextField.FilterType]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.app.plugin.core.scalartable.RangeFilterTextField.FilterType, __a1: ghidra.program.model.listing.Program): ...



    def addActionListener(self, __a0: java.awt.event.ActionListener) -> None: ...

    def addChangeListener(self, __a0: javax.swing.event.ChangeListener) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getComponent(self) -> javax.swing.JComponent: ...

    def getFilterType(self) -> ghidra.app.plugin.core.scalartable.RangeFilterTextField.FilterType: ...

    def getFilterValue(self) -> long: ...

    def getIntValue(self) -> int: ...

    def getLimitValue(self) -> int: ...

    def getLongValue(self) -> long: ...

    def getMaxValue(self) -> long: ...

    def getText(self) -> unicode: ...

    def getValue(self) -> long: ...

    def hashCode(self) -> int: ...

    def isHexMode(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeActionListener(self, __a0: java.awt.event.ActionListener) -> None: ...

    def removeChangeListener(self, __a0: javax.swing.event.ChangeListener) -> None: ...

    def requestFocus(self) -> None: ...

    def selectAll(self) -> None: ...

    def setAllowNegativeValues(self, __a0: bool) -> None: ...

    def setAllowsHexPrefix(self, __a0: bool) -> None: ...

    def setDecimalMode(self) -> None: ...

    def setEnabled(self, __a0: bool) -> None: ...

    def setHexMode(self) -> None: ...

    def setMaxValue(self, __a0: long) -> None: ...

    def setShowNumberMode(self, __a0: bool) -> None: ...

    @overload
    def setValue(self, __a0: long) -> None: ...

    @overload
    def setValue(self, __a0: int) -> None: ...

    @overload
    def setValue(self, __a0: long) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def filterType(self) -> ghidra.app.plugin.core.scalartable.RangeFilterTextField.FilterType: ...

    @property
    def filterValue(self) -> long: ...

    @property
    def limitValue(self) -> int: ...
