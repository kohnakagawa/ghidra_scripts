from typing import List
import java.lang


class GhidraThreadGroup(java.lang.ThreadGroup):
    """
    GhidraThreadGroup provides a means of catching all uncaught
     exceptions which occur in any Ghidra thread.
    """





    def __init__(self):
        """
        Constructor for GhidraThreadGroup.
        """
        ...



    def activeCount(self) -> int: ...

    def activeGroupCount(self) -> int: ...

    def allowThreadSuspension(self, __a0: bool) -> bool: ...

    def checkAccess(self) -> None: ...

    def destroy(self) -> None: ...

    @overload
    def enumerate(self, __a0: List[java.lang.Thread]) -> int: ...

    @overload
    def enumerate(self, __a0: List[java.lang.ThreadGroup]) -> int: ...

    @overload
    def enumerate(self, __a0: List[java.lang.Thread], __a1: bool) -> int: ...

    @overload
    def enumerate(self, __a0: List[java.lang.ThreadGroup], __a1: bool) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getMaxPriority(self) -> int: ...

    def getName(self) -> unicode: ...

    def getParent(self) -> java.lang.ThreadGroup: ...

    @staticmethod
    def handleUncaughtException(t: java.lang.Throwable) -> None:
        """
        Handle any uncaught throwable/exception.
        @param t throwable
        """
        ...

    def hashCode(self) -> int: ...

    def interrupt(self) -> None: ...

    def isDaemon(self) -> bool: ...

    def isDestroyed(self) -> bool: ...

    def list(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def parentOf(self, __a0: java.lang.ThreadGroup) -> bool: ...

    def resume(self) -> None: ...

    def setDaemon(self, __a0: bool) -> None: ...

    def setMaxPriority(self, __a0: int) -> None: ...

    def stop(self) -> None: ...

    def suspend(self) -> None: ...

    def toString(self) -> unicode: ...

    def uncaughtException(self, t: java.lang.Thread, e: java.lang.Throwable) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
