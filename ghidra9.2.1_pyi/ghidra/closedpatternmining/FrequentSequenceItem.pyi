import ghidra.closedpatternmining
import java.lang
import java.util


class FrequentSequenceItem(object, java.lang.Comparable):




    def __init__(self, __a0: int, __a1: ghidra.closedpatternmining.SequenceItem): ...



    @overload
    def compareTo(self, __a0: ghidra.closedpatternmining.FrequentSequenceItem) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getItem(self) -> ghidra.closedpatternmining.SequenceItem: ...

    @staticmethod
    def getPrettyString(__a0: java.util.Collection) -> unicode: ...

    def getSupport(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def item(self) -> ghidra.closedpatternmining.SequenceItem: ...

    @property
    def support(self) -> int: ...
