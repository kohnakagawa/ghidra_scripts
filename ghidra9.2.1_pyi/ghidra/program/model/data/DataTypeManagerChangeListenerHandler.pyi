import ghidra.program.model.data
import java.lang


class DataTypeManagerChangeListenerHandler(object, ghidra.program.model.data.DataTypeManagerChangeListener):
    """
    Default implementation for a category change listener that sends out the
     events to its own list of category change listeners.
    """





    def __init__(self): ...



    def addDataTypeManagerListener(self, l: ghidra.program.model.data.DataTypeManagerChangeListener) -> None:
        """
        Add the given category change listener.
        @param l the listener to be added.
        """
        ...

    def categoryAdded(self, dtm: ghidra.program.model.data.DataTypeManager, path: ghidra.program.model.data.CategoryPath) -> None: ...

    def categoryMoved(self, dtm: ghidra.program.model.data.DataTypeManager, oldPath: ghidra.program.model.data.CategoryPath, newPath: ghidra.program.model.data.CategoryPath) -> None: ...

    def categoryRemoved(self, dtm: ghidra.program.model.data.DataTypeManager, path: ghidra.program.model.data.CategoryPath) -> None: ...

    def categoryRenamed(self, dtm: ghidra.program.model.data.DataTypeManager, oldPath: ghidra.program.model.data.CategoryPath, newPath: ghidra.program.model.data.CategoryPath) -> None: ...

    def dataTypeAdded(self, dtm: ghidra.program.model.data.DataTypeManager, path: ghidra.program.model.data.DataTypePath) -> None: ...

    def dataTypeChanged(self, dtm: ghidra.program.model.data.DataTypeManager, path: ghidra.program.model.data.DataTypePath) -> None: ...

    def dataTypeMoved(self, dtm: ghidra.program.model.data.DataTypeManager, oldPath: ghidra.program.model.data.DataTypePath, newPath: ghidra.program.model.data.DataTypePath) -> None: ...

    def dataTypeRemoved(self, dtm: ghidra.program.model.data.DataTypeManager, path: ghidra.program.model.data.DataTypePath) -> None: ...

    def dataTypeRenamed(self, dtm: ghidra.program.model.data.DataTypeManager, oldPath: ghidra.program.model.data.DataTypePath, newPath: ghidra.program.model.data.DataTypePath) -> None: ...

    def dataTypeReplaced(self, dtm: ghidra.program.model.data.DataTypeManager, oldPath: ghidra.program.model.data.DataTypePath, newPath: ghidra.program.model.data.DataTypePath, newDataType: ghidra.program.model.data.DataType) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def favoritesChanged(self, dtm: ghidra.program.model.data.DataTypeManager, path: ghidra.program.model.data.DataTypePath, isFavorite: bool) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeDataTypeManagerListener(self, l: ghidra.program.model.data.DataTypeManagerChangeListener) -> None:
        """
        Remove the category change listener.
        @param l the listener to be removed.
        """
        ...

    def sourceArchiveAdded(self, dataTypeManager: ghidra.program.model.data.DataTypeManager, dataTypeSource: ghidra.program.model.data.SourceArchive) -> None: ...

    def sourceArchiveChanged(self, dataTypeManager: ghidra.program.model.data.DataTypeManager, dataTypeSource: ghidra.program.model.data.SourceArchive) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
