import ghidra.program.model.pcode
import java.io
import java.lang


class Handle(object, java.io.Serializable):
    OFFSET: int = 1
    SIZE: int = 2
    SPACE: int = 0



    def __init__(self, p: ghidra.program.model.pcode.Varnode, sp: int, sz: int): ...



    def dynamic(self) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getLong(self, select1: int, select2: int) -> long:
        """
        Method getLong.
        @param select1
        @param select2
        @return long
        """
        ...

    def getPtr(self) -> ghidra.program.model.pcode.Varnode: ...

    def getSize(self) -> long: ...

    def getSpace(self) -> long: ...

    def hashCode(self) -> int: ...

    def isAddress(self) -> bool: ...

    def isCodeAddress(self) -> bool: ...

    def isConstant(self) -> bool: ...

    def isDataAddress(self) -> bool: ...

    def isRegister(self) -> bool: ...

    def isUnique(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def address(self) -> bool: ...

    @property
    def codeAddress(self) -> bool: ...

    @property
    def constant(self) -> bool: ...

    @property
    def dataAddress(self) -> bool: ...

    @property
    def ptr(self) -> ghidra.program.model.pcode.Varnode: ...

    @property
    def register(self) -> bool: ...

    @property
    def size(self) -> long: ...

    @property
    def space(self) -> long: ...

    @property
    def unique(self) -> bool: ...
