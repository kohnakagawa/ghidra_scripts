import db
import ghidra.feature.vt.api.db
import ghidra.feature.vt.api.main
import ghidra.program.database
import ghidra.program.model.address
import ghidra.util
import ghidra.util.task
import java.lang
import java.util


class VTAssociationDB(ghidra.program.database.DatabaseObject, ghidra.feature.vt.api.main.VTAssociation):
    associationDBM: ghidra.feature.vt.api.db.AssociationDatabaseManager
    record: db.Record



    def __init__(self, __a0: ghidra.feature.vt.api.db.AssociationDatabaseManager, __a1: ghidra.program.database.DBObjectCache, __a2: db.Record): ...



    def checkDeleted(self) -> None: ...

    @overload
    def checkIsValid(self) -> bool: ...

    @overload
    def checkIsValid(self, __a0: db.Record) -> bool: ...

    def clearStatus(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAssociationDatabaseManager(self) -> ghidra.feature.vt.api.db.AssociationDatabaseManager: ...

    def getAssociationManager(self) -> ghidra.feature.vt.api.main.VTAssociationManager: ...

    def getAssociationManagerDB(self) -> ghidra.feature.vt.api.db.AssociationDatabaseManager: ...

    def getClass(self) -> java.lang.Class: ...

    def getDestinationAddress(self) -> ghidra.program.model.address.Address: ...

    def getKey(self) -> long: ...

    def getMarkupItems(self, __a0: ghidra.util.task.TaskMonitor) -> java.util.Collection: ...

    def getMarkupStatus(self) -> ghidra.feature.vt.api.main.VTAssociationMarkupStatus: ...

    def getRelatedAssociations(self) -> java.util.Collection: ...

    def getSession(self) -> ghidra.feature.vt.api.main.VTSession: ...

    def getSourceAddress(self) -> ghidra.program.model.address.Address: ...

    def getStatus(self) -> ghidra.feature.vt.api.main.VTAssociationStatus: ...

    def getType(self) -> ghidra.feature.vt.api.main.VTAssociationType: ...

    def getVoteCount(self) -> int: ...

    def hasAppliedMarkupItems(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isDeleted(self) -> bool: ...

    def isInvalid(self) -> bool: ...

    def markupItemStatusChanged(self, __a0: ghidra.feature.vt.api.main.VTMarkupItem) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setAccepted(self) -> None: ...

    def setInvalid(self) -> None: ...

    def setMarkupStatus(self, __a0: ghidra.feature.vt.api.main.VTAssociationMarkupStatus) -> None: ...

    def setRejected(self) -> None: ...

    def setStatus(self, __a0: ghidra.feature.vt.api.main.VTAssociationStatus) -> None: ...

    def setVoteCount(self, __a0: int) -> None: ...

    def toString(self) -> unicode: ...

    def validate(self, __a0: ghidra.util.Lock) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def associationDatabaseManager(self) -> ghidra.feature.vt.api.db.AssociationDatabaseManager: ...

    @property
    def associationManager(self) -> ghidra.feature.vt.api.main.VTAssociationManager: ...

    @property
    def associationManagerDB(self) -> ghidra.feature.vt.api.db.AssociationDatabaseManager: ...

    @property
    def destinationAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def markupStatus(self) -> ghidra.feature.vt.api.main.VTAssociationMarkupStatus: ...

    @markupStatus.setter
    def markupStatus(self, value: ghidra.feature.vt.api.main.VTAssociationMarkupStatus) -> None: ...

    @property
    def relatedAssociations(self) -> java.util.Collection: ...

    @property
    def session(self) -> ghidra.feature.vt.api.main.VTSession: ...

    @property
    def sourceAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def status(self) -> ghidra.feature.vt.api.main.VTAssociationStatus: ...

    @status.setter
    def status(self, value: ghidra.feature.vt.api.main.VTAssociationStatus) -> None: ...

    @property
    def type(self) -> ghidra.feature.vt.api.main.VTAssociationType: ...

    @property
    def voteCount(self) -> int: ...

    @voteCount.setter
    def voteCount(self, value: int) -> None: ...
