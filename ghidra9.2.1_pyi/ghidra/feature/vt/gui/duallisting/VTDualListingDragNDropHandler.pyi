import docking.dnd
import java.awt
import java.awt.datatransfer
import java.awt.dnd
import java.lang


class VTDualListingDragNDropHandler(object, docking.dnd.Draggable, docking.dnd.Droppable):




    def __init__(self, __a0: ghidra.feature.vt.gui.plugin.VTController, __a1: ghidra.app.util.viewer.listingpanel.ListingCodeComparisonPanel): ...



    def add(self, __a0: object, __a1: java.awt.dnd.DropTargetDropEvent, __a2: java.awt.datatransfer.DataFlavor) -> None: ...

    def dragCanceled(self, __a0: java.awt.dnd.DragSourceDropEvent) -> None: ...

    def dragUnderFeedback(self, __a0: bool, __a1: java.awt.dnd.DropTargetDragEvent) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDragAction(self) -> int: ...

    def getDragSourceListener(self) -> java.awt.dnd.DragSourceListener: ...

    def getTransferable(self, __a0: java.awt.Point) -> java.awt.datatransfer.Transferable: ...

    def hashCode(self) -> int: ...

    def isDropOk(self, __a0: java.awt.dnd.DropTargetDragEvent) -> bool: ...

    def isStartDragOk(self, __a0: java.awt.dnd.DragGestureEvent) -> bool: ...

    def move(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    def undoDragUnderFeedback(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def dragAction(self) -> int: ...

    @property
    def dragSourceListener(self) -> java.awt.dnd.DragSourceListener: ...
