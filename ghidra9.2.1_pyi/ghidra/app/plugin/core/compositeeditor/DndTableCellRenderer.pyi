import java.awt
import java.lang
import javax.swing
import javax.swing.border
import javax.swing.table


class DndTableCellRenderer(object, javax.swing.table.TableCellRenderer):





    class DndBorder(javax.swing.border.AbstractBorder):
        ALL: int = 15
        BOTTOM: int = 4
        LEFT: int = 8
        RIGHT: int = 2
        TOP: int = 1



        def __init__(self, __a0: int, __a1: int, __a2: java.awt.Color, __a3: javax.swing.border.Border): ...



        def addBorders(self, __a0: int) -> None: ...

        def clrBorders(self) -> None: ...

        def delBorders(self, __a0: int) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getBaseline(self, __a0: java.awt.Component, __a1: int, __a2: int) -> int: ...

        def getBaselineResizeBehavior(self, __a0: java.awt.Component) -> java.awt.Component.BaselineResizeBehavior: ...

        @overload
        def getBorderInsets(self, __a0: java.awt.Component) -> java.awt.Insets: ...

        @overload
        def getBorderInsets(self, __a0: java.awt.Component, __a1: java.awt.Insets) -> java.awt.Insets: ...

        def getClass(self) -> java.lang.Class: ...

        def getColor(self) -> java.awt.Color: ...

        @overload
        def getInteriorRectangle(self, __a0: java.awt.Component, __a1: int, __a2: int, __a3: int, __a4: int) -> java.awt.Rectangle: ...

        @overload
        @staticmethod
        def getInteriorRectangle(__a0: java.awt.Component, __a1: javax.swing.border.Border, __a2: int, __a3: int, __a4: int, __a5: int) -> java.awt.Rectangle: ...

        def getUnderBorder(self) -> javax.swing.border.Border: ...

        def hashCode(self) -> int: ...

        def isBorderOpaque(self) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def paintBorder(self, __a0: java.awt.Component, __a1: java.awt.Graphics, __a2: int, __a3: int, __a4: int, __a5: int) -> None: ...

        def setColor(self, __a0: java.awt.Color) -> None: ...

        def setUnderBorder(self, __a0: javax.swing.border.Border) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def borderOpaque(self) -> bool: ...

        @property
        def color(self) -> java.awt.Color: ...

        @color.setter
        def color(self, value: java.awt.Color) -> None: ...

        @property
        def underBorder(self) -> javax.swing.border.Border: ...

        @underBorder.setter
        def underBorder(self, value: javax.swing.border.Border) -> None: ...

    def __init__(self, __a0: javax.swing.table.TableCellRenderer, __a1: javax.swing.JTable): ...



    def equals(self, __a0: object) -> bool: ...

    def getBorderColor(self) -> java.awt.Color: ...

    def getClass(self) -> java.lang.Class: ...

    def getTableCellRendererComponent(self, __a0: javax.swing.JTable, __a1: object, __a2: bool, __a3: bool, __a4: int, __a5: int) -> java.awt.Component: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def selectRange(self, __a0: bool) -> None: ...

    def setBorderColor(self, __a0: java.awt.Color) -> None: ...

    def setRowForFeedback(self, __a0: int) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def borderColor(self) -> java.awt.Color: ...

    @borderColor.setter
    def borderColor(self, value: java.awt.Color) -> None: ...

    @property
    def rowForFeedback(self) -> None: ...  # No getter available.

    @rowForFeedback.setter
    def rowForFeedback(self, value: int) -> None: ...
