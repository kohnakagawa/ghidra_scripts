import java.applet
import java.awt
import java.lang
import javax.swing


class GRepaintManager(javax.swing.RepaintManager):
    """
    A repaint manager that can be plugged-in to Java's RepaintManager in order to
     change how we paint colors.
    """





    def __init__(self): ...



    @overload
    def addDirtyRegion(self, __a0: java.applet.Applet, __a1: int, __a2: int, __a3: int, __a4: int) -> None: ...

    @overload
    def addDirtyRegion(self, __a0: java.awt.Window, __a1: int, __a2: int, __a3: int, __a4: int) -> None: ...

    @overload
    def addDirtyRegion(self, __a0: javax.swing.JComponent, __a1: int, __a2: int, __a3: int, __a4: int) -> None: ...

    def addInvalidComponent(self, __a0: javax.swing.JComponent) -> None: ...

    @overload
    @staticmethod
    def currentManager(__a0: javax.swing.JComponent) -> javax.swing.RepaintManager: ...

    @overload
    @staticmethod
    def currentManager(__a0: java.awt.Component) -> javax.swing.RepaintManager: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDirtyRegion(self, __a0: javax.swing.JComponent) -> java.awt.Rectangle: ...

    def getDoubleBufferMaximumSize(self) -> java.awt.Dimension: ...

    def getOffscreenBuffer(self, __a0: java.awt.Component, __a1: int, __a2: int) -> java.awt.Image: ...

    def getVolatileOffscreenBuffer(self, c: java.awt.Component, proposedWidth: int, proposedHeight: int) -> java.awt.Image: ...

    def hashCode(self) -> int: ...

    def isCompletelyDirty(self, __a0: javax.swing.JComponent) -> bool: ...

    def isDoubleBufferingEnabled(self) -> bool: ...

    def markCompletelyClean(self, __a0: javax.swing.JComponent) -> None: ...

    def markCompletelyDirty(self, __a0: javax.swing.JComponent) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def paintDirtyRegions(self) -> None: ...

    def removeInvalidComponent(self, __a0: javax.swing.JComponent) -> None: ...

    @staticmethod
    def setCurrentManager(__a0: javax.swing.RepaintManager) -> None: ...

    def setDoubleBufferMaximumSize(self, __a0: java.awt.Dimension) -> None: ...

    def setDoubleBufferingEnabled(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    def validateInvalidComponents(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
