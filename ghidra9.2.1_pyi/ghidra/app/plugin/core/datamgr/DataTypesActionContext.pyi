from typing import List
import docking
import docking.widgets.tree
import ghidra.app.context
import ghidra.framework.main.datatable
import ghidra.program.model.listing
import java.awt
import java.awt.event
import java.lang


class DataTypesActionContext(ghidra.app.context.ProgramActionContext, ghidra.framework.main.datatable.DomainFileContext):




    @overload
    def __init__(self, __a0: ghidra.app.plugin.core.datamgr.DataTypesProvider, __a1: ghidra.program.model.listing.Program, __a2: ghidra.app.plugin.core.datamgr.tree.DataTypeArchiveGTree, __a3: docking.widgets.tree.GTreeNode): ...

    @overload
    def __init__(self, __a0: ghidra.app.plugin.core.datamgr.DataTypesProvider, __a1: ghidra.program.model.listing.Program, __a2: ghidra.app.plugin.core.datamgr.tree.DataTypeArchiveGTree, __a3: docking.widgets.tree.GTreeNode, __a4: bool): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getComponentProvider(self) -> docking.ComponentProvider: ...

    def getContextObject(self) -> object: ...

    def getFileCount(self) -> int: ...

    def getGlobalContext(self) -> docking.ActionContext: ...

    def getMouseEvent(self) -> java.awt.event.MouseEvent: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getSelectedFiles(self) -> List[object]: ...

    def getSelectedNode(self) -> docking.widgets.tree.GTreeNode: ...

    def getSourceComponent(self) -> java.awt.Component: ...

    def getSourceObject(self) -> object: ...

    def hashCode(self) -> int: ...

    def isInActiveProject(self) -> bool: ...

    def isToolbarAction(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setContextObject(self, __a0: object) -> docking.ActionContext: ...

    def setMouseEvent(self, __a0: java.awt.event.MouseEvent) -> docking.ActionContext: ...

    def setSourceObject(self, __a0: object) -> docking.ActionContext: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def fileCount(self) -> int: ...

    @property
    def inActiveProject(self) -> bool: ...

    @property
    def selectedFiles(self) -> List[object]: ...

    @property
    def selectedNode(self) -> docking.widgets.tree.GTreeNode: ...

    @property
    def toolbarAction(self) -> bool: ...
