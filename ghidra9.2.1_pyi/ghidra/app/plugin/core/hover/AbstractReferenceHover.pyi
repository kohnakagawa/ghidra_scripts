import docking.widgets.fieldpanel.field
import docking.widgets.fieldpanel.support
import ghidra.app.plugin.core.hover
import ghidra.framework.options
import ghidra.program.model.listing
import ghidra.program.util
import java.lang
import javax.swing


class AbstractReferenceHover(ghidra.app.plugin.core.hover.AbstractConfigurableHover):
    WINDOW_OFFSET: int = 50



    def __init__(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: int): ...



    def componentHidden(self) -> None: ...

    def componentShown(self) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getHoverComponent(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.util.ProgramLocation, __a2: docking.widgets.fieldpanel.support.FieldLocation, __a3: docking.widgets.fieldpanel.field.Field) -> javax.swing.JComponent: ...

    def getPriority(self) -> int: ...

    def hashCode(self) -> int: ...

    def hoverModeSelected(self) -> bool: ...

    def initializeOptions(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def optionsChanged(self, __a0: ghidra.framework.options.ToolOptions, __a1: unicode, __a2: object, __a3: object) -> None: ...

    def programClosed(self, __a0: ghidra.program.model.listing.Program) -> None: ...

    def scroll(self, __a0: int) -> None: ...

    def setOptions(self, __a0: ghidra.framework.options.Options, __a1: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
