from typing import List
import java.lang


class Utils(object):
    endl: unicode = u'\n'



    def __init__(self): ...



    @staticmethod
    def bigIntegerToBytes(val: long, size: int, bigEndian: bool) -> List[int]: ...

    @staticmethod
    def byte_swap(val: long, size: int) -> long: ...

    @staticmethod
    def bytesToBigInteger(byteBuf: List[int], size: int, bigEndian: bool, signed: bool) -> long: ...

    @staticmethod
    def bytesToLong(byteBuf: List[int], size: int, bigEndian: bool) -> long: ...

    @staticmethod
    def calc_bigmask(size: int) -> long: ...

    @staticmethod
    def calc_mask(size: int) -> long: ...

    @staticmethod
    def convertToSignedValue(val: long, byteSize: int) -> long: ...

    @staticmethod
    def convertToUnsignedValue(val: long, byteSize: int) -> long: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def longToBytes(val: long, size: int, bigEndian: bool) -> List[int]: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def sign_extend(in_: long, sizein: int, sizeout: int) -> long: ...

    @staticmethod
    def signbit_negative(val: long, size: int) -> bool: ...

    def toString(self) -> unicode: ...

    @staticmethod
    def uintb_negate(in_: long, size: int) -> long: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @staticmethod
    def zzz_sign_extend(val: long, bit: int) -> long: ...

    @staticmethod
    def zzz_zero_extend(val: long, bit: int) -> long: ...
