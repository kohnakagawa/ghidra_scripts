from typing import List
import java.awt
import java.awt.event
import java.lang
import java.util
import javax.swing
import javax.swing.event
import javax.swing.tree


class DataTypesTreeCellEditor(javax.swing.tree.DefaultTreeCellEditor):




    def __init__(self, __a0: javax.swing.JTree, __a1: javax.swing.tree.DefaultTreeCellRenderer, __a2: ghidra.app.plugin.core.datamgr.DataTypeManagerPlugin): ...



    def actionPerformed(self, __a0: java.awt.event.ActionEvent) -> None: ...

    def addCellEditorListener(self, __a0: javax.swing.event.CellEditorListener) -> None: ...

    def cancelCellEditing(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getBorderSelectionColor(self) -> java.awt.Color: ...

    def getCellEditorListeners(self) -> List[javax.swing.event.CellEditorListener]: ...

    def getCellEditorValue(self) -> object: ...

    def getClass(self) -> java.lang.Class: ...

    def getFont(self) -> java.awt.Font: ...

    def getTreeCellEditorComponent(self, __a0: javax.swing.JTree, __a1: object, __a2: bool, __a3: bool, __a4: bool, __a5: int) -> java.awt.Component: ...

    def hashCode(self) -> int: ...

    def isCellEditable(self, __a0: java.util.EventObject) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeCellEditorListener(self, __a0: javax.swing.event.CellEditorListener) -> None: ...

    def setBorderSelectionColor(self, __a0: java.awt.Color) -> None: ...

    def setFont(self, __a0: java.awt.Font) -> None: ...

    def shouldSelectCell(self, __a0: java.util.EventObject) -> bool: ...

    def stopCellEditing(self) -> bool: ...

    def toString(self) -> unicode: ...

    def valueChanged(self, __a0: javax.swing.event.TreeSelectionEvent) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
