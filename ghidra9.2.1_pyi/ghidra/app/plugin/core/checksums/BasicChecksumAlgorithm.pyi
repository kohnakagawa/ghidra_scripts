from typing import List
import ghidra.app.plugin.core.checksums
import ghidra.program.model.address
import ghidra.program.model.mem
import ghidra.util.task
import java.lang


class BasicChecksumAlgorithm(ghidra.app.plugin.core.checksums.ChecksumAlgorithm):





    class SupportedByteSize(java.lang.Enum):
        CHECKSUM16: ghidra.app.plugin.core.checksums.BasicChecksumAlgorithm.SupportedByteSize = CHECKSUM16
        CHECKSUM32: ghidra.app.plugin.core.checksums.BasicChecksumAlgorithm.SupportedByteSize = CHECKSUM32
        CHECKSUM8: ghidra.app.plugin.core.checksums.BasicChecksumAlgorithm.SupportedByteSize = CHECKSUM8







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getNumBytes(self) -> int: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.plugin.core.checksums.BasicChecksumAlgorithm.SupportedByteSize: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.plugin.core.checksums.BasicChecksumAlgorithm.SupportedByteSize]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def numBytes(self) -> int: ...

    def __init__(self, __a0: ghidra.app.plugin.core.checksums.BasicChecksumAlgorithm.SupportedByteSize): ...



    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def format(__a0: List[int], __a1: bool) -> unicode: ...

    def getChecksum(self) -> List[int]: ...

    def getClass(self) -> java.lang.Class: ...

    def getName(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def reset(self) -> None: ...

    def supportsDecimal(self) -> bool: ...

    @staticmethod
    def toArray(__a0: long, __a1: int) -> List[int]: ...

    def toString(self) -> unicode: ...

    @overload
    def updateChecksum(self, __a0: ghidra.program.model.mem.Memory, __a1: ghidra.program.model.address.AddressSetView, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    @overload
    def updateChecksum(self, __a0: ghidra.program.model.mem.Memory, __a1: ghidra.program.model.address.AddressSetView, __a2: ghidra.util.task.TaskMonitor, __a3: ghidra.app.plugin.core.checksums.ComputeChecksumsProvider) -> None: ...

    @overload
    def updateChecksum(self, __a0: ghidra.program.model.mem.Memory, __a1: ghidra.program.model.address.AddressSetView, __a2: ghidra.util.task.TaskMonitor, __a3: bool, __a4: bool, __a5: bool, __a6: bool) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
