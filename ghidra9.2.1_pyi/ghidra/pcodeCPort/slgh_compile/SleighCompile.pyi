from typing import List
import generic.stl
import ghidra.pcodeCPort.address
import ghidra.pcodeCPort.pcoderaw
import ghidra.pcodeCPort.semantics
import ghidra.pcodeCPort.sleighbase
import ghidra.pcodeCPort.slgh_compile
import ghidra.pcodeCPort.slghpatexpress
import ghidra.pcodeCPort.slghsymbol
import ghidra.pcodeCPort.space
import ghidra.pcodeCPort.xml
import ghidra.sleigh.grammar
import java.io
import java.lang
import org.jdom


class SleighCompile(ghidra.pcodeCPort.sleighbase.SleighBase):
    noplist: generic.stl.VectorSTL
    pcode: ghidra.pcodeCPort.slgh_compile.PcodeCompile
    warnalllocalcollisions: bool
    warnallnops: bool
    withstack: java.util.Deque



    def __init__(self): ...



    def addContextField(self, __a0: ghidra.pcodeCPort.slghsymbol.VarnodeSymbol, __a1: ghidra.pcodeCPort.slgh_compile.FieldQuality) -> bool: ...

    def addRegister(self, __a0: unicode, __a1: ghidra.pcodeCPort.space.AddrSpace, __a2: long, __a3: int) -> None: ...

    def addSpacebase(self, __a0: ghidra.pcodeCPort.space.AddrSpace, __a1: ghidra.pcodeCPort.space.AddrSpace, __a2: long, __a3: int) -> None: ...

    def addTokenField(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.TokenSymbol, __a2: ghidra.pcodeCPort.slgh_compile.FieldQuality) -> None: ...

    def addUserOp(self, __a0: generic.stl.VectorSTL, __a1: generic.stl.VectorSTL) -> None: ...

    def allowContextSet(self, __a0: bool) -> None: ...

    def assignShortcut(self, __a0: ghidra.pcodeCPort.space.spacetype) -> int: ...

    def attachNames(self, __a0: generic.stl.VectorSTL, __a1: generic.stl.VectorSTL, __a2: generic.stl.VectorSTL) -> None: ...

    def attachValues(self, __a0: generic.stl.VectorSTL, __a1: generic.stl.VectorSTL, __a2: generic.stl.VectorSTL) -> None: ...

    def attachVarnodes(self, __a0: generic.stl.VectorSTL, __a1: generic.stl.VectorSTL, __a2: generic.stl.VectorSTL) -> None: ...

    def buildConstructor(self, __a0: ghidra.pcodeCPort.slghsymbol.Constructor, __a1: ghidra.pcodeCPort.slghpatexpress.PatternEquation, __a2: generic.stl.VectorSTL, __a3: ghidra.pcodeCPort.slgh_compile.SectionVector) -> None: ...

    def buildMacro(self, __a0: ghidra.pcodeCPort.slghsymbol.MacroSymbol, __a1: ghidra.pcodeCPort.semantics.ConstructTpl) -> None: ...

    def calcContextLayout(self) -> None: ...

    def constrainOperand(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.OperandSymbol, __a2: ghidra.pcodeCPort.slghpatexpress.PatternExpression) -> ghidra.pcodeCPort.slghpatexpress.PatternEquation: ...

    def contextMod(self, __a0: generic.stl.VectorSTL, __a1: ghidra.pcodeCPort.slghsymbol.ContextSymbol, __a2: ghidra.pcodeCPort.slghpatexpress.PatternExpression) -> bool: ...

    def contextSet(self, __a0: generic.stl.VectorSTL, __a1: ghidra.pcodeCPort.slghsymbol.TripleSymbol, __a2: ghidra.pcodeCPort.slghsymbol.ContextSymbol) -> None: ...

    def createConstFromSpace(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> ghidra.pcodeCPort.address.Address: ...

    def createConstructor(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.SubtableSymbol) -> ghidra.pcodeCPort.slghsymbol.Constructor: ...

    def createMacro(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: generic.stl.VectorSTL, __a3: generic.stl.VectorSTL) -> ghidra.pcodeCPort.slghsymbol.MacroSymbol: ...

    def createMacroUse(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.MacroSymbol, __a2: generic.stl.VectorSTL) -> generic.stl.VectorSTL: ...

    def dedupSymbolList(self, __a0: generic.stl.VectorSTL) -> ghidra.pcodeCPort.slghsymbol.SleighSymbol: ...

    def defineBitrange(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: ghidra.pcodeCPort.slghsymbol.VarnodeSymbol, __a3: int, __a4: int) -> None: ...

    def defineInvisibleOperand(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.TripleSymbol) -> ghidra.pcodeCPort.slghpatexpress.PatternEquation: ...

    def defineOperand(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.OperandSymbol, __a2: ghidra.pcodeCPort.slghpatexpress.PatternExpression) -> None: ...

    def defineToken(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: long, __a3: int) -> ghidra.pcodeCPort.slghsymbol.TokenSymbol: ...

    def defineVarnodes(self, __a0: ghidra.pcodeCPort.slghsymbol.SpaceSymbol, __a1: long, __a2: int, __a3: generic.stl.VectorSTL, __a4: generic.stl.VectorSTL) -> None: ...

    def dispose(self) -> None: ...

    @staticmethod
    def entry(__a0: unicode, __a1: List[object]) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def findSymbol(self, __a0: int) -> ghidra.pcodeCPort.slghsymbol.SleighSymbol: ...

    @overload
    def findSymbol(self, __a0: unicode) -> ghidra.pcodeCPort.slghsymbol.SleighSymbol: ...

    def getAddrSize(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getConstant(self, __a0: long) -> ghidra.pcodeCPort.address.Address: ...

    def getConstantSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getDefaultSize(self) -> int: ...

    def getDefaultSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getFspecSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getIopSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getNextSpaceInOrder(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getRegister(self, __a0: unicode) -> ghidra.pcodeCPort.pcoderaw.VarnodeData: ...

    def getRegisterName(self, __a0: ghidra.pcodeCPort.space.AddrSpace, __a1: long, __a2: int) -> unicode: ...

    def getSpace(self, __a0: int) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getSpaceByName(self, __a0: unicode) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getSpaceByShortcut(self, __a0: int) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getSpaceBySpacebase(self, __a0: ghidra.pcodeCPort.address.Address, __a1: int) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getSpacebase(self, __a0: ghidra.pcodeCPort.space.AddrSpace, __a1: int) -> ghidra.pcodeCPort.pcoderaw.VarnodeData: ...

    def getStackSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getUniqueBase(self) -> long: ...

    def getUniqueSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getUserOpNames(self, __a0: generic.stl.VectorSTL) -> None: ...

    def hashCode(self) -> int: ...

    def highPtrPossible(self, __a0: ghidra.pcodeCPort.address.Address, __a1: int) -> bool: ...

    def initialize(self, __a0: ghidra.pcodeCPort.xml.DocumentStorage) -> None: ...

    def insertSpace(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> None: ...

    def instructionLength(self, __a0: ghidra.pcodeCPort.address.Address) -> int: ...

    def isBigEndian(self) -> bool: ...

    def isInitialized(self) -> bool: ...

    @staticmethod
    def main(__a0: List[unicode]) -> None: ...

    def newOperand(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.Constructor, __a2: unicode) -> None: ...

    def newSpace(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slgh_compile.SpaceQuality) -> None: ...

    def newTable(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> ghidra.pcodeCPort.slghsymbol.SubtableSymbol: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def numErrors(self) -> int: ...

    def numSpacebase(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> int: ...

    def numSpaces(self) -> int: ...

    def numWarnings(self) -> int: ...

    def parseNoHighPtr(self, __a0: org.jdom.Element) -> None: ...

    def parseSpacebase(self, __a0: org.jdom.Element) -> None: ...

    def parseStackPointer(self, __a0: org.jdom.Element) -> None: ...

    def popWith(self) -> None: ...

    def printAssembly(self, __a0: java.io.PrintStream, __a1: int, __a2: ghidra.pcodeCPort.address.Address) -> int: ...

    def process(self) -> None: ...

    def pushWith(self, __a0: ghidra.pcodeCPort.slghsymbol.SubtableSymbol, __a1: ghidra.pcodeCPort.slghpatexpress.PatternEquation, __a2: generic.stl.VectorSTL) -> None: ...

    def recordNop(self, __a0: ghidra.sleigh.grammar.Location) -> None: ...

    @overload
    def reportError(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> None: ...

    @overload
    def reportError(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: java.lang.Throwable) -> None: ...

    def reportWarning(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> None: ...

    def saveXml(self, __a0: java.io.PrintStream) -> None: ...

    def selfDefine(self, __a0: ghidra.pcodeCPort.slghsymbol.OperandSymbol) -> None: ...

    def setAlignment(self, __a0: int) -> None: ...

    def setContextDefault(self, __a0: unicode, __a1: int) -> None: ...

    def setDefaultSpace(self, __a0: int) -> None: ...

    def setEndian(self, __a0: int) -> None: ...

    def setLanguage(self, __a0: unicode) -> None: ...

    def setLineno(self, __a0: int) -> None: ...

    def setPosition(self, __a0: unicode, __a1: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def alignment(self) -> None: ...  # No getter available.

    @alignment.setter
    def alignment(self, value: int) -> None: ...

    @property
    def endian(self) -> None: ...  # No getter available.

    @endian.setter
    def endian(self, value: int) -> None: ...

    @property
    def lineno(self) -> None: ...  # No getter available.

    @lineno.setter
    def lineno(self, value: int) -> None: ...
