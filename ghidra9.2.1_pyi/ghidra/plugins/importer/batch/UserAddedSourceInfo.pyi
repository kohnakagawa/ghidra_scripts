import ghidra.formats.gfilesystem
import java.lang


class UserAddedSourceInfo(object):
    """
    This class holds information regarding a single user-added source file added
     to a batch import session.
    """









    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getContainerCount(self) -> int: ...

    def getFSRL(self) -> ghidra.formats.gfilesystem.FSRL: ...

    def getFileCount(self) -> int: ...

    def getMaxNestLevel(self) -> int: ...

    def getRawFileCount(self) -> int: ...

    def hashCode(self) -> int: ...

    def incContainerCount(self) -> None: ...

    def incRawFileCount(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setContainerCount(self, containerCount: int) -> None: ...

    def setFileCount(self, fileCount: int) -> None: ...

    def setMaxNestLevel(self, maxNestLevel: int) -> None: ...

    def setRawFileCount(self, rawFileCount: int) -> None: ...

    def setRecurseTerminatedEarly(self, recurseTerminatedEarly: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def wasRecurseTerminatedEarly(self) -> bool: ...

    @property
    def FSRL(self) -> ghidra.formats.gfilesystem.FSRL: ...

    @property
    def containerCount(self) -> int: ...

    @containerCount.setter
    def containerCount(self, value: int) -> None: ...

    @property
    def fileCount(self) -> int: ...

    @fileCount.setter
    def fileCount(self, value: int) -> None: ...

    @property
    def maxNestLevel(self) -> int: ...

    @maxNestLevel.setter
    def maxNestLevel(self, value: int) -> None: ...

    @property
    def rawFileCount(self) -> int: ...

    @rawFileCount.setter
    def rawFileCount(self, value: int) -> None: ...

    @property
    def recurseTerminatedEarly(self) -> None: ...  # No getter available.

    @recurseTerminatedEarly.setter
    def recurseTerminatedEarly(self, value: bool) -> None: ...
