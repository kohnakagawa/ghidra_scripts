import ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame
import ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable
import ghidra.program.model.address
import ghidra.program.model.mem
import java.lang


class RegionDescriptor(object):




    def __init__(self, __a0: ghidra.program.model.mem.MemoryBlock): ...



    def equals(self, __a0: object) -> bool: ...

    def getActionTable(self) -> ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAActionTable: ...

    def getCallSiteTable(self) -> ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDACallSiteTable: ...

    def getClass(self) -> java.lang.Class: ...

    def getEHMemoryBlock(self) -> ghidra.program.model.mem.MemoryBlock: ...

    def getFrameDescriptorEntry(self) -> ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.FrameDescriptionEntry: ...

    def getLSDAAddress(self, __a0: ghidra.program.model.address.Address) -> ghidra.program.model.address.Address: ...

    def getLSDATable(self) -> ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDATable: ...

    def getRange(self) -> ghidra.program.model.address.AddressRange: ...

    def getRangeSize(self) -> long: ...

    def getRangeStart(self) -> ghidra.program.model.address.Address: ...

    def getTypeTable(self) -> ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDATypeTable: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setFrameDescriptorEntry(self, __a0: ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.FrameDescriptionEntry) -> None: ...

    def setIPRange(self, __a0: ghidra.program.model.address.AddressRange) -> None: ...

    def setLSDAAddress(self, __a0: ghidra.program.model.address.Address) -> None: ...

    def setLSDATable(self, __a0: ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDATable) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def EHMemoryBlock(self) -> ghidra.program.model.mem.MemoryBlock: ...

    @property
    def IPRange(self) -> None: ...  # No getter available.

    @IPRange.setter
    def IPRange(self, value: ghidra.program.model.address.AddressRange) -> None: ...

    @property
    def LSDAAddress(self) -> None: ...  # No getter available.

    @LSDAAddress.setter
    def LSDAAddress(self, value: ghidra.program.model.address.Address) -> None: ...

    @property
    def LSDATable(self) -> ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDATable: ...

    @LSDATable.setter
    def LSDATable(self, value: ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDATable) -> None: ...

    @property
    def actionTable(self) -> ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAActionTable: ...

    @property
    def callSiteTable(self) -> ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDACallSiteTable: ...

    @property
    def frameDescriptorEntry(self) -> ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.FrameDescriptionEntry: ...

    @frameDescriptorEntry.setter
    def frameDescriptorEntry(self, value: ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.FrameDescriptionEntry) -> None: ...

    @property
    def range(self) -> ghidra.program.model.address.AddressRange: ...

    @property
    def rangeSize(self) -> long: ...

    @property
    def rangeStart(self) -> ghidra.program.model.address.Address: ...

    @property
    def typeTable(self) -> ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDATypeTable: ...
