import java.awt
import java.beans
import java.lang


class EditorState(object, java.beans.PropertyChangeListener):




    def __init__(self, options: ghidra.framework.options.Options, name: unicode): ...



    def applyValue(self) -> None: ...

    def equals(self, obj: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDescription(self) -> unicode: ...

    def getEditorComponent(self) -> java.awt.Component: ...

    def getTitle(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def isValueChanged(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def propertyChange(self, evt: java.beans.PropertyChangeEvent) -> None: ...

    def supportsCustomOptionsEditor(self) -> bool:
        """
        Returns true if the contained PropertyEditor desired to render and handle it's options
         directly, as opposed to using the generic framework.
        @return true if the contained PropertyEditor desired to render and handle it's options
         directly, as opposed to using the generic framework.
        """
        ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def description(self) -> unicode: ...

    @property
    def editorComponent(self) -> java.awt.Component: ...

    @property
    def title(self) -> unicode: ...

    @property
    def valueChanged(self) -> bool: ...
