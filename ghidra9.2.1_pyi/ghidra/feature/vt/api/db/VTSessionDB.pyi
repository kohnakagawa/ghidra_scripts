from typing import List
import db
import ghidra.feature.vt.api.db
import ghidra.feature.vt.api.impl
import ghidra.feature.vt.api.main
import ghidra.framework.data
import ghidra.framework.model
import ghidra.framework.options
import ghidra.program.model.listing
import ghidra.util
import ghidra.util.task
import java.io
import java.lang
import java.util


class VTSessionDB(ghidra.framework.data.DomainObjectAdapterDB, ghidra.feature.vt.api.main.VTSession, ghidra.feature.vt.api.impl.VTChangeManager):








    def addAssociationHook(self, __a0: ghidra.feature.vt.api.main.AssociationHook) -> None: ...

    def addCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def addConsumer(self, __a0: object) -> bool: ...

    def addListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def addSynchronizedDomainObject(self, __a0: ghidra.framework.model.DomainObject) -> None: ...

    def addTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def canLock(self) -> bool: ...

    def canRedo(self) -> bool: ...

    def canSave(self) -> bool: ...

    def canUndo(self) -> bool: ...

    def checkExclusiveAccess(self) -> None: ...

    def clearUndo(self) -> None: ...

    def createMatchSet(self, __a0: ghidra.feature.vt.api.main.VTProgramCorrelator) -> ghidra.feature.vt.api.main.VTMatchSet: ...

    def createMatchTag(self, __a0: unicode) -> ghidra.feature.vt.api.main.VTMatchTag: ...

    def createPrivateEventQueue(self, __a0: ghidra.framework.model.DomainObjectListener, __a1: int) -> ghidra.framework.model.EventQueueID: ...

    @staticmethod
    def createVTSession(__a0: unicode, __a1: ghidra.program.model.listing.Program, __a2: ghidra.program.model.listing.Program, __a3: object) -> ghidra.feature.vt.api.db.VTSessionDB: ...

    def dbError(self, __a0: java.io.IOException) -> None: ...

    def deleteMatchTag(self, __a0: ghidra.feature.vt.api.main.VTMatchTag) -> None: ...

    def endTransaction(self, __a0: int, __a1: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def fireEvent(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> None: ...

    def flushEvents(self) -> None: ...

    def flushPrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> None: ...

    def flushWriteCache(self) -> None: ...

    def forceLock(self, __a0: bool, __a1: unicode) -> None: ...

    def getAssociationManager(self) -> ghidra.feature.vt.api.main.VTAssociationManager: ...

    def getAssociationManagerDBM(self) -> ghidra.feature.vt.api.db.AssociationDatabaseManager: ...

    def getChangeSet(self) -> ghidra.framework.data.DomainObjectDBChangeSet: ...

    def getChangeStatus(self) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getConsumerList(self) -> java.util.ArrayList: ...

    @staticmethod
    def getContentHandler(__a0: ghidra.framework.model.DomainObject) -> ghidra.framework.data.ContentHandler: ...

    def getCurrentTransaction(self) -> ghidra.framework.model.Transaction: ...

    def getDBHandle(self) -> db.DBHandle: ...

    def getDescription(self) -> unicode: ...

    def getDestinationProgram(self) -> ghidra.program.model.listing.Program: ...

    def getDestinationProgramID(self) -> unicode: ...

    def getDomainFile(self) -> ghidra.framework.model.DomainFile: ...

    def getImpliedMatchSet(self) -> ghidra.feature.vt.api.main.VTMatchSet: ...

    def getLock(self) -> ghidra.util.Lock: ...

    def getManualMatchSet(self) -> ghidra.feature.vt.api.main.VTMatchSet: ...

    def getMatchSets(self) -> List[object]: ...

    def getMatchTag(self, __a0: long) -> ghidra.feature.vt.api.main.VTMatchTag: ...

    def getMatchTags(self) -> java.util.Set: ...

    def getMatches(self, __a0: ghidra.feature.vt.api.main.VTAssociation) -> List[object]: ...

    def getMetadata(self) -> java.util.Map: ...

    def getModificationNumber(self) -> long: ...

    def getName(self) -> unicode: ...

    def getOptions(self, __a0: unicode) -> ghidra.framework.options.Options: ...

    def getOptionsNames(self) -> List[object]: ...

    def getOrCreateMatchTagDB(self, __a0: ghidra.feature.vt.api.main.VTMatchTag) -> ghidra.feature.vt.api.db.VTMatchTagDB: ...

    def getRedoName(self) -> unicode: ...

    def getSourceProgram(self) -> ghidra.program.model.listing.Program: ...

    def getSourceProgramID(self) -> unicode: ...

    def getSynchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    def getUndoName(self) -> unicode: ...

    def getUndoStackDepth(self) -> int: ...

    @staticmethod
    def getVTSession(__a0: db.DBHandle, __a1: db.OpenMode, __a2: object, __a3: ghidra.util.task.TaskMonitor) -> ghidra.feature.vt.api.db.VTSessionDB: ...

    def getVersion(self) -> int: ...

    def hasExclusiveAccess(self) -> bool: ...

    def hasTerminatedTransaction(self) -> bool: ...

    def hashCode(self) -> int: ...

    def invalidateWriteCache(self) -> None: ...

    def isChangeable(self) -> bool: ...

    def isChanged(self) -> bool: ...

    def isClosed(self) -> bool: ...

    def isLocked(self) -> bool: ...

    def isSendingEvents(self) -> bool: ...

    def isTemporary(self) -> bool: ...

    def isUsedBy(self, __a0: object) -> bool: ...

    def lock(self, __a0: unicode) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def redo(self) -> None: ...

    def release(self, __a0: object) -> None: ...

    def releaseSynchronizedDomainObject(self) -> None: ...

    def removeAssociationHook(self, __a0: ghidra.feature.vt.api.main.AssociationHook) -> None: ...

    def removeCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def removeListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def removePrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> bool: ...

    def removeTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    @overload
    def save(self) -> None: ...

    @overload
    def save(self, __a0: unicode, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def saveToPackedFile(self, __a0: java.io.File, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def setChanged(self, __a0: int, __a1: object, __a2: object) -> None: ...

    @staticmethod
    def setDefaultContentClass(__a0: java.lang.Class) -> None: ...

    def setEventsEnabled(self, __a0: bool) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setObjectChanged(self, __a0: int, __a1: object, __a2: object, __a3: object) -> None: ...

    def setTemporary(self, __a0: bool) -> None: ...

    @overload
    def startTransaction(self, __a0: unicode) -> int: ...

    @overload
    def startTransaction(self, __a0: unicode, __a1: ghidra.framework.model.AbortedTransactionListener) -> int: ...

    def toString(self) -> unicode: ...

    def undo(self) -> None: ...

    def unlock(self) -> None: ...

    def updateDestinationProgram(self, __a0: ghidra.program.model.listing.Program) -> None: ...

    def updateSourceProgram(self, __a0: ghidra.program.model.listing.Program) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def associationManager(self) -> ghidra.feature.vt.api.main.VTAssociationManager: ...

    @property
    def associationManagerDBM(self) -> ghidra.feature.vt.api.db.AssociationDatabaseManager: ...

    @property
    def changeable(self) -> bool: ...

    @property
    def description(self) -> unicode: ...

    @property
    def destinationProgram(self) -> ghidra.program.model.listing.Program: ...

    @property
    def destinationProgramID(self) -> unicode: ...

    @property
    def impliedMatchSet(self) -> ghidra.feature.vt.api.main.VTMatchSet: ...

    @property
    def manualMatchSet(self) -> ghidra.feature.vt.api.main.VTMatchSet: ...

    @property
    def matchSets(self) -> List[object]: ...

    @property
    def matchTags(self) -> java.util.Set: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def sourceProgram(self) -> ghidra.program.model.listing.Program: ...

    @property
    def sourceProgramID(self) -> unicode: ...

    @property
    def version(self) -> int: ...
