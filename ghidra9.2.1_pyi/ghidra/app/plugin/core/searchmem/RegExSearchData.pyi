from typing import List
import ghidra.app.plugin.core.searchmem
import java.lang
import java.util.regex


class RegExSearchData(ghidra.app.plugin.core.searchmem.SearchData):




    def __init__(self, __a0: unicode): ...



    @staticmethod
    def createIncompleteSearchData(__a0: unicode) -> ghidra.app.plugin.core.searchmem.SearchData: ...

    @staticmethod
    def createInvalidInputSearchData(__a0: unicode) -> ghidra.app.plugin.core.searchmem.SearchData: ...

    @staticmethod
    def createRegExSearchData(__a0: unicode) -> ghidra.app.plugin.core.searchmem.RegExSearchData: ...

    @staticmethod
    def createSearchData(__a0: unicode, __a1: List[int], __a2: List[int]) -> ghidra.app.plugin.core.searchmem.SearchData: ...

    def equals(self, __a0: object) -> bool: ...

    def getBytes(self) -> List[int]: ...

    def getClass(self) -> java.lang.Class: ...

    def getHexString(self) -> unicode: ...

    def getInputString(self) -> unicode: ...

    def getMask(self) -> List[int]: ...

    def getRegExPattern(self) -> java.util.regex.Pattern: ...

    def getStatusMessage(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def isValidInputData(self) -> bool: ...

    def isValidSearchData(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def regExPattern(self) -> java.util.regex.Pattern: ...

    @property
    def validSearchData(self) -> bool: ...
