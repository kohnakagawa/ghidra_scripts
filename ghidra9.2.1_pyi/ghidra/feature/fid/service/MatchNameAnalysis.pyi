from typing import List
import ghidra.feature.fid.service
import ghidra.program.model.listing
import ghidra.util.task
import java.lang
import java.util


class MatchNameAnalysis(object):




    def __init__(self): ...



    def analyzeLibraries(self, __a0: java.util.Collection, __a1: int, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def analyzeNames(self, __a0: List[object], __a1: ghidra.program.model.listing.Program, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def containsRawName(self, __a0: unicode) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getLibraryIterator(self) -> java.util.Iterator: ...

    def getMostOptimisticCount(self) -> int: ...

    def getMostOptimisticName(self) -> unicode: ...

    def getNameIterator(self) -> java.util.Iterator: ...

    def getOverallScore(self) -> float: ...

    def getRawNameIterator(self) -> java.util.Iterator: ...

    def getVersions(self, __a0: unicode) -> ghidra.feature.fid.service.NameVersions: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def numLibraries(self) -> int: ...

    def numNames(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def libraryIterator(self) -> java.util.Iterator: ...

    @property
    def mostOptimisticCount(self) -> int: ...

    @property
    def mostOptimisticName(self) -> unicode: ...

    @property
    def nameIterator(self) -> java.util.Iterator: ...

    @property
    def overallScore(self) -> float: ...

    @property
    def rawNameIterator(self) -> java.util.Iterator: ...
