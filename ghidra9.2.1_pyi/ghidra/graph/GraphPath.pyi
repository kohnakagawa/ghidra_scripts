import ghidra.graph
import java.lang
import java.util


class GraphPath(object):
    """
    Class for storing paths with fast "contains" method.

     Note: a path can only contain a vertex once.
    """





    @overload
    def __init__(self): ...

    @overload
    def __init__(self, __a0: object): ...



    def add(self, __a0: object) -> None: ...

    def contains(self, __a0: object) -> bool: ...

    def copy(self) -> ghidra.graph.GraphPath: ...

    def depth(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def get(self, depth: int) -> V: ...

    def getClass(self) -> java.lang.Class: ...

    def getCommonStartPath(self, other: ghidra.graph.GraphPath) -> ghidra.graph.GraphPath: ...

    def getLast(self) -> V: ...

    def getPredecessors(self, __a0: object) -> java.util.Set: ...

    def getSuccessors(self, __a0: object) -> java.util.Set: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeLast(self) -> V: ...

    def size(self) -> int: ...

    def startsWith(self, otherPath: ghidra.graph.GraphPath) -> bool: ...

    def subPath(self, start: int, end: int) -> ghidra.graph.GraphPath: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def last(self) -> object: ...
