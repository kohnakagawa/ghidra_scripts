import ghidra.pcodeCPort.context
import ghidra.pcodeCPort.semantics
import java.lang


class MacroBuilder(ghidra.pcodeCPort.semantics.PcodeBuilder):




    def __init__(self, __a0: ghidra.pcodeCPort.slgh_compile.SleighCompile, __a1: ghidra.sleigh.grammar.Location, __a2: generic.stl.VectorSTL, __a3: int): ...



    def appendBuild(self, __a0: ghidra.pcodeCPort.semantics.OpTpl, __a1: int) -> None: ...

    def appendCrossBuild(self, __a0: ghidra.pcodeCPort.semantics.OpTpl, __a1: int) -> None: ...

    def build(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl, __a1: int) -> None: ...

    def delaySlot(self, __a0: ghidra.pcodeCPort.semantics.OpTpl) -> None: ...

    def dispose(self) -> None: ...

    def dump(self, __a0: ghidra.pcodeCPort.semantics.OpTpl) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCurrentWalker(self) -> ghidra.pcodeCPort.context.ParserWalker: ...

    def getLabelBase(self) -> int: ...

    def hasError(self) -> bool: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setLabel(self, __a0: ghidra.pcodeCPort.semantics.OpTpl) -> None: ...

    def setMacroOp(self, __a0: ghidra.pcodeCPort.semantics.OpTpl) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def label(self) -> None: ...  # No getter available.

    @label.setter
    def label(self, value: ghidra.pcodeCPort.semantics.OpTpl) -> None: ...

    @property
    def macroOp(self) -> None: ...  # No getter available.

    @macroOp.setter
    def macroOp(self, value: ghidra.pcodeCPort.semantics.OpTpl) -> None: ...
