from typing import List
import db
import ghidra.feature.fid.db
import ghidra.feature.fid.hash
import ghidra.program.model.lang
import ghidra.util.task
import java.io
import java.lang


class FidDB(object, java.io.Closeable):








    def close(self) -> None: ...

    def createInferiorRelation(self, __a0: ghidra.feature.fid.db.FunctionRecord, __a1: ghidra.feature.fid.db.FunctionRecord) -> None: ...

    def createNewFunction(self, __a0: ghidra.feature.fid.db.LibraryRecord, __a1: ghidra.feature.fid.hash.FidHashQuad, __a2: unicode, __a3: long, __a4: unicode, __a5: bool) -> ghidra.feature.fid.db.FunctionRecord: ...

    def createNewLibrary(self, __a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode, __a4: ghidra.program.model.lang.LanguageID, __a5: int, __a6: int, __a7: ghidra.program.model.lang.CompilerSpecID) -> ghidra.feature.fid.db.LibraryRecord: ...

    def createRelation(self, __a0: ghidra.feature.fid.db.FunctionRecord, __a1: ghidra.feature.fid.db.FunctionRecord, __a2: ghidra.feature.fid.db.RelationType) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def findFullHashValueAtOrAfter(self, __a0: long) -> long: ...

    def findFunctionsByDomainPathSubstring(self, __a0: unicode) -> List[object]: ...

    def findFunctionsByFullHash(self, __a0: long) -> List[object]: ...

    def findFunctionsByLibraryAndName(self, __a0: ghidra.feature.fid.db.LibraryRecord, __a1: unicode) -> List[object]: ...

    def findFunctionsByNameRegex(self, __a0: unicode) -> List[object]: ...

    def findFunctionsByNameSubstring(self, __a0: unicode) -> List[object]: ...

    def findFunctionsBySpecificHash(self, __a0: long) -> List[object]: ...

    def findLibrariesByName(self, __a0: unicode, __a1: unicode, __a2: unicode) -> List[object]: ...

    def getAllLibraries(self) -> List[object]: ...

    def getClass(self) -> java.lang.Class: ...

    def getDBHandle(self) -> db.DBHandle: ...

    def getFunctionByID(self, __a0: long) -> ghidra.feature.fid.db.FunctionRecord: ...

    def getInferiorFullRelation(self, __a0: ghidra.feature.fid.hash.FidHashQuad, __a1: ghidra.feature.fid.db.FunctionRecord) -> bool: ...

    def getLibraryForFunction(self, __a0: ghidra.feature.fid.db.FunctionRecord) -> ghidra.feature.fid.db.LibraryRecord: ...

    def getName(self) -> unicode: ...

    def getPath(self) -> unicode: ...

    def getSuperiorFullRelation(self, __a0: ghidra.feature.fid.db.FunctionRecord, __a1: ghidra.feature.fid.hash.FidHashQuad) -> bool: ...

    def hashCode(self) -> int: ...

    def incrementOpenCount(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def saveDatabase(self, __a0: unicode, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def saveRawDatabaseFile(self, __a0: java.io.File, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def setAutoFailByFullHash(self, __a0: long, __a1: bool) -> None: ...

    def setAutoFailByName(self, __a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode, __a4: bool) -> None: ...

    def setAutoFailOnFunction(self, __a0: ghidra.feature.fid.db.FunctionRecord, __a1: bool) -> ghidra.feature.fid.db.FunctionRecord: ...

    def setAutoPassByFullHash(self, __a0: long, __a1: bool) -> None: ...

    def setAutoPassByName(self, __a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode, __a4: bool) -> None: ...

    def setAutoPassOnFunction(self, __a0: ghidra.feature.fid.db.FunctionRecord, __a1: bool) -> ghidra.feature.fid.db.FunctionRecord: ...

    def setForceRelationByFullHash(self, __a0: long, __a1: bool) -> None: ...

    def setForceRelationByName(self, __a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode, __a4: bool) -> None: ...

    def setForceRelationOnFunction(self, __a0: ghidra.feature.fid.db.FunctionRecord, __a1: bool) -> ghidra.feature.fid.db.FunctionRecord: ...

    def setForceSpecificByFullHash(self, __a0: long, __a1: bool) -> None: ...

    def setForceSpecificByName(self, __a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode, __a4: bool) -> None: ...

    def setForceSpecificOnFunction(self, __a0: ghidra.feature.fid.db.FunctionRecord, __a1: bool) -> ghidra.feature.fid.db.FunctionRecord: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def DBHandle(self) -> db.DBHandle: ...

    @property
    def allLibraries(self) -> List[object]: ...

    @property
    def name(self) -> unicode: ...

    @property
    def path(self) -> unicode: ...
