from typing import List
import ghidra.app.plugin.core.instructionsearch
import ghidra.app.plugin.core.instructionsearch.ui
import ghidra.framework.plugintool
import java.lang


class InstructionSearchUtils(object):




    def __init__(self): ...



    @staticmethod
    def addSpaceOnByteBoundary(__a0: unicode, __a1: ghidra.app.plugin.core.instructionsearch.ui.SelectionModeWidget.InputMode) -> unicode: ...

    @staticmethod
    def byteArrayAnd(__a0: List[int], __a1: List[int]) -> List[int]: ...

    @staticmethod
    def byteArrayOr(__a0: List[int], __a1: List[int]) -> List[int]: ...

    @staticmethod
    def containsOnBit(__a0: List[int]) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def formatSearchString(__a0: unicode, __a1: unicode) -> unicode: ...

    def getClass(self) -> java.lang.Class: ...

    @staticmethod
    def getGroupSizes(__a0: unicode, __a1: ghidra.app.plugin.core.instructionsearch.ui.SelectionModeWidget.InputMode) -> List[object]: ...

    @staticmethod
    def getInstructionSearchPlugin(__a0: ghidra.framework.plugintool.PluginTool) -> ghidra.app.plugin.core.instructionsearch.InstructionSearchPlugin: ...

    @staticmethod
    def getWhitespace(__a0: unicode) -> List[object]: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def isBinary(__a0: unicode) -> bool: ...

    @staticmethod
    def isFullBinaryByte(__a0: unicode) -> bool: ...

    @staticmethod
    def isFullHexByte(__a0: unicode) -> bool: ...

    @staticmethod
    def isHex(__a0: unicode) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def toAddressList(__a0: List[object]) -> List[object]: ...

    @staticmethod
    def toBinary(__a0: unicode) -> unicode: ...

    @staticmethod
    def toBinaryStr(__a0: List[int]) -> unicode: ...

    @staticmethod
    def toBinaryString(__a0: int) -> unicode: ...

    @staticmethod
    def toByteArray(__a0: unicode) -> List[object]: ...

    @staticmethod
    def toHex(__a0: unicode, __a1: bool) -> unicode: ...

    @staticmethod
    def toHexNibblesOnly(__a0: unicode) -> java.lang.StringBuilder: ...

    @staticmethod
    def toPrimitive(__a0: List[int]) -> List[int]: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
