import ghidra.app.emulator.memory
import ghidra.pcode.memstate
import ghidra.program.model.lang
import java.lang


class EmulatorConfiguration(object):








    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getLoadData(self) -> ghidra.app.emulator.memory.EmulatorLoadData: ...

    def getMemoryFaultHandler(self) -> ghidra.pcode.memstate.MemoryFaultHandler: ...

    def getPreferredMemoryPageSize(self) -> int: ...

    def getProgramCounterName(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def isWriteBackEnabled(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def language(self) -> ghidra.program.model.lang.Language: ...

    @property
    def loadData(self) -> ghidra.app.emulator.memory.EmulatorLoadData: ...

    @property
    def memoryFaultHandler(self) -> ghidra.pcode.memstate.MemoryFaultHandler: ...

    @property
    def preferredMemoryPageSize(self) -> int: ...

    @property
    def programCounterName(self) -> unicode: ...

    @property
    def writeBackEnabled(self) -> bool: ...
