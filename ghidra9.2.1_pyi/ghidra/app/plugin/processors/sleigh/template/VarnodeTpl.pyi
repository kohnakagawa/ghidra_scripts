import ghidra.app.plugin.processors.sleigh
import ghidra.app.plugin.processors.sleigh.template
import ghidra.program.model.address
import ghidra.xml
import java.lang


class VarnodeTpl(object):
    """
    Placeholder for what will resolve to a Varnode instance given
      a specific InstructionContext
    """





    def __init__(self, space: ghidra.app.plugin.processors.sleigh.template.ConstTpl, offset: ghidra.app.plugin.processors.sleigh.template.ConstTpl, size: ghidra.app.plugin.processors.sleigh.template.ConstTpl): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getOffset(self) -> ghidra.app.plugin.processors.sleigh.template.ConstTpl: ...

    def getSize(self) -> ghidra.app.plugin.processors.sleigh.template.ConstTpl: ...

    def getSpace(self) -> ghidra.app.plugin.processors.sleigh.template.ConstTpl: ...

    def hashCode(self) -> int: ...

    def isDynamic(self, walker: ghidra.app.plugin.processors.sleigh.ParserWalker) -> bool: ...

    def isRelative(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def restoreXml(self, parser: ghidra.xml.XmlPullParser, factory: ghidra.program.model.address.AddressFactory) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def offset(self) -> ghidra.app.plugin.processors.sleigh.template.ConstTpl: ...

    @property
    def relative(self) -> bool: ...

    @property
    def size(self) -> ghidra.app.plugin.processors.sleigh.template.ConstTpl: ...

    @property
    def space(self) -> ghidra.app.plugin.processors.sleigh.template.ConstTpl: ...
