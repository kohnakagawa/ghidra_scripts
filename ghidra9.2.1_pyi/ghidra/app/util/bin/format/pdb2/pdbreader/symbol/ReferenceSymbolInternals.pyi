import ghidra.app.util.bin.format.pdb2.pdbreader
import ghidra.app.util.bin.format.pdb2.pdbreader.symbol
import java.lang


class ReferenceSymbolInternals(ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractSymbolInternals):





    class ReferenceSymbolInternalsSt(ghidra.app.util.bin.format.pdb2.pdbreader.symbol.ReferenceSymbolInternals):




        def __init__(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb): ...



        def emit(self, __a0: java.lang.StringBuilder) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getModuleIndex(self) -> int: ...

        def getOffsetActualSymbolInDollarDollarSymbols(self) -> long: ...

        def getSumName(self) -> long: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def parse2(__a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb, __a1: ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.ReferenceSymbolInternals: ...

        @staticmethod
        def parseSt(__a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb, __a1: ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.ReferenceSymbolInternals: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ReferenceSymbolInternals2(ghidra.app.util.bin.format.pdb2.pdbreader.symbol.ReferenceSymbolInternals):




        def __init__(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb): ...



        def emit(self, __a0: java.lang.StringBuilder) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getModuleIndex(self) -> int: ...

        def getName(self) -> unicode: ...

        def getOffsetActualSymbolInDollarDollarSymbols(self) -> long: ...

        def getSumName(self) -> long: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def parse2(__a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb, __a1: ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.ReferenceSymbolInternals: ...

        @staticmethod
        def parseSt(__a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb, __a1: ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.ReferenceSymbolInternals: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def name(self) -> unicode: ...

    def __init__(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb): ...



    def emit(self, __a0: java.lang.StringBuilder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getModuleIndex(self) -> int: ...

    def getOffsetActualSymbolInDollarDollarSymbols(self) -> long: ...

    def getSumName(self) -> long: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def parse2(__a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb, __a1: ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.ReferenceSymbolInternals: ...

    @staticmethod
    def parseSt(__a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb, __a1: ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.ReferenceSymbolInternals: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def moduleIndex(self) -> int: ...

    @property
    def offsetActualSymbolInDollarDollarSymbols(self) -> long: ...

    @property
    def sumName(self) -> long: ...
