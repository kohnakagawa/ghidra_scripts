import edu.uci.ics.jung.visualization.control
import ghidra.graph.viewer.event.mouse
import java.awt.event
import java.lang


class VisualGraphSatelliteGraphMouse(ghidra.graph.viewer.event.mouse.VisualGraphPluggableGraphMouse):




    def __init__(self): ...



    def add(self, p: edu.uci.ics.jung.visualization.control.GraphMousePlugin) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def mouseClicked(self, e: java.awt.event.MouseEvent) -> None: ...

    def mouseDragged(self, e: java.awt.event.MouseEvent) -> None: ...

    def mouseEntered(self, e: java.awt.event.MouseEvent) -> None: ...

    def mouseExited(self, e: java.awt.event.MouseEvent) -> None: ...

    def mouseMoved(self, e: java.awt.event.MouseEvent) -> None: ...

    def mousePressed(self, e: java.awt.event.MouseEvent) -> None: ...

    def mouseReleased(self, e: java.awt.event.MouseEvent) -> None: ...

    def mouseWheelMoved(self, e: java.awt.event.MouseWheelEvent) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def prepend(self, p: edu.uci.ics.jung.visualization.control.GraphMousePlugin) -> None:
        """
        Places the given plugin at the front of the list
        @param p the mouse plugin to prepend
        """
        ...

    def remove(self, p: edu.uci.ics.jung.visualization.control.GraphMousePlugin) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...
