import java.lang


class XCoffArchiveMemberHeader(object):
    """
    The ARHeader class is used to store the per-object file
      archive headers.  It can also create an XCOFF32 object for inspecting
      the object file data.
    """





    def __init__(self, reader: ghidra.app.util.bin.BinaryReader): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDate(self) -> long: ...

    def getGroupID(self) -> long: ...

    def getMode(self) -> long: ...

    def getName(self) -> unicode: ...

    def getNameLength(self) -> int: ...

    def getNextMemberOffset(self) -> long: ...

    def getObjectDataOffset(self) -> long: ...

    def getPreviousMemberOffset(self) -> long: ...

    def getSize(self) -> long: ...

    def getTerminator(self) -> unicode: ...

    def getUserID(self) -> long: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def date(self) -> long: ...

    @property
    def groupID(self) -> long: ...

    @property
    def mode(self) -> long: ...

    @property
    def name(self) -> unicode: ...

    @property
    def nameLength(self) -> int: ...

    @property
    def nextMemberOffset(self) -> long: ...

    @property
    def objectDataOffset(self) -> long: ...

    @property
    def previousMemberOffset(self) -> long: ...

    @property
    def size(self) -> long: ...

    @property
    def terminator(self) -> unicode: ...

    @property
    def userID(self) -> long: ...
