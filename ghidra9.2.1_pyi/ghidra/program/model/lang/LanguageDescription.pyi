from typing import List
import ghidra.program.model.lang
import java.lang
import java.util


class LanguageDescription(object):








    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCompatibleCompilerSpecDescriptions(self) -> java.util.Collection: ...

    def getCompilerSpecDescriptionByID(self, compilerSpecID: ghidra.program.model.lang.CompilerSpecID) -> ghidra.program.model.lang.CompilerSpecDescription: ...

    def getDescription(self) -> unicode: ...

    def getEndian(self) -> ghidra.program.model.lang.Endian: ...

    def getExternalNames(self, externalTool: unicode) -> List[unicode]:
        """
        Returns external names for this language associated with other tools.  For example, x86
         languages are usually referred to as "metapc" by IDA-PRO.  So, getExternalNames("IDA-PRO")
         will return "metapc" for most x86 languages.
        @param externalTool external tool for looking up external tool names
        @return external names for this language associated with tool 'key' -- null if there are no results
        """
        ...

    def getInstructionEndian(self) -> ghidra.program.model.lang.Endian: ...

    def getLanguageID(self) -> ghidra.program.model.lang.LanguageID: ...

    def getMinorVersion(self) -> int: ...

    def getProcessor(self) -> ghidra.program.model.lang.Processor: ...

    def getSize(self) -> int: ...

    def getVariant(self) -> unicode: ...

    def getVersion(self) -> int: ...

    def hashCode(self) -> int: ...

    def isDeprecated(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def compatibleCompilerSpecDescriptions(self) -> java.util.Collection: ...

    @property
    def deprecated(self) -> bool: ...

    @property
    def description(self) -> unicode: ...

    @property
    def endian(self) -> ghidra.program.model.lang.Endian: ...

    @property
    def instructionEndian(self) -> ghidra.program.model.lang.Endian: ...

    @property
    def languageID(self) -> ghidra.program.model.lang.LanguageID: ...

    @property
    def minorVersion(self) -> int: ...

    @property
    def processor(self) -> ghidra.program.model.lang.Processor: ...

    @property
    def size(self) -> int: ...

    @property
    def variant(self) -> unicode: ...

    @property
    def version(self) -> int: ...
