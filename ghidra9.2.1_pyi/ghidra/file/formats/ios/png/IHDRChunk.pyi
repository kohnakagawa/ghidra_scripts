from typing import List
import java.lang


class IHDRChunk(object):




    def __init__(self, __a0: ghidra.file.formats.ios.png.PNGChunk): ...



    def equals(self, __a0: object) -> bool: ...

    def getBitDepth(self) -> int: ...

    def getBitsPerPalette(self) -> int: ...

    def getBytesPerLine(self) -> int: ...

    def getBytesPerPalette(self) -> int: ...

    def getChunkBytes(self) -> List[int]: ...

    def getClass(self) -> java.lang.Class: ...

    def getColorType(self) -> int: ...

    def getCompressionMethod(self) -> int: ...

    def getFilterMethod(self) -> int: ...

    def getImgHeight(self) -> int: ...

    def getImgWidth(self) -> int: ...

    def getInterlaceMethod(self) -> int: ...

    def getRowFilterBytes(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def bitDepth(self) -> int: ...

    @property
    def bitsPerPalette(self) -> int: ...

    @property
    def bytesPerLine(self) -> int: ...

    @property
    def bytesPerPalette(self) -> int: ...

    @property
    def chunkBytes(self) -> List[int]: ...

    @property
    def colorType(self) -> int: ...

    @property
    def compressionMethod(self) -> int: ...

    @property
    def filterMethod(self) -> int: ...

    @property
    def imgHeight(self) -> int: ...

    @property
    def imgWidth(self) -> int: ...

    @property
    def interlaceMethod(self) -> int: ...

    @property
    def rowFilterBytes(self) -> int: ...
