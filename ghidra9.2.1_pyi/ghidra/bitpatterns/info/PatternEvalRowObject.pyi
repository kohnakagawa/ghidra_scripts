import ghidra.bitpatterns.info
import ghidra.program.model.address
import java.lang


class PatternEvalRowObject(object):




    def __init__(self, __a0: ghidra.bitpatterns.info.PatternMatchType, __a1: ghidra.program.model.address.AddressSetView, __a2: unicode, __a3: ghidra.program.model.address.Address, __a4: int, __a5: int): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getMatchType(self) -> ghidra.bitpatterns.info.PatternMatchType: ...

    def getMatchedAddress(self) -> ghidra.program.model.address.Address: ...

    def getMatchedSet(self) -> ghidra.program.model.address.AddressSetView: ...

    def getPatternString(self) -> unicode: ...

    def getPostBits(self) -> int: ...

    def getTotalBits(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def matchType(self) -> ghidra.bitpatterns.info.PatternMatchType: ...

    @property
    def matchedAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def matchedSet(self) -> ghidra.program.model.address.AddressSetView: ...

    @property
    def patternString(self) -> unicode: ...

    @property
    def postBits(self) -> int: ...

    @property
    def totalBits(self) -> int: ...
