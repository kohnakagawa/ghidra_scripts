from typing import List
import ghidra.app.decompiler
import ghidra.program.model.address
import ghidra.program.model.pcode
import ghidra.xml
import java.awt
import java.lang


class ClangVariableToken(ghidra.app.decompiler.ClangToken):
    """
    Token representing a C variable
    """





    def __init__(self, par: ghidra.app.decompiler.ClangNode): ...



    def Child(self, i: int) -> ghidra.app.decompiler.ClangNode: ...

    def Parent(self) -> ghidra.app.decompiler.ClangNode: ...

    @staticmethod
    def buildSpacer(par: ghidra.app.decompiler.ClangNode, indent: int, indentStr: unicode) -> ghidra.app.decompiler.ClangToken: ...

    @staticmethod
    def buildToken(par: ghidra.app.decompiler.ClangNode, parser: ghidra.xml.XmlPullParser, pfactory: ghidra.program.model.pcode.PcodeFactory) -> ghidra.app.decompiler.ClangToken: ...

    def equals(self, __a0: object) -> bool: ...

    def flatten(self, __a0: List[object]) -> None: ...

    def getClangFunction(self) -> ghidra.app.decompiler.ClangFunction: ...

    def getClass(self) -> java.lang.Class: ...

    @staticmethod
    def getColor(col: unicode) -> int: ...

    def getHighVariable(self) -> ghidra.program.model.pcode.HighVariable: ...

    def getHighlight(self) -> java.awt.Color: ...

    def getLineParent(self) -> ghidra.app.decompiler.ClangLine: ...

    def getMaxAddress(self) -> ghidra.program.model.address.Address: ...

    def getMinAddress(self) -> ghidra.program.model.address.Address: ...

    def getPcodeOp(self) -> ghidra.program.model.pcode.PcodeOp: ...

    def getSyntaxType(self) -> int: ...

    def getText(self) -> unicode: ...

    def getVarnode(self) -> ghidra.program.model.pcode.Varnode: ...

    def hashCode(self) -> int: ...

    def isMatchingToken(self) -> bool: ...

    def isVariableRef(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def numChildren(self) -> int: ...

    def restoreFromXML(self, el: ghidra.xml.XmlElement, end: ghidra.xml.XmlElement, pfactory: ghidra.program.model.pcode.PcodeFactory) -> None: ...

    def setHighlight(self, val: java.awt.Color) -> None: ...

    def setLineParent(self, line: ghidra.app.decompiler.ClangLine) -> None: ...

    def setMatchingToken(self, matchingToken: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def highVariable(self) -> ghidra.program.model.pcode.HighVariable: ...

    @property
    def maxAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def minAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def pcodeOp(self) -> ghidra.program.model.pcode.PcodeOp: ...

    @property
    def variableRef(self) -> bool: ...

    @property
    def varnode(self) -> ghidra.program.model.pcode.Varnode: ...
