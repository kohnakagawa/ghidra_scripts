from typing import Iterator
from typing import List
import ghidra.generic.util.datastruct
import ghidra.generic.util.datastruct.ValueSortedMap
import java.lang
import java.util
import java.util.function
import java.util.stream


class RestrictedValueSortedMap(object, ghidra.generic.util.datastruct.ValueSortedMap):
    """
    A view of the value-sorted map for implementing
     #subMapByValue(Object, boolean, Object, boolean), etc.
    """






    class RestrictedSortedList(object, ghidra.generic.util.datastruct.SortedList):




        def __init__(self, __a0: ghidra.generic.util.datastruct.RestrictedValueSortedMap): ...

        def __iter__(self): ...

        @overload
        def add(self, __a0: object) -> bool: ...

        @overload
        def add(self, __a0: int, __a1: object) -> None: ...

        @overload
        def addAll(self, __a0: java.util.Collection) -> bool: ...

        @overload
        def addAll(self, __a0: int, __a1: java.util.Collection) -> bool: ...

        def ceilingIndex(self, __a0: object) -> int: ...

        def clear(self) -> None: ...

        def contains(self, __a0: object) -> bool: ...

        def containsAll(self, __a0: java.util.Collection) -> bool: ...

        @staticmethod
        def copyOf(__a0: java.util.Collection) -> List[object]: ...

        def equals(self, __a0: object) -> bool: ...

        def floorIndex(self, __a0: object) -> int: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def get(self, __a0: int) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def higherIndex(self, __a0: object) -> int: ...

        def indexOf(self, __a0: object) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def lastIndexOf(self, __a0: object) -> int: ...

        @overload
        def listIterator(self) -> java.util.ListIterator: ...

        @overload
        def listIterator(self, __a0: int) -> java.util.ListIterator: ...

        def lowerIndex(self, __a0: object) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        @staticmethod
        def of() -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: List[object]) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object) -> List[object]: ...

        @overload
        @staticmethod
        def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object) -> List[object]: ...

        def parallelStream(self) -> java.util.stream.Stream: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def removeIf(self, __a0: java.util.function.Predicate) -> bool: ...

        def replaceAll(self, __a0: java.util.function.UnaryOperator) -> None: ...

        def retainAll(self, __a0: java.util.Collection) -> bool: ...

        def set(self, __a0: int, __a1: object) -> object: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def stream(self) -> java.util.stream.Stream: ...

        def subList(self, __a0: int, __a1: int) -> List[object]: ...

        @overload
        def toArray(self) -> List[object]: ...

        @overload
        def toArray(self, __a0: List[object]) -> List[object]: ...

        @overload
        def toArray(self, __a0: java.util.function.IntFunction) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def empty(self) -> bool: ...



    def __iter__(self): ...

    def ceilingEntryByValue(self, __a0: object) -> java.util.Map.Entry: ...

    def clear(self) -> None: ...

    def compute(self, __a0: object, __a1: java.util.function.BiFunction) -> object: ...

    def computeIfAbsent(self, __a0: object, __a1: java.util.function.Function) -> object: ...

    def computeIfPresent(self, __a0: object, __a1: java.util.function.BiFunction) -> object: ...

    def containsKey(self, key: object) -> bool: ...

    def containsValue(self, value: object) -> bool: ...

    @staticmethod
    def copyOf(__a0: java.util.Map) -> java.util.Map: ...

    @staticmethod
    def entry(__a0: object, __a1: object) -> java.util.Map.Entry: ...

    def entrySet(self) -> ghidra.generic.util.datastruct.ValueSortedMap.ValueSortedMapEntryList: ...

    def equals(self, __a0: object) -> bool: ...

    def floorEntryByValue(self, __a0: object) -> java.util.Map.Entry: ...

    def forEach(self, __a0: java.util.function.BiConsumer) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getOrDefault(self, __a0: object, __a1: object) -> object: ...

    def hashCode(self) -> int: ...

    def headMapByValue(self, __a0: object, __a1: bool) -> ghidra.generic.util.datastruct.ValueSortedMap: ...

    def higherEntryByValue(self, __a0: object) -> java.util.Map.Entry: ...

    def isEmpty(self) -> bool: ...

    def keySet(self) -> ghidra.generic.util.datastruct.ValueSortedMap.ValueSortedMapKeyList: ...

    def lowerEntryByValue(self, __a0: object) -> java.util.Map.Entry: ...

    def merge(self, __a0: object, __a1: object, __a2: java.util.function.BiFunction) -> object: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    @staticmethod
    def of() -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object, __a16: object, __a17: object) -> java.util.Map: ...

    @overload
    @staticmethod
    def of(__a0: object, __a1: object, __a2: object, __a3: object, __a4: object, __a5: object, __a6: object, __a7: object, __a8: object, __a9: object, __a10: object, __a11: object, __a12: object, __a13: object, __a14: object, __a15: object, __a16: object, __a17: object, __a18: object, __a19: object) -> java.util.Map: ...

    @staticmethod
    def ofEntries(__a0: List[java.util.Map.Entry]) -> java.util.Map: ...

    def put(self, __a0: object, __a1: object) -> object: ...

    def putAll(self, m: java.util.Map) -> None: ...

    def putIfAbsent(self, __a0: object, __a1: object) -> object: ...

    @overload
    def remove(self, key: object) -> V: ...

    @overload
    def remove(self, __a0: object, __a1: object) -> bool: ...

    @overload
    def replace(self, __a0: object, __a1: object) -> object: ...

    @overload
    def replace(self, __a0: object, __a1: object, __a2: object) -> bool: ...

    def replaceAll(self, __a0: java.util.function.BiFunction) -> None: ...

    def size(self) -> int: ...

    def subMapByValue(self, __a0: object, __a1: bool, __a2: object, __a3: bool) -> ghidra.generic.util.datastruct.ValueSortedMap: ...

    def tailMapByValue(self, __a0: object, __a1: bool) -> ghidra.generic.util.datastruct.ValueSortedMap: ...

    def toString(self) -> unicode: ...

    def update(self, __a0: object) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def empty(self) -> bool: ...
