from typing import List
import ghidra.framework.plugintool.util
import java.lang
import org.jdom


class PluginClassManager(object):




    def __init__(self, filterClass: java.lang.Class, exclusionClass: java.lang.Class): ...



    def addXmlElementsForPlugins(self, __a0: org.jdom.Element, __a1: List[object]) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def fillInPackageClasses(self, __a0: List[object]) -> List[object]: ...

    def getAllPluginDescriptions(self) -> List[ghidra.framework.plugintool.util.PluginDescription]: ...

    def getClass(self) -> java.lang.Class: ...

    def getNonReleasedPluginDescriptions(self) -> List[ghidra.framework.plugintool.util.PluginDescription]: ...

    def getPluginClasses(self, element: org.jdom.Element) -> List[unicode]: ...

    def getPluginDescription(self, className: unicode) -> ghidra.framework.plugintool.util.PluginDescription: ...

    def getPluginPackages(self) -> List[ghidra.framework.plugintool.util.PluginPackage]: ...

    def getReleasedPluginDescriptions(self, pluginPackage: ghidra.framework.plugintool.util.PluginPackage) -> List[ghidra.framework.plugintool.util.PluginDescription]: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def allPluginDescriptions(self) -> List[object]: ...

    @property
    def nonReleasedPluginDescriptions(self) -> List[object]: ...

    @property
    def pluginPackages(self) -> List[object]: ...
