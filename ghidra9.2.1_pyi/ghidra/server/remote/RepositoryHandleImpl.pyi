from typing import List
import db.buffers
import ghidra.framework.remote
import ghidra.framework.store
import ghidra.server
import java.io
import java.lang
import java.rmi
import java.rmi.server


class RepositoryHandleImpl(java.rmi.server.UnicastRemoteObject, ghidra.framework.remote.RemoteRepositoryHandle, java.rmi.server.Unreferenced):








    def anonymousAccessAllowed(self) -> bool: ...

    def checkHandle(self) -> None: ...

    def checkout(self, __a0: unicode, __a1: unicode, __a2: ghidra.framework.store.CheckoutType, __a3: unicode) -> ghidra.framework.store.ItemCheckoutStatus: ...

    def clone(self) -> object: ...

    def close(self) -> None: ...

    def createDatabase(self, __a0: unicode, __a1: unicode, __a2: unicode, __a3: int, __a4: unicode, __a5: unicode) -> db.buffers.RemoteManagedBufferFileHandle: ...

    def deleteItem(self, __a0: unicode, __a1: unicode, __a2: int) -> None: ...

    def dispatchEvents(self, __a0: List[ghidra.framework.remote.RepositoryChangeEvent]) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    @staticmethod
    def exportObject(__a0: java.rmi.Remote) -> java.rmi.server.RemoteStub: ...

    @overload
    @staticmethod
    def exportObject(__a0: java.rmi.Remote, __a1: int) -> java.rmi.Remote: ...

    @overload
    @staticmethod
    def exportObject(__a0: java.rmi.Remote, __a1: int, __a2: java.io.ObjectInputFilter) -> java.rmi.Remote: ...

    @overload
    @staticmethod
    def exportObject(__a0: java.rmi.Remote, __a1: int, __a2: java.rmi.server.RMIClientSocketFactory, __a3: java.rmi.server.RMIServerSocketFactory) -> java.rmi.Remote: ...

    @overload
    @staticmethod
    def exportObject(__a0: java.rmi.Remote, __a1: int, __a2: java.rmi.server.RMIClientSocketFactory, __a3: java.rmi.server.RMIServerSocketFactory, __a4: java.io.ObjectInputFilter) -> java.rmi.Remote: ...

    def fileExists(self, __a0: unicode, __a1: unicode) -> bool: ...

    def fireOpenFileCountChanged(self) -> None: ...

    def folderExists(self, __a0: unicode) -> bool: ...

    def getCheckout(self, __a0: unicode, __a1: unicode, __a2: long) -> ghidra.framework.store.ItemCheckoutStatus: ...

    def getCheckouts(self, __a0: unicode, __a1: unicode) -> List[ghidra.framework.store.ItemCheckoutStatus]: ...

    def getClass(self) -> java.lang.Class: ...

    @staticmethod
    def getClientHost() -> unicode: ...

    def getEvents(self) -> List[ghidra.framework.remote.RepositoryChangeEvent]: ...

    @overload
    def getItem(self, __a0: unicode) -> ghidra.framework.remote.RepositoryItem: ...

    @overload
    def getItem(self, __a0: unicode, __a1: unicode) -> ghidra.framework.remote.RepositoryItem: ...

    def getItemCount(self) -> int: ...

    def getItemList(self, __a0: unicode) -> List[ghidra.framework.remote.RepositoryItem]: ...

    def getLength(self, __a0: unicode, __a1: unicode) -> long: ...

    @staticmethod
    def getLog() -> java.io.PrintStream: ...

    def getName(self) -> unicode: ...

    def getRef(self) -> java.rmi.server.RemoteRef: ...

    def getRepository(self) -> ghidra.server.Repository: ...

    def getServerUserList(self) -> List[unicode]: ...

    def getSubfolderList(self, __a0: unicode) -> List[unicode]: ...

    def getUser(self) -> ghidra.framework.remote.User: ...

    def getUserList(self) -> List[ghidra.framework.remote.User]: ...

    def getUserName(self) -> unicode: ...

    def getVersions(self, __a0: unicode, __a1: unicode) -> List[ghidra.framework.store.Version]: ...

    def hasCheckouts(self, __a0: unicode, __a1: unicode) -> bool: ...

    def hashCode(self) -> int: ...

    def isCheckinActive(self, __a0: unicode, __a1: unicode) -> bool: ...

    def moveFolder(self, __a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode) -> None: ...

    def moveItem(self, __a0: unicode, __a1: unicode, __a2: unicode, __a3: unicode) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def openDatabase(self, __a0: unicode, __a1: unicode, __a2: long) -> db.buffers.ManagedBufferFileHandle: ...

    @overload
    def openDatabase(self, __a0: unicode, __a1: unicode, __a2: int, __a3: int) -> db.buffers.ManagedBufferFileHandle: ...

    @staticmethod
    def setLog(__a0: java.io.OutputStream) -> None: ...

    def setUserList(self, __a0: List[ghidra.framework.remote.User], __a1: bool) -> None: ...

    def terminateCheckout(self, __a0: unicode, __a1: unicode, __a2: long, __a3: bool) -> None: ...

    def toString(self) -> unicode: ...

    @staticmethod
    def toStub(__a0: java.rmi.Remote) -> java.rmi.Remote: ...

    @staticmethod
    def unexportObject(__a0: java.rmi.Remote, __a1: bool) -> bool: ...

    def unreferenced(self) -> None: ...

    def updateCheckoutVersion(self, __a0: unicode, __a1: unicode, __a2: long, __a3: int) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def events(self) -> List[ghidra.framework.remote.RepositoryChangeEvent]: ...

    @property
    def itemCount(self) -> int: ...

    @property
    def name(self) -> unicode: ...

    @property
    def repository(self) -> ghidra.server.Repository: ...

    @property
    def serverUserList(self) -> List[unicode]: ...

    @property
    def user(self) -> ghidra.framework.remote.User: ...

    @property
    def userList(self) -> List[ghidra.framework.remote.User]: ...

    @property
    def userName(self) -> unicode: ...
