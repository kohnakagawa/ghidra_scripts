import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.pcode
import ghidra.program.model.symbol
import java.lang


class DataTypeSymbol(object):




    def __init__(self, dt: ghidra.program.model.data.DataType, nr: unicode, cat: unicode): ...



    @staticmethod
    def deleteSymbols(nmroot: unicode, addr: ghidra.program.model.address.Address, symtab: ghidra.program.model.symbol.SymbolTable, space: ghidra.program.model.symbol.Namespace) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def extractHash(symname: unicode) -> unicode: ...

    @staticmethod
    def extractNameRoot(symname: unicode) -> unicode: ...

    @staticmethod
    def generateHash(dt: ghidra.program.model.data.DataType) -> unicode: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataType(self) -> ghidra.program.model.data.DataType: ...

    def getSymbol(self) -> ghidra.program.model.symbol.Symbol: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def readSymbol(cat: unicode, s: ghidra.program.model.symbol.Symbol) -> ghidra.program.model.pcode.DataTypeSymbol: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeSymbol(self, symtab: ghidra.program.model.symbol.SymbolTable, addr: ghidra.program.model.address.Address, namespace: ghidra.program.model.symbol.Namespace, dtmanage: ghidra.program.model.data.DataTypeManager, clearold: bool) -> None: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @property
    def dataType(self) -> ghidra.program.model.data.DataType: ...

    @property
    def symbol(self) -> ghidra.program.model.symbol.Symbol: ...
