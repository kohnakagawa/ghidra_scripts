import db.util
import ghidra.program.database.function
import ghidra.program.model.listing
import java.io
import java.lang
import java.util


class FunctionTagManagerDB(object, ghidra.program.model.listing.FunctionTagManager, db.util.ErrorHandler):








    def createFunctionTag(self, name: unicode, comment: unicode) -> ghidra.program.model.listing.FunctionTag: ...

    def dbError(self, e: java.io.IOException) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllFunctionTags(self) -> java.util.List: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    def getFunctionTag(self, id: long) -> ghidra.program.model.listing.FunctionTag: ...

    @overload
    def getFunctionTag(self, name: unicode) -> ghidra.program.model.listing.FunctionTag: ...

    def getFunctionTagAdapter(self) -> ghidra.program.database.function.FunctionTagAdapter: ...

    def getFunctionTagMappingAdapter(self) -> ghidra.program.database.function.FunctionTagMappingAdapter: ...

    def hashCode(self) -> int: ...

    def isTagAssigned(self, name: unicode) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setProgram(self, program: ghidra.program.model.listing.Program) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def allFunctionTags(self) -> List[object]: ...

    @property
    def functionTagAdapter(self) -> ghidra.program.database.function.FunctionTagAdapter: ...

    @property
    def functionTagMappingAdapter(self) -> ghidra.program.database.function.FunctionTagMappingAdapter: ...

    @property
    def program(self) -> None: ...  # No getter available.

    @program.setter
    def program(self, value: ghidra.program.model.listing.Program) -> None: ...
