from typing import List
import java.awt
import java.awt.RenderingHints
import java.awt.font
import java.awt.geom
import java.awt.image
import java.awt.image.renderable
import java.lang
import java.text
import java.util


class Graphics2DWrapper(java.awt.Graphics2D):
    """
    A simple wrapper object that changes colors passed to Graphics2D.
    """





    def __init__(self): ...



    def addRenderingHints(self, hints: java.util.Map) -> None: ...

    def clearRect(self, x: int, y: int, width: int, height: int) -> None: ...

    def clip(self, s: java.awt.Shape) -> None: ...

    def clipRect(self, x: int, y: int, width: int, height: int) -> None: ...

    def copyArea(self, x: int, y: int, width: int, height: int, dx: int, dy: int) -> None: ...

    @overload
    def create(self) -> java.awt.Graphics: ...

    @overload
    def create(self, x: int, y: int, width: int, height: int) -> java.awt.Graphics: ...

    def dispose(self) -> None: ...

    def draw(self, s: java.awt.Shape) -> None: ...

    def draw3DRect(self, x: int, y: int, width: int, height: int, raised: bool) -> None: ...

    def drawArc(self, x: int, y: int, width: int, height: int, startAngle: int, arcAngle: int) -> None: ...

    def drawBytes(self, data: List[int], offset: int, length: int, x: int, y: int) -> None: ...

    def drawChars(self, data: List[int], offset: int, length: int, x: int, y: int) -> None: ...

    def drawGlyphVector(self, g: java.awt.font.GlyphVector, x: float, y: float) -> None: ...

    @overload
    def drawImage(self, img: java.awt.Image, xform: java.awt.geom.AffineTransform, obs: java.awt.image.ImageObserver) -> bool: ...

    @overload
    def drawImage(self, img: java.awt.image.BufferedImage, op: java.awt.image.BufferedImageOp, x: int, y: int) -> None: ...

    @overload
    def drawImage(self, img: java.awt.Image, x: int, y: int, observer: java.awt.image.ImageObserver) -> bool: ...

    @overload
    def drawImage(self, img: java.awt.Image, x: int, y: int, bgcolor: java.awt.Color, observer: java.awt.image.ImageObserver) -> bool: ...

    @overload
    def drawImage(self, img: java.awt.Image, x: int, y: int, width: int, height: int, observer: java.awt.image.ImageObserver) -> bool: ...

    @overload
    def drawImage(self, img: java.awt.Image, x: int, y: int, width: int, height: int, bgcolor: java.awt.Color, observer: java.awt.image.ImageObserver) -> bool: ...

    @overload
    def drawImage(self, img: java.awt.Image, dx1: int, dy1: int, dx2: int, dy2: int, sx1: int, sy1: int, sx2: int, sy2: int, observer: java.awt.image.ImageObserver) -> bool: ...

    @overload
    def drawImage(self, img: java.awt.Image, dx1: int, dy1: int, dx2: int, dy2: int, sx1: int, sy1: int, sx2: int, sy2: int, bgcolor: java.awt.Color, observer: java.awt.image.ImageObserver) -> bool: ...

    def drawLine(self, x1: int, y1: int, x2: int, y2: int) -> None: ...

    def drawOval(self, x: int, y: int, width: int, height: int) -> None: ...

    @overload
    def drawPolygon(self, p: java.awt.Polygon) -> None: ...

    @overload
    def drawPolygon(self, xPoints: List[int], yPoints: List[int], nPoints: int) -> None: ...

    def drawPolyline(self, xPoints: List[int], yPoints: List[int], nPoints: int) -> None: ...

    def drawRect(self, x: int, y: int, width: int, height: int) -> None: ...

    def drawRenderableImage(self, img: java.awt.image.renderable.RenderableImage, xform: java.awt.geom.AffineTransform) -> None: ...

    def drawRenderedImage(self, img: java.awt.image.RenderedImage, xform: java.awt.geom.AffineTransform) -> None: ...

    def drawRoundRect(self, x: int, y: int, width: int, height: int, arcWidth: int, arcHeight: int) -> None: ...

    @overload
    def drawString(self, str: unicode, x: int, y: int) -> None: ...

    @overload
    def drawString(self, iterator: java.text.AttributedCharacterIterator, x: int, y: int) -> None: ...

    @overload
    def drawString(self, str: unicode, x: float, y: float) -> None: ...

    @overload
    def drawString(self, iterator: java.text.AttributedCharacterIterator, x: float, y: float) -> None: ...

    def equals(self, obj: object) -> bool: ...

    def fill(self, s: java.awt.Shape) -> None: ...

    def fill3DRect(self, x: int, y: int, width: int, height: int, raised: bool) -> None: ...

    def fillArc(self, x: int, y: int, width: int, height: int, startAngle: int, arcAngle: int) -> None: ...

    def fillOval(self, x: int, y: int, width: int, height: int) -> None: ...

    @overload
    def fillPolygon(self, p: java.awt.Polygon) -> None: ...

    @overload
    def fillPolygon(self, xPoints: List[int], yPoints: List[int], nPoints: int) -> None: ...

    def fillRect(self, x: int, y: int, width: int, height: int) -> None: ...

    def fillRoundRect(self, x: int, y: int, width: int, height: int, arcWidth: int, arcHeight: int) -> None: ...

    def finalize(self) -> None: ...

    def getBackground(self) -> java.awt.Color: ...

    def getClass(self) -> java.lang.Class: ...

    def getClip(self) -> java.awt.Shape: ...

    @overload
    def getClipBounds(self) -> java.awt.Rectangle: ...

    @overload
    def getClipBounds(self, r: java.awt.Rectangle) -> java.awt.Rectangle: ...

    def getClipRect(self) -> java.awt.Rectangle: ...

    def getColor(self) -> java.awt.Color: ...

    def getComposite(self) -> java.awt.Composite: ...

    def getDeviceConfiguration(self) -> java.awt.GraphicsConfiguration: ...

    def getFont(self) -> java.awt.Font: ...

    @overload
    def getFontMetrics(self) -> java.awt.FontMetrics: ...

    @overload
    def getFontMetrics(self, f: java.awt.Font) -> java.awt.FontMetrics: ...

    def getFontRenderContext(self) -> java.awt.font.FontRenderContext: ...

    def getPaint(self) -> java.awt.Paint: ...

    def getRenderingHint(self, hintKey: java.awt.RenderingHints.Key) -> object: ...

    def getRenderingHints(self) -> java.awt.RenderingHints: ...

    def getStroke(self) -> java.awt.Stroke: ...

    def getTransform(self) -> java.awt.geom.AffineTransform: ...

    def hashCode(self) -> int: ...

    def hit(self, rect: java.awt.Rectangle, s: java.awt.Shape, onStroke: bool) -> bool: ...

    def hitClip(self, x: int, y: int, width: int, height: int) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def rotate(self, theta: float) -> None: ...

    @overload
    def rotate(self, theta: float, x: float, y: float) -> None: ...

    def scale(self, sx: float, sy: float) -> None: ...

    def setBackground(self, c: java.awt.Color) -> None: ...

    @overload
    def setClip(self, clip: java.awt.Shape) -> None: ...

    @overload
    def setClip(self, x: int, y: int, width: int, height: int) -> None: ...

    def setColor(self, c: java.awt.Color) -> None: ...

    def setComposite(self, comp: java.awt.Composite) -> None: ...

    def setDelegate(self, delegate: java.awt.Graphics2D) -> None: ...

    def setFont(self, font: java.awt.Font) -> None: ...

    def setPaint(self, paint: java.awt.Paint) -> None: ...

    def setPaintMode(self) -> None: ...

    def setRenderingHint(self, hintKey: java.awt.RenderingHints.Key, hintValue: object) -> None: ...

    def setRenderingHints(self, hints: java.util.Map) -> None: ...

    def setStroke(self, s: java.awt.Stroke) -> None: ...

    def setTransform(self, Tx: java.awt.geom.AffineTransform) -> None: ...

    def setXORMode(self, c1: java.awt.Color) -> None: ...

    def shear(self, shx: float, shy: float) -> None: ...

    def toString(self) -> unicode: ...

    def transform(self, Tx: java.awt.geom.AffineTransform) -> None: ...

    @overload
    def translate(self, x: int, y: int) -> None: ...

    @overload
    def translate(self, tx: float, ty: float) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def XORMode(self) -> None: ...  # No getter available.

    @XORMode.setter
    def XORMode(self, value: java.awt.Color) -> None: ...

    @property
    def background(self) -> java.awt.Color: ...

    @background.setter
    def background(self, value: java.awt.Color) -> None: ...

    @property
    def clipBounds(self) -> java.awt.Rectangle: ...

    @property
    def color(self) -> java.awt.Color: ...

    @color.setter
    def color(self, value: java.awt.Color) -> None: ...

    @property
    def composite(self) -> java.awt.Composite: ...

    @composite.setter
    def composite(self, value: java.awt.Composite) -> None: ...

    @property
    def delegate(self) -> None: ...  # No getter available.

    @delegate.setter
    def delegate(self, value: java.awt.Graphics2D) -> None: ...

    @property
    def deviceConfiguration(self) -> java.awt.GraphicsConfiguration: ...

    @property
    def font(self) -> java.awt.Font: ...

    @font.setter
    def font(self, value: java.awt.Font) -> None: ...

    @property
    def fontMetrics(self) -> java.awt.FontMetrics: ...

    @property
    def fontRenderContext(self) -> java.awt.font.FontRenderContext: ...

    @property
    def paint(self) -> java.awt.Paint: ...

    @paint.setter
    def paint(self, value: java.awt.Paint) -> None: ...

    @property
    def renderingHints(self) -> java.awt.RenderingHints: ...

    @property
    def stroke(self) -> java.awt.Stroke: ...

    @stroke.setter
    def stroke(self, value: java.awt.Stroke) -> None: ...
