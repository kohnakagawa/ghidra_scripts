from typing import List
import ghidra.app.util.datatype.microsoft.GuidUtil
import java.lang


class NewGuid(object):
    size: int



    @overload
    def __init__(self, conv: ghidra.util.DataConverter, bytes: List[int], offset: int): ...

    @overload
    def __init__(self, conv: ghidra.util.DataConverter, GUID: unicode, delim: unicode, type: ghidra.app.util.datatype.microsoft.GuidUtil.GuidType, hasVersion: bool):
        """
        Creates a GUID data type.
        """
        ...



    def equals(self, test: object) -> bool: ...

    def getBytes(self) -> List[int]: ...

    def getClass(self) -> java.lang.Class: ...

    def getName(self) -> unicode: ...

    def getType(self) -> ghidra.app.util.datatype.microsoft.GuidUtil.GuidType: ...

    def getVersion(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def isOK(self) -> bool: ...

    @staticmethod
    def isOKForGUID(bytes: List[int], offset: int) -> bool: ...

    @staticmethod
    def isZeroGUID(bytes: List[int], offset: int) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def toString(self) -> unicode: ...

    @overload
    def toString(self, delim: unicode, useName: bool) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def OK(self) -> bool: ...

    @property
    def bytes(self) -> List[int]: ...

    @property
    def name(self) -> unicode: ...

    @property
    def type(self) -> ghidra.app.util.datatype.microsoft.GuidUtil.GuidType: ...

    @property
    def version(self) -> unicode: ...
