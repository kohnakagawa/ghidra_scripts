from typing import List
import ghidra.feature.vt.gui.filters
import ghidra.framework.options
import java.lang
import javax.swing


class Filter(object):





    class FilterEditingStatus(java.lang.Enum):
        APPLIED: ghidra.feature.vt.gui.filters.Filter.FilterEditingStatus = APPLIED
        DIRTY: ghidra.feature.vt.gui.filters.Filter.FilterEditingStatus = DIRTY
        ERROR: ghidra.feature.vt.gui.filters.Filter.FilterEditingStatus = ERROR
        NONE: ghidra.feature.vt.gui.filters.Filter.FilterEditingStatus = NONE







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.feature.vt.gui.filters.Filter.FilterEditingStatus: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.feature.vt.gui.filters.Filter.FilterEditingStatus]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class FilterShortcutState(java.lang.Enum):
        ALWAYS_PASSES: ghidra.feature.vt.gui.filters.Filter.FilterShortcutState = ALWAYS_PASSES
        NEVER_PASSES: ghidra.feature.vt.gui.filters.Filter.FilterShortcutState = NEVER_PASSES
        REQUIRES_CHECK: ghidra.feature.vt.gui.filters.Filter.FilterShortcutState = REQUIRES_CHECK







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.feature.vt.gui.filters.Filter.FilterShortcutState: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.feature.vt.gui.filters.Filter.FilterShortcutState]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self): ...



    def addFilterStatusListener(self, __a0: ghidra.feature.vt.gui.filters.FilterStatusListener) -> None: ...

    def clearFilter(self) -> None: ...

    def createCopy(self) -> ghidra.feature.vt.gui.filters.Filter: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getComponent(self) -> javax.swing.JComponent: ...

    def getFilterShortcutState(self) -> ghidra.feature.vt.gui.filters.Filter.FilterShortcutState: ...

    def getFilterStatus(self) -> ghidra.feature.vt.gui.filters.Filter.FilterEditingStatus: ...

    def hashCode(self) -> int: ...

    def isSubFilterOf(self, __a0: ghidra.feature.vt.gui.filters.Filter) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def passesFilter(self, __a0: object) -> bool: ...

    def readConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeConfigState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    @property
    def component(self) -> javax.swing.JComponent: ...

    @property
    def filterShortcutState(self) -> ghidra.feature.vt.gui.filters.Filter.FilterShortcutState: ...

    @property
    def filterStatus(self) -> ghidra.feature.vt.gui.filters.Filter.FilterEditingStatus: ...
