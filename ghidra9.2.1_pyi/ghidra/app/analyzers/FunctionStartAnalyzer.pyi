import ghidra.app.analyzers
import ghidra.app.services
import ghidra.app.util.importer
import ghidra.framework.options
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.model.util
import ghidra.util.bytesearch
import ghidra.util.task
import ghidra.xml
import java.lang


class FunctionStartAnalyzer(ghidra.app.services.AbstractAnalyzer, ghidra.util.bytesearch.PatternFactory):





    class FunctionStartAction(object, ghidra.util.bytesearch.MatchAction):




        def __init__(self, __a0: ghidra.app.analyzers.FunctionStartAnalyzer): ...



        def apply(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.Address, __a2: ghidra.util.bytesearch.Match) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def restoreXml(self, __a0: ghidra.xml.XmlPullParser) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class CodeBoundaryAction(object, ghidra.util.bytesearch.MatchAction):




        def __init__(self, __a0: ghidra.app.analyzers.FunctionStartAnalyzer): ...



        def apply(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.Address, __a2: ghidra.util.bytesearch.Match) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def restoreXml(self, __a0: ghidra.xml.XmlPullParser) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ContextAction(object, ghidra.util.bytesearch.MatchAction):




        @overload
        def __init__(self, __a0: ghidra.app.analyzers.FunctionStartAnalyzer): ...

        @overload
        def __init__(self, __a0: ghidra.app.analyzers.FunctionStartAnalyzer, __a1: unicode, __a2: long): ...



        def apply(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.Address, __a2: ghidra.util.bytesearch.Match) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getName(self) -> unicode: ...

        def getValue(self) -> long: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def restoreXml(self, __a0: ghidra.xml.XmlPullParser) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def name(self) -> unicode: ...

        @property
        def value(self) -> long: ...




    class PossibleFunctionStartAction(ghidra.app.analyzers.FunctionStartAnalyzer.FunctionStartAction):




        def __init__(self, __a0: ghidra.app.analyzers.FunctionStartAnalyzer): ...



        def apply(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.Address, __a2: ghidra.util.bytesearch.Match) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def restoreXml(self, __a0: ghidra.xml.XmlPullParser) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    @overload
    def __init__(self): ...

    @overload
    def __init__(self, __a0: unicode, __a1: ghidra.app.services.AnalyzerType): ...



    def added(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.AddressSetView, __a2: ghidra.util.task.TaskMonitor, __a3: ghidra.app.util.importer.MessageLog) -> bool: ...

    def analysisEnded(self, __a0: ghidra.program.model.listing.Program) -> None: ...

    def canAnalyze(self, __a0: ghidra.program.model.listing.Program) -> bool: ...

    def clearExplicitState(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAnalysisType(self) -> ghidra.app.services.AnalyzerType: ...

    def getClass(self) -> java.lang.Class: ...

    def getDefaultEnablement(self, __a0: ghidra.program.model.listing.Program) -> bool: ...

    def getDescription(self) -> unicode: ...

    def getMatchActionByName(self, __a0: unicode) -> ghidra.util.bytesearch.MatchAction: ...

    def getName(self) -> unicode: ...

    def getOrCreatePotentialMatchPropertyMap(self, __a0: ghidra.program.model.listing.Program) -> ghidra.program.model.util.AddressSetPropertyMap: ...

    def getPostRuleByName(self, __a0: unicode) -> ghidra.util.bytesearch.PostRule: ...

    def getPriority(self) -> ghidra.app.services.AnalysisPriority: ...

    def hashCode(self) -> int: ...

    def isPrototype(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def optionsChanged(self, __a0: ghidra.framework.options.Options, __a1: ghidra.program.model.listing.Program) -> None: ...

    def registerOptions(self, __a0: ghidra.framework.options.Options, __a1: ghidra.program.model.listing.Program) -> None: ...

    def removed(self, __a0: ghidra.program.model.listing.Program, __a1: ghidra.program.model.address.AddressSetView, __a2: ghidra.util.task.TaskMonitor, __a3: ghidra.app.util.importer.MessageLog) -> bool: ...

    def setExplicitState(self, __a0: ghidra.util.bytesearch.SequenceSearchState) -> None: ...

    def supportsOneTimeAnalysis(self) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def explicitState(self) -> None: ...  # No getter available.

    @explicitState.setter
    def explicitState(self, value: ghidra.util.bytesearch.SequenceSearchState) -> None: ...
