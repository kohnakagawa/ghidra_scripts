import ghidra.bitpatterns.gui
import ghidra.bitpatterns.info
import java.lang
import javax.swing
import javax.swing.tree


class InstructionSequenceTreePanelBuilder(ghidra.bitpatterns.gui.ContextRegisterFilterablePanelBuilder):




    def __init__(self, __a0: ghidra.bitpatterns.info.PatternType): ...



    def applyFilterAction(self) -> None: ...

    def buildMainPanel(self) -> javax.swing.JPanel: ...

    def clearFilterAction(self) -> None: ...

    def enableFilterButtons(self, __a0: bool) -> None: ...

    def enablePercentageFilterButtons(self, __a0: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getButtonPanel(self) -> javax.swing.JPanel: ...

    def getClass(self) -> java.lang.Class: ...

    def getContextRegisterFilter(self) -> ghidra.bitpatterns.info.ContextRegisterFilter: ...

    def getGTree(self) -> ghidra.bitpatterns.info.FunctionBitPatternsGTree: ...

    def getSelectionPath(self) -> javax.swing.tree.TreePath: ...

    def hashCode(self) -> int: ...

    def isTreeEmpty(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setFsReaderAndUpdateExtent(self, __a0: ghidra.bitpatterns.info.FileBitPatternInfoReader) -> None: ...

    def toString(self) -> unicode: ...

    def updateExtentAndClearFilter(self, __a0: ghidra.bitpatterns.info.ContextRegisterExtent) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def GTree(self) -> ghidra.bitpatterns.info.FunctionBitPatternsGTree: ...

    @property
    def fsReaderAndUpdateExtent(self) -> None: ...  # No getter available.

    @fsReaderAndUpdateExtent.setter
    def fsReaderAndUpdateExtent(self, value: ghidra.bitpatterns.info.FileBitPatternInfoReader) -> None: ...

    @property
    def selectionPath(self) -> javax.swing.tree.TreePath: ...

    @property
    def treeEmpty(self) -> bool: ...
