import ghidra.app.plugin.exceptionhandlers.gcc
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.listing
import java.lang


class DwarfEHDecoder(object):








    def decode(self, __a0: ghidra.app.plugin.exceptionhandlers.gcc.DwarfDecodeContext) -> long: ...

    def decodeAddress(self, __a0: ghidra.app.plugin.exceptionhandlers.gcc.DwarfDecodeContext) -> ghidra.program.model.address.Address: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataApplicationMode(self) -> ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDataApplicationMode: ...

    def getDataFormat(self) -> ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDataDecodeFormat: ...

    def getDataType(self, __a0: ghidra.program.model.listing.Program) -> ghidra.program.model.data.DataType: ...

    def getDecodeSize(self, __a0: ghidra.program.model.listing.Program) -> int: ...

    def hashCode(self) -> int: ...

    def isSigned(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setApplicationMode(self, __a0: ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDataApplicationMode) -> None: ...

    def setIndirect(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def applicationMode(self) -> None: ...  # No getter available.

    @applicationMode.setter
    def applicationMode(self, value: ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDataApplicationMode) -> None: ...

    @property
    def dataApplicationMode(self) -> ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDataApplicationMode: ...

    @property
    def dataFormat(self) -> ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDataDecodeFormat: ...

    @property
    def indirect(self) -> None: ...  # No getter available.

    @indirect.setter
    def indirect(self, value: bool) -> None: ...

    @property
    def signed(self) -> bool: ...
