from typing import List
import ghidra.bitpatterns.info
import java.lang


class PatternEvaluationStats(object):




    def __init__(self): ...



    def addRowObject(self, __a0: ghidra.bitpatterns.info.PatternEvalRowObject) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getNumContextConflicts(self) -> int: ...

    def getNumFPData(self) -> int: ...

    def getNumFPMisaligned(self) -> int: ...

    def getNumPossibleStartCode(self) -> int: ...

    def getNumPrePatternHit(self) -> int: ...

    def getNumTruePositives(self) -> int: ...

    def getNumUndefined(self) -> int: ...

    def getNumWrongFlow(self) -> int: ...

    def getRowObjects(self) -> List[object]: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def numContextConflicts(self) -> int: ...

    @property
    def numFPData(self) -> int: ...

    @property
    def numFPMisaligned(self) -> int: ...

    @property
    def numPossibleStartCode(self) -> int: ...

    @property
    def numPrePatternHit(self) -> int: ...

    @property
    def numTruePositives(self) -> int: ...

    @property
    def numUndefined(self) -> int: ...

    @property
    def numWrongFlow(self) -> int: ...

    @property
    def rowObjects(self) -> List[object]: ...
