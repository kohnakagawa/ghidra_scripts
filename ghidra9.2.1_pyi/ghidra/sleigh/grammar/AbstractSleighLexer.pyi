from typing import List
import ghidra.sleigh.grammar
import java.lang
import org.antlr.runtime


class AbstractSleighLexer(org.antlr.runtime.Lexer, ghidra.sleigh.grammar.SleighRecognizerConstants):




    @overload
    def __init__(self): ...

    @overload
    def __init__(self, input: org.antlr.runtime.CharStream, state: org.antlr.runtime.RecognizerSharedState): ...



    def alreadyParsedRule(self, __a0: org.antlr.runtime.IntStream, __a1: int) -> bool: ...

    def beginResync(self) -> None: ...

    @overload
    def consumeUntil(self, __a0: org.antlr.runtime.IntStream, __a1: int) -> None: ...

    @overload
    def consumeUntil(self, __a0: org.antlr.runtime.IntStream, __a1: org.antlr.runtime.BitSet) -> None: ...

    def displayRecognitionError(self, __a0: List[unicode], __a1: org.antlr.runtime.RecognitionException) -> None: ...

    @overload
    def emit(self) -> org.antlr.runtime.Token: ...

    @overload
    def emit(self, __a0: org.antlr.runtime.Token) -> None: ...

    def emitErrorMessage(self, msg: unicode) -> None: ...

    def endResync(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def failed(self) -> bool: ...

    def getBacktrackingLevel(self) -> int: ...

    def getCharErrorDisplay(self, __a0: int) -> unicode: ...

    def getCharIndex(self) -> int: ...

    def getCharPositionInLine(self) -> int: ...

    def getCharStream(self) -> org.antlr.runtime.CharStream: ...

    def getClass(self) -> java.lang.Class: ...

    def getEOFToken(self) -> org.antlr.runtime.Token: ...

    def getErrorHeader(self, e: org.antlr.runtime.RecognitionException) -> unicode: ...

    def getErrorMessage(self, e: org.antlr.runtime.RecognitionException, tokenNames: List[unicode]) -> unicode: ...

    def getGrammarFileName(self) -> unicode: ...

    def getLine(self) -> int: ...

    def getNumberOfSyntaxErrors(self) -> int: ...

    @overload
    def getRuleInvocationStack(self) -> List[object]: ...

    @overload
    @staticmethod
    def getRuleInvocationStack(__a0: java.lang.Throwable, __a1: unicode) -> List[object]: ...

    def getRuleMemoization(self, __a0: int, __a1: int) -> int: ...

    def getRuleMemoizationCacheSize(self) -> int: ...

    def getSourceName(self) -> unicode: ...

    def getText(self) -> unicode: ...

    def getTokenErrorDisplay(self, t: org.antlr.runtime.Token) -> unicode: ...

    def getTokenNames(self) -> List[unicode]: ...

    def hashCode(self) -> int: ...

    def mTokens(self) -> None: ...

    @overload
    def match(self, __a0: int) -> None: ...

    @overload
    def match(self, __a0: unicode) -> None: ...

    @overload
    def match(self, __a0: org.antlr.runtime.IntStream, __a1: int, __a2: org.antlr.runtime.BitSet) -> object: ...

    @overload
    def matchAny(self) -> None: ...

    @overload
    def matchAny(self, __a0: org.antlr.runtime.IntStream) -> None: ...

    def matchRange(self, __a0: int, __a1: int) -> None: ...

    def memoize(self, __a0: org.antlr.runtime.IntStream, __a1: int, __a2: int) -> None: ...

    def mismatchIsMissingToken(self, __a0: org.antlr.runtime.IntStream, __a1: org.antlr.runtime.BitSet) -> bool: ...

    def mismatchIsUnwantedToken(self, __a0: org.antlr.runtime.IntStream, __a1: int) -> bool: ...

    def nextToken(self) -> org.antlr.runtime.Token: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def recover(self, __a0: org.antlr.runtime.RecognitionException) -> None: ...

    @overload
    def recover(self, __a0: org.antlr.runtime.IntStream, __a1: org.antlr.runtime.RecognitionException) -> None: ...

    def recoverFromMismatchedSet(self, __a0: org.antlr.runtime.IntStream, __a1: org.antlr.runtime.RecognitionException, __a2: org.antlr.runtime.BitSet) -> object: ...

    def reportError(self, __a0: org.antlr.runtime.RecognitionException) -> None: ...

    def reset(self) -> None: ...

    def setBacktrackingLevel(self, __a0: int) -> None: ...

    def setCharStream(self, __a0: org.antlr.runtime.CharStream) -> None: ...

    def setEnv(self, env: ghidra.sleigh.grammar.ParsingEnvironment) -> None: ...

    def setText(self, __a0: unicode) -> None: ...

    def skip(self) -> None: ...

    def toString(self) -> unicode: ...

    def toStrings(self, __a0: List[object]) -> List[object]: ...

    @overload
    def traceIn(self, __a0: unicode, __a1: int) -> None: ...

    @overload
    def traceIn(self, __a0: unicode, __a1: int, __a2: object) -> None: ...

    @overload
    def traceOut(self, __a0: unicode, __a1: int) -> None: ...

    @overload
    def traceOut(self, __a0: unicode, __a1: int, __a2: object) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def env(self) -> None: ...  # No getter available.

    @env.setter
    def env(self, value: ghidra.sleigh.grammar.ParsingEnvironment) -> None: ...
