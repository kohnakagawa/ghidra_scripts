import ghidra.pcodeCPort.slghpatexpress
import ghidra.pcodeCPort.slghpattern
import java.lang


class TokenPattern(object):
    location: ghidra.sleigh.grammar.Location



    @overload
    def __init__(self, __a0: ghidra.sleigh.grammar.Location): ...

    @overload
    def __init__(self, __a0: ghidra.sleigh.grammar.Location, __a1: bool): ...

    @overload
    def __init__(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghpatexpress.TokenPattern): ...

    @overload
    def __init__(self, __a0: ghidra.sleigh.grammar.Location, __a1: long, __a2: int, __a3: int): ...

    @overload
    def __init__(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.context.Token, __a2: long, __a3: int, __a4: int): ...



    def alwaysFalse(self) -> bool: ...

    def alwaysInstructionTrue(self) -> bool: ...

    def alwaysTrue(self) -> bool: ...

    @staticmethod
    def buildLittleBlock(__a0: int, __a1: int, __a2: int, __a3: long) -> ghidra.pcodeCPort.slghpattern.PatternBlock: ...

    def commonSubPattern(self, __a0: ghidra.pcodeCPort.slghpatexpress.TokenPattern) -> ghidra.pcodeCPort.slghpatexpress.TokenPattern: ...

    def copyInto(self, __a0: ghidra.pcodeCPort.slghpatexpress.TokenPattern) -> ghidra.pcodeCPort.slghpatexpress.TokenPattern: ...

    def dispose(self) -> None: ...

    def doAnd(self, __a0: ghidra.pcodeCPort.slghpatexpress.TokenPattern) -> ghidra.pcodeCPort.slghpatexpress.TokenPattern: ...

    def doCat(self, __a0: ghidra.pcodeCPort.slghpatexpress.TokenPattern) -> ghidra.pcodeCPort.slghpatexpress.TokenPattern: ...

    def doOr(self, __a0: ghidra.pcodeCPort.slghpatexpress.TokenPattern) -> ghidra.pcodeCPort.slghpatexpress.TokenPattern: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getLeftEllipsis(self) -> bool: ...

    def getMinimumLength(self) -> int: ...

    def getPattern(self) -> ghidra.pcodeCPort.slghpattern.Pattern: ...

    def getRightEllipsis(self) -> bool: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setLeftEllipsis(self, __a0: bool) -> None: ...

    def setRightEllipsis(self, __a0: bool) -> None: ...

    def simplifyPattern(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def leftEllipsis(self) -> bool: ...

    @leftEllipsis.setter
    def leftEllipsis(self, value: bool) -> None: ...

    @property
    def minimumLength(self) -> int: ...

    @property
    def pattern(self) -> ghidra.pcodeCPort.slghpattern.Pattern: ...

    @property
    def rightEllipsis(self) -> bool: ...

    @rightEllipsis.setter
    def rightEllipsis(self, value: bool) -> None: ...
