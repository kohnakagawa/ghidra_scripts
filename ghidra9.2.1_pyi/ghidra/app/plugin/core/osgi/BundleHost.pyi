from typing import List
import generic.jar
import ghidra.app.plugin.core.osgi
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.util.task
import java.io
import java.lang
import java.nio.file
import java.util
import org.osgi.framework


class BundleHost(object):
    ACTIVATING_BUNDLE_ERROR_MSG: unicode = u'activating bundle'



    def __init__(self): ...



    def activateAll(self, __a0: java.util.Collection, __a1: ghidra.util.task.TaskMonitor, __a2: java.io.PrintWriter) -> None: ...

    def activateInStages(self, __a0: java.util.Collection, __a1: ghidra.util.task.TaskMonitor, __a2: java.io.PrintWriter) -> None: ...

    @overload
    def activateSynchronously(self, __a0: unicode) -> None: ...

    @overload
    def activateSynchronously(self, __a0: org.osgi.framework.Bundle) -> None: ...

    @overload
    def add(self, __a0: generic.jar.ResourceFile, __a1: bool, __a2: bool) -> ghidra.app.plugin.core.osgi.GhidraBundle: ...

    @overload
    def add(self, __a0: List[object], __a1: bool, __a2: bool) -> java.util.Collection: ...

    def addListener(self, __a0: ghidra.app.plugin.core.osgi.BundleHostListener) -> None: ...

    def canResolveAll(self, __a0: java.util.Collection) -> bool: ...

    @overload
    def deactivateSynchronously(self, __a0: unicode) -> None: ...

    @overload
    def deactivateSynchronously(self, __a0: org.osgi.framework.Bundle) -> None: ...

    def disable(self, __a0: ghidra.app.plugin.core.osgi.GhidraBundle) -> bool: ...

    def dispose(self) -> None: ...

    @overload
    def enable(self, __a0: generic.jar.ResourceFile) -> bool: ...

    @overload
    def enable(self, __a0: ghidra.app.plugin.core.osgi.GhidraBundle) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getBundleFiles(self) -> java.util.Collection: ...

    def getClass(self) -> java.lang.Class: ...

    def getExistingGhidraBundle(self, __a0: generic.jar.ResourceFile) -> ghidra.app.plugin.core.osgi.GhidraBundle: ...

    def getGhidraBundle(self, __a0: generic.jar.ResourceFile) -> ghidra.app.plugin.core.osgi.GhidraBundle: ...

    def getGhidraBundles(self) -> java.util.Collection: ...

    @staticmethod
    def getOsgiDir() -> java.nio.file.Path: ...

    def hashCode(self) -> int: ...

    def install(self, __a0: ghidra.app.plugin.core.osgi.GhidraBundle) -> org.osgi.framework.Bundle: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def remove(self, __a0: unicode) -> None: ...

    @overload
    def remove(self, __a0: generic.jar.ResourceFile) -> None: ...

    @overload
    def remove(self, __a0: ghidra.app.plugin.core.osgi.GhidraBundle) -> None: ...

    @overload
    def remove(self, __a0: java.util.Collection) -> None: ...

    def removeListener(self, __a0: ghidra.app.plugin.core.osgi.BundleHostListener) -> None: ...

    def resolve(self, __a0: List[object]) -> List[object]: ...

    def restoreManagedBundleState(self, __a0: ghidra.framework.options.SaveState, __a1: ghidra.framework.plugintool.PluginTool) -> None: ...

    def saveManagedBundleState(self, __a0: ghidra.framework.options.SaveState) -> None: ...

    def startFramework(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def bundleFiles(self) -> java.util.Collection: ...

    @property
    def ghidraBundles(self) -> java.util.Collection: ...
