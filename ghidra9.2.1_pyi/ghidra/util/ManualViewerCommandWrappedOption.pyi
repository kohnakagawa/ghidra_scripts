from typing import List
import ghidra.framework.options
import ghidra.util
import java.lang


class ManualViewerCommandWrappedOption(object, ghidra.framework.options.CustomOption):
    CUSTOM_OPTION_CLASS_NAME_KEY: unicode = u'CUSTOM_OPTION_CLASS'
    MANUAL_VIEWER_OPTIONS: unicode = u'Manual Viewer Options'
    OPTIONS_CATEGORY_NAME: unicode = u'Processor Manuals'



    def __init__(self): ...



    def equals(self, obj: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCommandArguments(self) -> List[unicode]: ...

    def getCommandString(self) -> unicode: ...

    @staticmethod
    def getDefaultBrowserLoaderOptions() -> ghidra.util.ManualViewerCommandWrappedOption: ...

    def getUrlReplacementString(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readState(self, saveState: ghidra.framework.options.SaveState) -> None: ...

    def setCommandArguments(self, commandArguments: List[unicode]) -> None: ...

    def setCommandString(self, commandString: unicode) -> None: ...

    def setUrlReplacementString(self, urlReplacementString: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeState(self, saveState: ghidra.framework.options.SaveState) -> None: ...

    @property
    def commandArguments(self) -> List[unicode]: ...

    @commandArguments.setter
    def commandArguments(self, value: List[unicode]) -> None: ...

    @property
    def commandString(self) -> unicode: ...

    @commandString.setter
    def commandString(self, value: unicode) -> None: ...

    @property
    def urlReplacementString(self) -> unicode: ...

    @urlReplacementString.setter
    def urlReplacementString(self, value: unicode) -> None: ...
