from typing import List
import ghidra.app.util.bin.format.pdb2.pdbreader.symbol
import java.lang


class AbstractThunkMsSymbol(ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractMsSymbol, ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AddressMsSymbol, ghidra.app.util.bin.format.pdb2.pdbreader.symbol.NameMsSymbol):





    class Ordinal(java.lang.Enum):
        ADJUSTOR: ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractThunkMsSymbol.Ordinal = Type: Adjustor
        LOAD: ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractThunkMsSymbol.Ordinal = Type: 04
        NOTYPE: ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractThunkMsSymbol.Ordinal =
        PCODE: ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractThunkMsSymbol.Ordinal = Type: 03
        TRAMPOLINE_INCREMENTAL: ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractThunkMsSymbol.Ordinal = Type: 05
        TRANMPOLINE_BRANCHISLAND: ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractThunkMsSymbol.Ordinal = Type: 06
        VCALL: ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractThunkMsSymbol.Ordinal = Type: VCall
        label: unicode
        value: int







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def fromValue(__a0: int) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractThunkMsSymbol.Ordinal: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractThunkMsSymbol.Ordinal: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractThunkMsSymbol.Ordinal]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.app.util.bin.format.pdb2.pdbreader.AbstractPdb, __a1: ghidra.app.util.bin.format.pdb2.pdbreader.PdbByteReader, __a2: int, __a3: ghidra.app.util.bin.format.pdb2.pdbreader.StringParseType): ...



    def emit(self, __a0: java.lang.StringBuilder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getEndPointer(self) -> long: ...

    def getLength(self) -> int: ...

    def getName(self) -> unicode: ...

    def getNextPointer(self) -> long: ...

    def getOffset(self) -> long: ...

    def getOrdinal(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractThunkMsSymbol.Ordinal: ...

    def getParentPointer(self) -> long: ...

    def getPdbId(self) -> int: ...

    def getSegment(self) -> int: ...

    def getVariant(self) -> int: ...

    def getVariantString(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def endPointer(self) -> long: ...

    @property
    def length(self) -> int: ...

    @property
    def name(self) -> unicode: ...

    @property
    def nextPointer(self) -> long: ...

    @property
    def offset(self) -> long: ...

    @property
    def ordinal(self) -> ghidra.app.util.bin.format.pdb2.pdbreader.symbol.AbstractThunkMsSymbol.Ordinal: ...

    @property
    def parentPointer(self) -> long: ...

    @property
    def segment(self) -> int: ...

    @property
    def variant(self) -> int: ...

    @property
    def variantString(self) -> unicode: ...
