import generic.stl
import ghidra.program.model.data
import java.lang
import java.util


class DataTypeDependencyOrderer(object):





    class Entry(object):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    @overload
    def __init__(self, __a0: ghidra.program.model.data.DataTypeManager): ...

    @overload
    def __init__(self, __a0: ghidra.program.model.data.DataTypeManager, __a1: java.util.ArrayList): ...



    def addType(self, __a0: ghidra.program.model.data.DataType) -> None: ...

    def addTypeList(self, __a0: java.util.ArrayList) -> None: ...

    def clear(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAcyclicDependencyLists(self) -> generic.stl.Pair: ...

    def getClass(self) -> java.lang.Class: ...

    def getDependencyList(self) -> java.util.ArrayList: ...

    def getStructList(self) -> java.util.ArrayList: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeType(self, __a0: ghidra.program.model.data.DataType) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def acyclicDependencyLists(self) -> generic.stl.Pair: ...

    @property
    def dependencyList(self) -> java.util.ArrayList: ...

    @property
    def structList(self) -> java.util.ArrayList: ...
